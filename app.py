"""Application IA Juridique - Droit P√©nal des Affaires - Version optimis√©e"""

import importlib
import importlib.util
import json
import logging
import os
import sys
import time
import traceback
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional

from managers.azure_blob_manager import AzureBlobManager
from managers.azure_search_manager import AzureSearchManager
from services.universal_search_service import UniversalSearchService
from managers.document_manager import DocumentManager
from utils import LEGAL_SUGGESTIONS

import streamlit as st
import streamlit.components.v1 as components

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuration de la page
st.set_page_config(
    page_title="IA Juridique - Droit P√©nal des Affaires",
    page_icon="‚öñÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√©
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: 700;
        background: linear-gradient(90deg, #1a237e 0%, #3949ab 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-align: center;
        padding: 1rem 0;
    }
    .module-card {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 1.5rem;
        margin: 0.5rem 0;
        border: 1px solid #e0e0e0;
        transition: all 0.3s ease;
    }
    .module-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    .status-ok { color: #4caf50; }
    .status-error { color: #f44336; }
    .status-warning { color: #ff9800; }
</style>
""", unsafe_allow_html=True)

# ========== CONFIGURATION DES MODULES ==========
# Configuration compl√®te de tous les modules existants
MODULES_CONFIG = {
    # Modules d'analyse
    "comparison": {
        "name": "üìä Comparaison de documents",
        "desc": "Analyse comparative avec d√©tection des contradictions",
        "category": "analyse",
        "priority": 1
    },
    "timeline": {
        "name": "üìÖ Timeline juridique",
        "desc": "Chronologie des infractions et proc√©dures",
        "category": "analyse",
        "priority": 2
    },
    "extraction": {
        "name": "üìë Extraction d'informations",
        "desc": "Extraction des √©l√©ments constitutifs",
        "category": "analyse",
        "priority": 3
    },
    "mapping": {
        "name": "üó∫Ô∏è Cartographie des relations",
        "desc": "Analyse des r√©seaux d'entit√©s et relations",
        "category": "analyse",
        "priority": 4
    },
    "recherche_analyse_unifiee": {
        "name": "üîç Recherche & Analyse unifi√©e",
        "desc": "Recherche intelligente multi-sources avec IA",
        "category": "analyse",
        "priority": 5
    },
    
    # Modules de strat√©gie
    "strategy": {
        "name": "‚öñÔ∏è Strat√©gie de d√©fense",
        "desc": "√âlaboration de strat√©gies p√©nales",
        "category": "strategie",
        "priority": 1
    },
    "plaidoirie": {
        "name": "üéØ Plaidoirie p√©nale",
        "desc": "Pr√©paration des plaidoiries",
        "category": "strategie",
        "priority": 2
    },
    "preparation_client": {
        "name": "üë§ Pr√©paration client",
        "desc": "Pr√©parer aux interrogatoires",
        "category": "strategie",
        "priority": 3
    },
    
    # Modules de r√©daction
    "redaction_unified": {
        "name": "‚úçÔ∏è R√©daction juridique",
        "desc": "G√©n√©ration de tous types de documents",
        "category": "redaction",
        "priority": 1
    },
    "generation_longue": {
        "name": "üìú G√©n√©ration longue",
        "desc": "Documents juridiques complexes et d√©taill√©s",
        "category": "redaction",
        "priority": 2
    },
    
    # Modules de gestion
    "import_export": {
        "name": "üìÅ Import/Export",
        "desc": "Gestion des documents et donn√©es",
        "category": "gestion",
        "priority": 1
    },
    "pieces_manager": {
        "name": "üìé Gestion des pi√®ces",
        "desc": "Organisation du dossier p√©nal",
        "category": "gestion",
        "priority": 2
    },
    "dossier_penal": {
        "name": "üìÇ Dossier p√©nal unifi√©",
        "desc": "Vue d'ensemble du dossier",
        "category": "gestion",
        "priority": 3
    },
    
    # Modules sp√©cialis√©s
    "jurisprudence": {
        "name": "‚öñÔ∏è Jurisprudence",
        "desc": "Recherche et analyse de jurisprudence",
        "category": "specialise",
        "priority": 1
    },
    "email": {
        "name": "üìß Gestion des emails",
        "desc": "Centre de messagerie juridique avec IA",
        "category": "communication",
        "priority": 1
    }
}

# Modules √† v√©rifier/cr√©er (ceux qui pourraient manquer)
MODULES_TO_CREATE = {
    # Modules possiblement manquants
    "search_module": {
        "name": "üîç Recherche simple",
        "desc": "Recherche basique dans les documents",
        "category": "analyse",
        "priority": 6
    },
    "contradiction_analysis": {
        "name": "‚ö° Analyse contradictions",
        "desc": "D√©tection automatique des incoh√©rences",
        "category": "analyse",
        "priority": 7
    },
    "conclusions": {
        "name": "üìù Conclusions p√©nales",
        "desc": "R√©daction de conclusions",
        "category": "redaction",
        "priority": 3
    },
    "courrier_juridique": {
        "name": "‚úâÔ∏è Courriers juridiques",
        "desc": "Correspondances et notifications",
        "category": "redaction",
        "priority": 4
    },
    "bordereau": {
        "name": "üìã Bordereau de pi√®ces",
        "desc": "G√©n√©ration de bordereaux",
        "category": "redaction",
        "priority": 5
    },
    "calcul_prejudice": {
        "name": "üí∞ Calcul pr√©judice",
        "desc": "√âvaluation des pr√©judices",
        "category": "specialise",
        "priority": 2
    },
    "procedure_verification": {
        "name": "‚úÖ V√©rification proc√©dure",
        "desc": "Contr√¥le de conformit√© proc√©durale",
        "category": "specialise",
        "priority": 3
    },
    "risk_assessment": {
        "name": "‚ö†Ô∏è √âvaluation risques",
        "desc": "Analyse des risques juridiques",
        "category": "specialise",
        "priority": 4
    },
    "evidence_chain": {
        "name": "üîó Cha√Æne de preuves",
        "desc": "Gestion et analyse des preuves",
        "category": "specialise",
        "priority": 5
    },
    "negotiation": {
        "name": "ü§ù N√©gociation p√©nale",
        "desc": "Strat√©gies de n√©gociation",
        "category": "strategie",
        "priority": 4
    },
    "witness_preparation": {
        "name": "üë• Pr√©paration t√©moins",
        "desc": "Pr√©parer les t√©moins",
        "category": "strategie",
        "priority": 5
    },
    "report_generation": {
        "name": "üìä G√©n√©ration rapports",
        "desc": "Cr√©ation de rapports juridiques",
        "category": "redaction",
        "priority": 6
    },
    "integration_juridique": {
        "name": "üîå Int√©gration juridique",
        "desc": "Int√©gration avec syst√®mes externes",
        "category": "technique",
        "priority": 1
    },
    "chat": {
        "name": "üí¨ Chat juridique",
        "desc": "Assistant conversationnel juridique",
        "category": "communication",
        "priority": 2
    }
}

# ========== GESTIONNAIRE DE MODULES ==========
class ModuleManager:
    """Gestionnaire centralis√© des modules"""
    
    def __init__(self):
        self.modules_path = Path(__file__).parent / "modules"
        self.managers_path = Path(__file__).parent / "managers"
        self.loaded_modules = {}
        self.available_modules = {}
        self.load_status = {"success": [], "failed": {}, "warnings": []}
        
    def discover_modules(self):
        """D√©couvre tous les modules disponibles"""
        # V√©rifier l'existence du dossier modules
        if not self.modules_path.exists():
            self.load_status["warnings"].append(f"Dossier modules non trouv√© : {self.modules_path}")
            logger.error(f"‚ùå Dossier modules non trouv√© : {self.modules_path}")
            return
        
        logger.info(f"üìÇ Scan du dossier : {self.modules_path}")
        
        # Scanner les fichiers Python
        module_files = list(self.modules_path.glob("*.py"))
        logger.info(f"üìã Fichiers trouv√©s : {[f.name for f in module_files]}")
        
        for module_file in module_files:
            if module_file.name.startswith("_"):
                continue
                
            module_name = module_file.stem
            logger.info(f"üîç Analyse du module : {module_name}")
            
            # Chercher d'abord dans MODULES_CONFIG
            if module_name in MODULES_CONFIG:
                self.available_modules[module_name] = {
                    "path": module_file,
                    "config": MODULES_CONFIG[module_name],
                    "loaded": False
                }
                logger.info(f"‚úÖ Module reconnu : {module_name}")
            # Puis dans MODULES_TO_CREATE (au cas o√π ils ont √©t√© cr√©√©s)
            elif module_name in MODULES_TO_CREATE:
                self.available_modules[module_name] = {
                    "path": module_file,
                    "config": MODULES_TO_CREATE[module_name],
                    "loaded": False
                }
                logger.info(f"‚úÖ Module optionnel trouv√© : {module_name}")
            else:
                logger.warning(f"‚ö†Ô∏è Module non configur√© : {module_name}")
                self.load_status["warnings"].append(f"Module {module_name} trouv√© mais non configur√©")
    
    def load_module(self, module_name: str) -> bool:
        """Charge un module sp√©cifique"""
        if module_name in self.loaded_modules:
            return True
            
        if module_name not in self.available_modules:
            self.load_status["failed"][module_name] = "Module non trouv√© dans la configuration"
            return False
            
        module_info = self.available_modules[module_name]
        module_path = module_info["path"]
        
        try:
            # Import dynamique du module - CORRECTION ICI
            spec = importlib.util.spec_from_file_location(
                f"modules.{module_name}",  # Chemin corrig√©
                module_path
            )
            
            if spec and spec.loader:
                module = importlib.util.module_from_spec(spec)
                sys.modules[f"modules.{module_name}"] = module
                spec.loader.exec_module(module)
                
                # V√©rifier que le module a une fonction run() ex√©cutable
                if callable(getattr(module, 'run', None)):
                    self.loaded_modules[module_name] = module
                    module_info["loaded"] = True
                    self.load_status["success"].append(module_name)
                    logger.info(f"‚úÖ Module {module_name} charg√© avec succ√®s")
                    return True
                else:
                    self.load_status["failed"][module_name] = "Fonction run() non trouv√©e"
                    logger.error(f"‚ùå Module {module_name} : pas de fonction run()")
                    return False
            else:
                self.load_status["failed"][module_name] = "Impossible de cr√©er les specs"
                return False
                
        except Exception as e:
            self.load_status["failed"][module_name] = str(e)
            logger.error(f"Erreur chargement {module_name}: {traceback.format_exc()}")
            return False
    
    def run_module(self, module_name: str):
        """Ex√©cute un module"""
        if module_name not in self.loaded_modules:
            if not self.load_module(module_name):
                st.error(f"‚ùå Impossible de charger le module {module_name}")
                if module_name in self.load_status["failed"]:
                    st.error(f"Erreur : {self.load_status['failed'][module_name]}")
                return
        
        try:
            # Ex√©cuter le module
            self.loaded_modules[module_name].run()
        except Exception as e:
            st.error(f"‚ùå Erreur lors de l'ex√©cution du module {module_name}")
            st.error(str(e))
            logger.error(f"Erreur ex√©cution {module_name}: {traceback.format_exc()}")
    
    def get_modules_by_category(self) -> Dict[str, List[Dict]]:
        """Retourne les modules group√©s par cat√©gorie"""
        modules_by_cat = {}
        
        for name, info in self.available_modules.items():
            config = info["config"]
            category = config.get("category", "autre")
            
            if category not in modules_by_cat:
                modules_by_cat[category] = []
            
            modules_by_cat[category].append({
                "id": name,
                "name": config["name"],
                "desc": config["desc"],
                "loaded": info["loaded"],
                "priority": config.get("priority", 99)
            })
        
        # Trier par priorit√©
        for category in modules_by_cat:
            modules_by_cat[category].sort(key=lambda x: x["priority"])
        
        return modules_by_cat

# ========== GESTIONNAIRE MULTI-LLM ==========
def load_multi_llm_manager():
    """Charge le gestionnaire multi-LLM"""
    try:
        from managers.multi_llm_manager import MultiLLMManager
        return MultiLLMManager(), True
    except ImportError:
        logger.warning("MultiLLMManager non disponible")
        return None, False
    except Exception as e:
        logger.error(f"Erreur chargement MultiLLMManager: {e}")
        return None, False

# ========== INITIALISATION ==========
def init_session_state():
    """Initialise l'√©tat de session"""
    if 'initialized' not in st.session_state:
        st.session_state.initialized = True
        st.session_state.current_view = 'dashboard'
        st.session_state.module_manager = ModuleManager()
        st.session_state.multi_llm_manager = None
        st.session_state.azure_connected = False

        # Cr√©er les gestionnaires Azure et les stocker
        st.session_state.azure_blob_manager = AzureBlobManager()
        st.session_state.azure_search_manager = AzureSearchManager()

        # Enregistrer les erreurs √©ventuelles
        st.session_state.azure_blob_error = st.session_state.azure_blob_manager.get_connection_error()
        st.session_state.azure_search_error = st.session_state.azure_search_manager.get_connection_error()

        st.session_state.azure_connected = (
            st.session_state.azure_blob_manager.is_connected()
            and st.session_state.azure_search_manager.is_connected()
        )
        
        # D√©couvrir les modules
        st.session_state.module_manager.discover_modules()
        
        # Charger le gestionnaire LLM
        llm_manager, llm_success = load_multi_llm_manager()
        if llm_success:
            st.session_state.multi_llm_manager = llm_manager

# ========== INTERFACE PRINCIPALE ==========
def show_dashboard():
    """Affiche le tableau de bord principal"""
    st.markdown('<h1 class="main-header">‚öñÔ∏è IA Juridique - Droit P√©nal des Affaires</h1>', unsafe_allow_html=True)

    # Barre de recherche
    search_query = st.text_input(
        "üîç Recherche de dossier ou commande",
        placeholder="Ex: @DOSSIER123",
        key="dashboard_search",
    )

    if search_query.startswith("@"):
        st.info(f"Recherche dossier : {search_query[1:]}")

    if search_query:
        suggestion = next(
            (s for s in LEGAL_SUGGESTIONS if s.lower().startswith(search_query.lower())),
            None,
        )
        if suggestion:
            st.markdown(f"üí° Suggestion : *{suggestion}*")

    search_service = UniversalSearchService()

    if search_query:
        query_to_use = search_query

        if search_query.startswith("@"):
            folder = search_query[1:].split()[0]
            st.info(f"Recherche dossier : {folder}")

            # Obtenir le gestionnaire de documents
            doc_manager = st.session_state.get("doc_manager")
            if doc_manager is None:
                doc_manager = DocumentManager()
                st.session_state.doc_manager = doc_manager

            folder_summary = doc_manager.get_summary(folder)
            if folder_summary:
                query_to_use = f"Contexte dossier : {folder_summary}\n\n{search_query}"

        if not search_query.startswith("#"):
            results = search_service.search(query_to_use)
            st.table(results)

    # M√©triques principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_modules = len(st.session_state.module_manager.available_modules)
        st.metric("üì¶ Modules disponibles", total_modules, delta="+1" if total_modules > 8 else None)
    
    with col2:
        loaded_modules = len(st.session_state.module_manager.loaded_modules)
        st.metric("‚úÖ Modules charg√©s", loaded_modules)
    
    with col3:
        llm_status = "‚úÖ" if st.session_state.multi_llm_manager else "‚ùå"
        st.metric("ü§ñ Multi-LLM", llm_status)
    
    with col4:
        missing_count = len([m for m in MODULES_TO_CREATE if not (Path(__file__).parent / "modules" / f"{m}.py").exists()])
        st.metric("üìã √Ä cr√©er", missing_count, delta=f"-{15-missing_count}" if missing_count < 15 else None)
    
    st.markdown("---")
    
    # Afficher les modules non configur√©s s'il y en a
    show_modules_unconfigured()
    
    # Alerte si des modules manquent
    missing_modules = []
    for module_id in MODULES_TO_CREATE:
        module_path = Path(__file__).parent / "modules" / f"{module_id}.py"
        if not module_path.exists():
            missing_modules.append(module_id)
    
    if missing_modules:
        col1, col2 = st.columns([3, 1])
        with col1:
            st.warning(f"‚ö†Ô∏è {len(missing_modules)} modules suppl√©mentaires peuvent √™tre cr√©√©s pour √©tendre les fonctionnalit√©s")
        with col2:
            if st.button("üìã Voir les d√©tails", key="show_missing"):
                st.session_state.show_missing_details = not st.session_state.get('show_missing_details', False)
        
        if st.session_state.get('show_missing_details', False):
            with st.expander("Modules disponibles √† la cr√©ation", expanded=True):
                for module_id in missing_modules:
                    config = MODULES_TO_CREATE[module_id]
                    st.write(f"‚Ä¢ **{config['name']}** - {config['desc']}")
                
                if st.button("üîß Cr√©er tous les modules manquants", type="primary"):
                    create_missing_modules()
                    st.rerun()
    else:
        st.success("‚úÖ Tous les modules optionnels ont √©t√© cr√©√©s !")
    
    # Modules par cat√©gorie
    modules_by_cat = st.session_state.module_manager.get_modules_by_category()
    
    if not modules_by_cat:
        st.warning("‚ö†Ô∏è Aucun module trouv√©. V√©rifiez la structure du projet.")
        show_troubleshooting()
        return
    
    # Afficher les modules par cat√©gorie
    categories_display = {
        "analyse": ("üìä Analyse", "Modules d'analyse et extraction"),
        "strategie": ("‚öñÔ∏è Strat√©gie", "Modules de strat√©gie juridique"),
        "redaction": ("‚úçÔ∏è R√©daction", "Modules de g√©n√©ration de documents"),
        "gestion": ("üìÅ Gestion", "Modules de gestion des dossiers"),
        "specialise": ("üéØ Sp√©cialis√©", "Modules sp√©cialis√©s"),
        "communication": ("üí¨ Communication", "Modules de communication"),
        "technique": ("üîß Technique", "Modules techniques"),
        "autre": ("üì¶ Autres", "Modules divers")
    }
    
    for cat_key, (cat_title, cat_desc) in categories_display.items():
        if cat_key in modules_by_cat:
            st.markdown(f"### {cat_title}")
            st.caption(cat_desc)
            
            cols = st.columns(3)
            for idx, module in enumerate(modules_by_cat[cat_key]):
                with cols[idx % 3]:
                    # Carte de module
                    status_icon = "‚úÖ" if module["loaded"] else "‚ö†Ô∏è"
                    
                    with st.container():
                        st.markdown(f"""
                        <div class="module-card">
                            <h4>{status_icon} {module['name']}</h4>
                            <p style="color: #666; font-size: 0.9em;">{module['desc']}</p>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        if st.button(
                            "Ouvrir", 
                            key=f"open_{module['id']}", 
                            use_container_width=True
                        ):
                            st.session_state.current_view = module['id']
                            st.rerun()
            
            st.markdown("")

def show_sidebar():
    """Affiche la barre lat√©rale"""
    with st.sidebar:
        st.markdown("## ‚öñÔ∏è Navigation")
        st.markdown(f"üìå Dossier courant : @{st.session_state.selected_folder}")
        st.markdown(f"üìå Module courant : #{st.session_state.selected_module}")

        # Bouton Accueil
        if st.button("üè† Tableau de bord", use_container_width=True):
            st.session_state.current_view = 'dashboard'
            st.rerun()
        
        st.markdown("---")
        
        # Modules rapides (seulement ceux qui existent)
        st.markdown("### üöÄ Acc√®s rapide")
        quick_modules = ["recherche_analyse_unifiee", "import_export", "strategy", "redaction_unified", "email", "jurisprudence"]
        
        for module_id in quick_modules:
            if module_id in st.session_state.module_manager.available_modules:
                config = st.session_state.module_manager.available_modules[module_id]["config"]
                if st.button(config["name"], use_container_width=True, key=f"quick_{module_id}"):
                    st.session_state.current_view = module_id
                    st.rerun()
        
        st.markdown("---")
        
        # Statut syst√®me
        st.markdown("### üìä Statut syst√®me")
        
        # Modules existants
        available = len(st.session_state.module_manager.available_modules)
        total_possible = len(MODULES_CONFIG) + len(MODULES_TO_CREATE)
        missing = len([m for m in MODULES_TO_CREATE if not (Path(__file__).parent / "modules" / f"{m}.py").exists()])
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("üì¶ Existants", available)
        with col2:
            st.metric("üìã Optionnels", missing)
        
        # Barre de progression
        progress = available / total_possible
        st.progress(progress)
        st.caption(f"{available}/{total_possible} modules")
        
        # Statut des chargements
        status = st.session_state.module_manager.load_status
        if status["success"]:
            st.success(f"‚úÖ {len(status['success'])} charg√©s")
        if status["failed"]:
            st.error(f"‚ùå {len(status['failed'])} erreurs")

        # Afficher les erreurs de connexion Azure
        blob_error = None
        search_error = None
        if 'azure_blob_manager' in st.session_state:
            blob_error = st.session_state.azure_blob_manager.get_connection_error()
        if 'azure_search_manager' in st.session_state:
            search_error = st.session_state.azure_search_manager.get_connection_error()

        if blob_error:
            st.error(f"Azure Blob: {blob_error}")
        if search_error:
            st.error(f"Azure Search: {search_error}")
        
        # Boutons d'action
        st.markdown("---")
        
        if st.button("üîß Diagnostic", use_container_width=True):
            st.session_state.current_view = 'diagnostic'
            st.rerun()
        
        if missing > 0:
            if st.button("‚ûï Cr√©er modules optionnels", use_container_width=True, type="primary"):
                st.session_state.current_view = 'create_modules'
                st.rerun()

def show_diagnostic():
    """Affiche la page de diagnostic"""
    st.markdown("## üîß Diagnostic du syst√®me")
    
    # √âtat des modules
    st.markdown("### üì¶ √âtat des modules")
    
    manager = st.session_state.module_manager
    
    # Tableau r√©capitulatif
    data = []
    for name, info in manager.available_modules.items():
        status = "‚úÖ Charg√©" if info["loaded"] else "‚ö†Ô∏è Non charg√©"
        error = manager.load_status["failed"].get(name, "-")
        data.append({
            "Module": info["config"]["name"],
            "ID": name,
            "Cat√©gorie": info["config"]["category"],
            "√âtat": status,
            "Erreur": error
        })
    
    if data:
        st.dataframe(data, use_container_width=True, hide_index=True)
    
    # Afficher les avertissements
    if manager.load_status["warnings"]:
        st.warning("### ‚ö†Ô∏è Avertissements")
        for warning in manager.load_status["warnings"]:
            st.warning(warning)
    
    # Liste des fichiers Python dans le dossier modules
    st.markdown("### üìÅ Fichiers dans le dossier modules")
    if manager.modules_path.exists():
        py_files = sorted([f.stem for f in manager.modules_path.glob("*.py") if not f.name.startswith("_")])
        cols = st.columns(3)
        for i, file_name in enumerate(py_files):
            with cols[i % 3]:
                if file_name in manager.available_modules:
                    st.success(f"‚úÖ {file_name}")
                elif file_name in MODULES_CONFIG or file_name in MODULES_TO_CREATE:
                    st.info(f"üìã {file_name} (configur√©)")
                else:
                    st.warning(f"‚ùì {file_name} (non configur√©)")
    
    # Actions de r√©paration
    st.markdown("### üõ†Ô∏è Actions")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üîÑ Recharger tous les modules"):
            manager.discover_modules()
            st.rerun()
    
    with col2:
        if st.button("üìã Cr√©er modules manquants"):
            create_missing_modules()
    
    with col3:
        if st.button("üì• Exporter diagnostic"):
            export_diagnostic()



def show_troubleshooting():
    """Affiche l'aide au d√©pannage"""
    st.markdown("### üõ†Ô∏è D√©pannage")
    
    # V√©rifier les modules non configur√©s
    modules_path = Path(__file__).parent / "modules"
    if modules_path.exists():
        all_py_files = [f.stem for f in modules_path.glob("*.py") if not f.name.startswith("_")]
        configured_modules = set(MODULES_CONFIG.keys()) | set(MODULES_TO_CREATE.keys())
        unconfigured = set(all_py_files) - configured_modules
        
        if unconfigured:
            st.warning(f"‚ö†Ô∏è {len(unconfigured)} modules trouv√©s mais non configur√©s")
            with st.expander("Voir les modules non configur√©s"):
                for module in sorted(unconfigured):
                    st.write(f"‚Ä¢ {module}.py")
                st.info("Ces modules doivent √™tre ajout√©s √† MODULES_CONFIG pour √™tre utilisables")
    
    st.info("""
    **Aucun module trouv√© ?** Voici les √©tapes √† suivre :
    
    1. **V√©rifiez la structure** :
       ```
       votre_projet/
       ‚îú‚îÄ‚îÄ app.py
       ‚îú‚îÄ‚îÄ modules/
       ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
       ‚îÇ   ‚îú‚îÄ‚îÄ comparison.py
       ‚îÇ   ‚îú‚îÄ‚îÄ timeline.py
       ‚îÇ   ‚îî‚îÄ‚îÄ ...
       ‚îî‚îÄ‚îÄ managers/
           ‚îú‚îÄ‚îÄ __init__.py
           ‚îî‚îÄ‚îÄ multi_llm_manager.py
       ```
    
    2. **Cr√©ez le dossier modules** s'il n'existe pas
    
    3. **V√©rifiez que chaque module a une fonction run()** :
       ```python
       def run():
           st.write("Module fonctionne!")
       ```
    
    4. **Red√©marrez l'application**
    
    5. **Consultez le diagnostic** pour voir les erreurs d√©taill√©es
    """)

def show_modules_unconfigured():
    """Affiche les modules non configur√©s"""
    modules_path = Path(__file__).parent / "modules"
    if modules_path.exists():
        all_py_files = [f.stem for f in modules_path.glob("*.py") if not f.name.startswith("_")]
        configured_modules = set(MODULES_CONFIG.keys()) | set(MODULES_TO_CREATE.keys())
        unconfigured = set(all_py_files) - configured_modules
        
        if unconfigured:
            st.warning(f"### ‚ö†Ô∏è Modules non configur√©s ({len(unconfigured)})")
            st.info("Ces modules existent mais ne sont pas dans la configuration :")
            
            cols = st.columns(3)
            for i, module in enumerate(sorted(unconfigured)):
                with cols[i % 3]:
                    st.code(f"{module}.py")
            
            st.markdown("""
            **Pour les utiliser :**
            1. Ajoutez-les √† `MODULES_CONFIG` dans `app.py`
            2. Sp√©cifiez leur nom, description et cat√©gorie
            3. Red√©marrez l'application
            """)
            
            # Proposer un template de configuration
            if st.button("üìã G√©n√©rer template de configuration"):
                config_template = {}
                for module in sorted(unconfigured):
                    config_template[module] = {
                        "name": f"üìÑ {module.replace('_', ' ').title()}",
                        "desc": f"Module {module}",
                        "category": "autre",
                        "priority": 10
                    }
                st.code(json.dumps(config_template, indent=2))

def create_missing_modules():
    """Cr√©e les modules manquants avec un template de base"""
    modules_path = Path(__file__).parent / "modules"
    modules_path.mkdir(exist_ok=True)
    
    template = '''"""Module {name}"""
import streamlit as st

def run():
    """Point d'entr√©e du module"""
    st.title("{title}")
    st.info("Ce module est en cours de d√©veloppement")
    
    # Interface basique
    st.markdown("### üöß En construction")
    st.write("Les fonctionnalit√©s seront bient√¥t disponibles.")
'''
    
    created = []
    # Cr√©er les modules existants manquants
    for module_id, config in MODULES_CONFIG.items():
        module_path = modules_path / f"{module_id}.py"
        if not module_path.exists():
            content = template.format(
                name=module_id,
                title=config["name"]
            )
            module_path.write_text(content, encoding='utf-8')
            created.append(module_id)
    
    # Cr√©er les modules suppl√©mentaires
    for module_id, config in MODULES_TO_CREATE.items():
        module_path = modules_path / f"{module_id}.py"
        if not module_path.exists():
            content = template.format(
                name=module_id,
                title=config["name"]
            )
            module_path.write_text(content, encoding='utf-8')
            created.append(module_id)
    
    if created:
        st.success(f"‚úÖ {len(created)} modules cr√©√©s : {', '.join(created)}")
        st.info("Relancez l'application pour charger les nouveaux modules")
    else:
        st.info("Tous les modules existent d√©j√†")

def export_diagnostic():
    """Exporte le diagnostic complet"""
    diagnostic = {
        "timestamp": datetime.now().isoformat(),
        "modules": {},
        "system": {
            "python_version": sys.version,
            "streamlit_version": st.__version__,
            "working_directory": str(Path.cwd()),
            "modules_path": str(Path(__file__).parent / "modules")
        },
        "available_files": []
    }
    
    # √âtat des modules
    for name, info in st.session_state.module_manager.available_modules.items():
        diagnostic["modules"][name] = {
            "config": info["config"],
            "loaded": info["loaded"],
            "error": st.session_state.module_manager.load_status["failed"].get(name),
            "path": str(info["path"])
        }
    
    # Liste des fichiers dans le dossier modules
    modules_path = Path(__file__).parent / "modules"
    if modules_path.exists():
        diagnostic["available_files"] = [
            f.name for f in modules_path.glob("*.py") 
            if not f.name.startswith("_")
        ]
    
    # T√©l√©chargement
    st.download_button(
        "üíæ T√©l√©charger diagnostic.json",
        json.dumps(diagnostic, indent=2),
        "diagnostic.json",
        "application/json"
    )

# ========== FONCTION PRINCIPALE ==========
def main():
    """Point d'entr√©e principal"""
    init_session_state()
    
    # Sidebar
    show_sidebar()
    
    # Router vers la vue appropri√©e
    current_view = st.session_state.current_view
    
    if current_view == 'dashboard':
        show_dashboard()
    elif current_view == 'diagnostic':
        show_diagnostic()
    elif current_view == 'create_modules':
        st.markdown("## ‚ûï Cr√©ation des modules optionnels")
        st.info("""
        Les modules ci-dessous sont **optionnels** et peuvent √©tendre les fonctionnalit√©s de votre application.
        Vous pouvez les cr√©er maintenant ou plus tard selon vos besoins.
        """)
        
        # Afficher les modules optionnels par cat√©gorie
        missing_by_cat = {}
        for module_id, config in MODULES_TO_CREATE.items():
            module_path = Path(__file__).parent / "modules" / f"{module_id}.py"
            if not module_path.exists():
                cat = config.get('category', 'autre')
                if cat not in missing_by_cat:
                    missing_by_cat[cat] = []
                missing_by_cat[cat].append((module_id, config))
        
        if missing_by_cat:
            for cat, modules in missing_by_cat.items():
                st.markdown(f"### {cat.title()}")
                for module_id, config in modules:
                    col1, col2 = st.columns([3, 1])
                    with col1:
                        st.write(f"**{config['name']}** - {config['desc']}")
                    with col2:
                        if st.button("Cr√©er", key=f"create_{module_id}"):
                            create_single_module(module_id, config)
                            st.success(f"‚úÖ Module {module_id} cr√©√©")
            
            st.markdown("---")
            if st.button("üîß Cr√©er tous les modules", type="primary"):
                create_missing_modules()
                st.rerun()
        else:
            st.success("‚úÖ Tous les modules optionnels ont d√©j√† √©t√© cr√©√©s !")
        
        if st.button("‚Ü©Ô∏è Retour au tableau de bord"):
            st.session_state.current_view = 'dashboard'
            st.rerun()
    elif current_view in st.session_state.module_manager.available_modules:
        # Charger et ex√©cuter le module
        st.session_state.module_manager.run_module(current_view)
    else:
        show_dashboard()
    
    # Footer
    st.markdown("---")
    modules_count = len(st.session_state.module_manager.available_modules)
    st.markdown(
        f"""<p style='text-align: center; color: #666; font-size: 0.8rem;'>
        IA Juridique v2.0 - Droit P√©nal des Affaires ‚Ä¢ {modules_count} modules disponibles ‚Ä¢ Syst√®me modulaire optimis√©
        </p>""",
        unsafe_allow_html=True
    )

def create_single_module(module_id: str, config: dict):
    """Cr√©e un seul module"""
    modules_path = Path(__file__).parent / "modules"
    modules_path.mkdir(exist_ok=True)
    
    template = '''"""Module {name}"""
import streamlit as st

def run():
    """Point d'entr√©e du module"""
    st.title("{title}")
    st.info("Ce module est en cours de d√©veloppement")
    
    # Interface basique
    st.markdown("### üöß En construction")
    st.write("Les fonctionnalit√©s seront bient√¥t disponibles.")
'''
    
    module_path = modules_path / f"{module_id}.py"
    if not module_path.exists():
        content = template.format(
            name=module_id,
            title=config["name"]
        )
        module_path.write_text(content, encoding='utf-8')

if __name__ == "__main__":
    main()