# app.py
import streamlit as st

st.set_page_config(
    page_title="Assistant P√©nal des Affaires IA", 
    page_icon="‚öñÔ∏è", 
    layout="wide"
)

import sys
import os
import traceback

print("=== D√âMARRAGE APPLICATION ===")

from config.app_config import APP_CONFIG
from utils.helpers import initialize_session_state
from utils.styles import load_custom_css

def main():
    """Interface principale de l'application"""
    
    print("=== D√âBUT MAIN ===")
    
    initialize_session_state()
    load_custom_css()
    
    # FORCER l'initialisation Azure AU D√âBUT
    init_azure_managers()
    
    # FORCER LA PAGE RECHERCHE
    st.session_state.current_page = 'recherche'
    
    # Titre principal
    st.markdown("""
    <div style='text-align: center; padding: 2rem 0;'>
        <h1 style='color: #1a237e; font-size: 3rem;'>‚öñÔ∏è Assistant P√©nal des Affaires IA</h1>
        <p style='color: #666; font-size: 1.2rem;'>Intelligence artificielle au service du droit p√©nal √©conomique</p>
    </div>
    """, unsafe_allow_html=True)
    
    # SIDEBAR SIMPLIFI√âE (sans navigation)
    with st.sidebar:
        st.markdown("### üìä √âtat du syst√®me")
        
        # AFFICHAGE AZURE AVEC DIAGNOSTICS
        show_azure_status_detailed()
        
        # M√©triques
        st.markdown("---")
        nb_docs = len(st.session_state.get('azure_documents', {}))
        nb_pieces = len(st.session_state.get('pieces_selectionnees', {}))
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Documents", nb_docs)
        with col2:
            st.metric("Pi√®ces", nb_pieces)
        
        # Boutons utilitaires
        st.markdown("---")
        if st.button("üîÑ R√©initialiser Azure", key="reinit_azure"):
            reinit_azure()
        
        if st.button("‚öôÔ∏è Configuration", key="show_config"):
            st.session_state.show_config_modal = True
    
    # AFFICHER DIRECTEMENT LA PAGE RECHERCHE
    try:
        print("=== CHARGEMENT PAGE RECHERCHE ===")
        from modules.recherche import show_page
        show_page()
    except Exception as e:
        st.error(f"‚ùå Erreur chargement page recherche: {str(e)}")
        with st.expander("D√©tails de l'erreur"):
            st.code(traceback.format_exc())
    
    # Modal de configuration si demand√©
    if st.session_state.get('show_config_modal', False):
        show_configuration_modal()

def init_azure_managers():
    """Initialise les gestionnaires Azure avec logs d√©taill√©s"""
    
    print("=== INITIALISATION AZURE ===")
    
    # Azure Blob Manager
    if 'azure_blob_manager' not in st.session_state or st.session_state.azure_blob_manager is None:
        print("Initialisation Azure Blob Manager...")
        try:
            from managers.azure_blob_manager import AzureBlobManager
            
            print("Import AzureBlobManager r√©ussi")
            manager = AzureBlobManager()
            print(f"AzureBlobManager cr√©√©: {manager}")
            
            st.session_state.azure_blob_manager = manager
            
            if hasattr(manager, 'is_connected') and manager.is_connected():
                print("‚úÖ Azure Blob connect√© avec succ√®s")
                containers = manager.list_containers()
                print(f"Containers trouv√©s: {containers}")
            else:
                print("‚ùå Azure Blob non connect√©")
                if hasattr(manager, 'get_connection_error'):
                    error = manager.get_connection_error()
                    print(f"Erreur: {error}")
                    
        except Exception as e:
            print(f"‚ùå Erreur fatale Azure Blob: {e}")
            print(traceback.format_exc())
            st.session_state.azure_blob_manager = None
    else:
        print("Azure Blob Manager d√©j√† initialis√©")
    
    # Azure Search Manager  
    if 'azure_search_manager' not in st.session_state or st.session_state.azure_search_manager is None:
        print("Initialisation Azure Search Manager...")
        try:
            from managers.azure_search_manager import AzureSearchManager
            
            print("Import AzureSearchManager r√©ussi")
            manager = AzureSearchManager()
            print(f"AzureSearchManager cr√©√©: {manager}")
            
            st.session_state.azure_search_manager = manager
            
            if hasattr(manager, 'search_client') and manager.search_client:
                print("‚úÖ Azure Search connect√© avec succ√®s")
            else:
                print("‚ùå Azure Search non connect√©")
                if hasattr(manager, 'get_connection_error'):
                    error = manager.get_connection_error()
                    print(f"Erreur: {error}")
                    
        except Exception as e:
            print(f"‚ùå Erreur fatale Azure Search: {e}")
            print(traceback.format_exc())
            st.session_state.azure_search_manager = None
    else:
        print("Azure Search Manager d√©j√† initialis√©")

def reinit_azure():
    """Force la r√©initialisation d'Azure"""
    print("=== R√âINITIALISATION AZURE FORC√âE ===")
    
    # Supprimer les managers existants
    if 'azure_blob_manager' in st.session_state:
        del st.session_state.azure_blob_manager
    if 'azure_search_manager' in st.session_state:
        del st.session_state.azure_search_manager
    
    # R√©initialiser
    init_azure_managers()
    
    st.rerun()

def show_azure_status_detailed():
    """Affichage d√©taill√© du statut Azure avec diagnostics"""
    
    # Test des variables d'environnement
    conn_str = os.getenv('AZURE_STORAGE_CONNECTION_STRING')
    search_endpoint = os.getenv('AZURE_SEARCH_ENDPOINT')
    search_key = os.getenv('AZURE_SEARCH_KEY')
    
    # Azure Blob
    st.markdown("**Azure Blob Storage**")
    blob_manager = st.session_state.get('azure_blob_manager')
    
    if not conn_str:
        st.error("‚ùå Connection String manquante")
    elif not blob_manager:
        st.error("‚ùå Manager non initialis√©")
    elif hasattr(blob_manager, 'is_connected') and blob_manager.is_connected():
        st.success("‚úÖ Connect√©")
        containers = blob_manager.list_containers()
        if containers:
            st.caption(f"{len(containers)} containers")
        else:
            st.caption("0 containers")
    else:
        st.error("‚ùå Non connect√©")
        if hasattr(blob_manager, 'get_connection_error'):
            error = blob_manager.get_connection_error()
            st.caption(error[:40] + "..." if error and len(error) > 40 else error or "Erreur inconnue")
    
    # Azure Search
    st.markdown("**Azure Search**")
    search_manager = st.session_state.get('azure_search_manager')
    
    if not search_endpoint or not search_key:
        st.error("‚ùå Endpoint/Key manquant")
    elif not search_manager:
        st.error("‚ùå Manager non initialis√©")
    elif hasattr(search_manager, 'search_client') and search_manager.search_client:
        st.success("‚úÖ Connect√©")
        st.caption("Index: juridique-index")
    else:
        st.error("‚ùå Non connect√©")
        if hasattr(search_manager, 'get_connection_error'):
            error = search_manager.get_connection_error()
            st.caption(error[:40] + "..." if error and len(error) > 40 else error or "Erreur inconnue")

def show_configuration_modal():
    """Affiche la configuration dans un modal"""
    with st.container():
        st.markdown("---")
        st.header("‚öôÔ∏è Configuration")
        
        tabs = st.tabs(["üîë Variables", "üîß Azure", "üß™ Tests"])
        
        with tabs[0]:
            st.subheader("Variables d'environnement")
            
            vars_to_check = [
                ("AZURE_STORAGE_CONNECTION_STRING", "Azure Blob Storage"),
                ("AZURE_SEARCH_ENDPOINT", "Azure Search URL"),
                ("AZURE_SEARCH_KEY", "Azure Search Key"),
                ("ANTHROPIC_API_KEY", "Claude API"),
                ("OPENAI_API_KEY", "OpenAI API"),
                ("GOOGLE_API_KEY", "Google Gemini API")
            ]
            
            for var, desc in vars_to_check:
                col1, col2, col3 = st.columns([3, 1, 2])
                with col1:
                    st.text(desc)
                with col2:
                    if os.getenv(var):
                        st.success("‚úÖ")
                    else:
                        st.error("‚ùå")
                with col3:
                    if os.getenv(var):
                        value = os.getenv(var)
                        st.caption(f"{value[:20]}...")
        
        with tabs[1]:
            st.subheader("Diagnostics Azure d√©taill√©s")
            
            # Azure Blob
            with st.expander("üóÑÔ∏è Azure Blob Storage", expanded=True):
                blob_manager = st.session_state.get('azure_blob_manager')
                
                conn_str = os.getenv('AZURE_STORAGE_CONNECTION_STRING')
                st.write(f"**Connection String:** {'‚úÖ Pr√©sente' if conn_str else '‚ùå Manquante'}")
                
                if blob_manager:
                    st.write(f"**Manager:** ‚úÖ Initialis√©")
                    if hasattr(blob_manager, 'is_connected') and blob_manager.is_connected():
                        st.success("‚úÖ Connexion active")
                        containers = blob_manager.list_containers()
                        st.write(f"**Containers:** {len(containers)}")
                        for container in containers[:5]:
                            st.text(f"‚Ä¢ {container}")
                    else:
                        st.error("‚ùå Connexion √©chou√©e")
                        if hasattr(blob_manager, 'get_connection_error'):
                            error = blob_manager.get_connection_error()
                            st.error(f"**Erreur:** {error}")
                else:
                    st.error("‚ùå Manager non initialis√©")
            
            # Azure Search
            with st.expander("üîç Azure Search", expanded=True):
                search_manager = st.session_state.get('azure_search_manager')
                
                endpoint = os.getenv('AZURE_SEARCH_ENDPOINT')
                key = os.getenv('AZURE_SEARCH_KEY')
                st.write(f"**Endpoint:** {'‚úÖ Pr√©sent' if endpoint else '‚ùå Manquant'}")
                st.write(f"**Key:** {'‚úÖ Pr√©sente' if key else '‚ùå Manquante'}")
                
                if search_manager:
                    st.write(f"**Manager:** ‚úÖ Initialis√©")
                    if hasattr(search_manager, 'search_client') and search_manager.search_client:
                        st.success("‚úÖ Connexion active")
                        st.write(f"**Index:** {getattr(search_manager, 'index_name', 'juridique-index')}")
                    else:
                        st.error("‚ùå Connexion √©chou√©e")
                        if hasattr(search_manager, 'get_connection_error'):
                            error = search_manager.get_connection_error()
                            st.error(f"**Erreur:** {error}")
                else:
                    st.error("‚ùå Manager non initialis√©")
        
        with tabs[2]:
            st.subheader("Tests de connexion")
            
            if st.button("üß™ Tester Azure Blob", key="test_blob"):
                test_azure_blob()
                
            if st.button("üß™ Tester Azure Search", key="test_search"):
                test_azure_search()
                
            if st.button("üß™ Tester tout", key="test_all"):
                test_azure_blob()
                test_azure_search()
        
        if st.button("‚ùå Fermer", key="close_config"):
            st.session_state.show_config_modal = False
            st.rerun()

def test_azure_blob():
    """Test de connexion Azure Blob"""
    with st.spinner("Test Azure Blob..."):
        try:
            from managers.azure_blob_manager import AzureBlobManager
            test_manager = AzureBlobManager()
            
            if test_manager.is_connected():
                containers = test_manager.list_containers()
                st.success(f"‚úÖ Azure Blob OK - {len(containers)} containers")
            else:
                error = test_manager.get_connection_error()
                st.error(f"‚ùå Azure Blob KO: {error}")
        except Exception as e:
            st.error(f"‚ùå Erreur test Azure Blob: {e}")

def test_azure_search():
    """Test de connexion Azure Search"""
    with st.spinner("Test Azure Search..."):
        try:
            from managers.azure_search_manager import AzureSearchManager
            test_manager = AzureSearchManager()
            
            if test_manager.search_client:
                st.success("‚úÖ Azure Search OK")
            else:
                error = test_manager.get_connection_error()
                st.error(f"‚ùå Azure Search KO: {error}")
        except Exception as e:
            st.error(f"‚ùå Erreur test Azure Search: {e}")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        st.error("‚ùå ERREUR FATALE")
        st.code(str(e))
        st.code(traceback.format_exc())
        print("ERREUR FATALE:")
        print(traceback.format_exc())