"""Application IA Juridique - Droit P√©nal des Affaires - Version optimis√©e"""

import streamlit as st
import streamlit.components.v1 as components
import os
import sys
import time
import logging
import traceback
import importlib
import importlib.util
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any
import json

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuration de la page
st.set_page_config(
    page_title="IA Juridique - Droit P√©nal des Affaires",
    page_icon="‚öñÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√©
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: 700;
        background: linear-gradient(90deg, #1a237e 0%, #3949ab 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-align: center;
        padding: 1rem 0;
    }
    .module-card {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 1.5rem;
        margin: 0.5rem 0;
        border: 1px solid #e0e0e0;
        transition: all 0.3s ease;
    }
    .module-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    .status-ok { color: #4caf50; }
    .status-error { color: #f44336; }
    .status-warning { color: #ff9800; }
</style>
""", unsafe_allow_html=True)

# ========== CONFIGURATION DES MODULES ==========
MODULES_CONFIG = {
    # Modules d'analyse
    "search_unified": {
        "name": "üîç Recherche & Analyse unifi√©e",
        "desc": "Recherche intelligente multi-sources avec IA",
        "category": "analyse",
        "priority": 1
    },
    "comparison": {
        "name": "üìä Comparaison de documents",
        "desc": "Analyse comparative avec d√©tection des contradictions",
        "category": "analyse",
        "priority": 2
    },
    "timeline_juridique": {
        "name": "üìÖ Timeline juridique",
        "desc": "Chronologie des infractions et proc√©dures",
        "category": "analyse",
        "priority": 3
    },
    "extract_information": {
        "name": "üìë Extraction d'informations",
        "desc": "Extraction des √©l√©ments constitutifs",
        "category": "analyse",
        "priority": 4
    },
    "contradiction_analysis": {
        "name": "‚ö° Analyse des contradictions",
        "desc": "D√©tection automatique des incoh√©rences",
        "category": "analyse",
        "priority": 5
    },
    
    # Modules de strat√©gie
    "strategy": {
        "name": "‚öñÔ∏è Strat√©gie de d√©fense",
        "desc": "√âlaboration de strat√©gies p√©nales",
        "category": "strategie",
        "priority": 1
    },
    "plaidoirie": {
        "name": "üéØ Plaidoirie p√©nale",
        "desc": "Pr√©paration des plaidoiries",
        "category": "strategie",
        "priority": 2
    },
    "preparation_client": {
        "name": "üë§ Pr√©paration client",
        "desc": "Pr√©parer aux interrogatoires",
        "category": "strategie",
        "priority": 3
    },
    
    # Modules de r√©daction
    "redaction_unified": {
        "name": "‚úçÔ∏è R√©daction juridique",
        "desc": "G√©n√©ration de tous types de documents",
        "category": "redaction",
        "priority": 1
    },
    "conclusions": {
        "name": "üìù Conclusions p√©nales",
        "desc": "R√©daction de conclusions",
        "category": "redaction",
        "priority": 2
    },
    "courrier": {
        "name": "üìß Courriers juridiques",
        "desc": "Correspondances et notifications",
        "category": "redaction",
        "priority": 3
    },
    
    # Modules de gestion
    "import_export": {
        "name": "üìÅ Import/Export",
        "desc": "Gestion des documents et donn√©es",
        "category": "gestion",
        "priority": 1
    },
    "pieces_manager": {
        "name": "üìé Gestion des pi√®ces",
        "desc": "Organisation du dossier p√©nal",
        "category": "gestion",
        "priority": 2
    },
    "dossier_penal": {
        "name": "üìÇ Dossier p√©nal unifi√©",
        "desc": "Vue d'ensemble du dossier",
        "category": "gestion",
        "priority": 3
    }
}

# ========== GESTIONNAIRE DE MODULES ==========
class ModuleManager:
    """Gestionnaire centralis√© des modules"""
    
    def __init__(self):
        self.modules_path = Path(__file__).parent / "modules"
        self.managers_path = Path(__file__).parent / "managers"
        self.loaded_modules = {}
        self.available_modules = {}
        self.load_status = {"success": [], "failed": {}, "warnings": []}
        
    def discover_modules(self):
        """D√©couvre tous les modules disponibles"""
        # V√©rifier l'existence du dossier modules
        if not self.modules_path.exists():
            self.load_status["warnings"].append(f"Dossier modules non trouv√© : {self.modules_path}")
            return
            
        # Scanner les fichiers Python
        for module_file in self.modules_path.glob("*.py"):
            if module_file.name.startswith("_"):
                continue
                
            module_name = module_file.stem
            if module_name in MODULES_CONFIG:
                self.available_modules[module_name] = {
                    "path": module_file,
                    "config": MODULES_CONFIG[module_name],
                    "loaded": False
                }
    
    def load_module(self, module_name: str) -> bool:
        """Charge un module sp√©cifique"""
        if module_name in self.loaded_modules:
            return True
            
        if module_name not in self.available_modules:
            self.load_status["failed"][module_name] = "Module non trouv√© dans la configuration"
            return False
            
        module_info = self.available_modules[module_name]
        module_path = module_info["path"]
        
        try:
            # Import dynamique du module
            spec = importlib.util.spec_from_file_location(
                f"modules.{module_name}", 
                module_path
            )
            
            if spec and spec.loader:
                module = importlib.util.module_from_spec(spec)
                sys.modules[f"modules.{module_name}"] = module
                spec.loader.exec_module(module)
                
                # V√©rifier que le module a une fonction run()
                if hasattr(module, 'run'):
                    self.loaded_modules[module_name] = module
                    module_info["loaded"] = True
                    self.load_status["success"].append(module_name)
                    return True
                else:
                    self.load_status["failed"][module_name] = "Fonction run() non trouv√©e"
                    return False
            else:
                self.load_status["failed"][module_name] = "Impossible de cr√©er les specs"
                return False
                
        except Exception as e:
            self.load_status["failed"][module_name] = str(e)
            logger.error(f"Erreur chargement {module_name}: {traceback.format_exc()}")
            return False
    
    def run_module(self, module_name: str):
        """Ex√©cute un module"""
        if module_name not in self.loaded_modules:
            if not self.load_module(module_name):
                st.error(f"‚ùå Impossible de charger le module {module_name}")
                if module_name in self.load_status["failed"]:
                    st.error(f"Erreur : {self.load_status['failed'][module_name]}")
                return
        
        try:
            # Ex√©cuter le module
            self.loaded_modules[module_name].run()
        except Exception as e:
            st.error(f"‚ùå Erreur lors de l'ex√©cution du module {module_name}")
            st.error(str(e))
            logger.error(f"Erreur ex√©cution {module_name}: {traceback.format_exc()}")
    
    def get_modules_by_category(self) -> Dict[str, List[Dict]]:
        """Retourne les modules group√©s par cat√©gorie"""
        modules_by_cat = {}
        
        for name, info in self.available_modules.items():
            config = info["config"]
            category = config.get("category", "autre")
            
            if category not in modules_by_cat:
                modules_by_cat[category] = []
            
            modules_by_cat[category].append({
                "id": name,
                "name": config["name"],
                "desc": config["desc"],
                "loaded": info["loaded"],
                "priority": config.get("priority", 99)
            })
        
        # Trier par priorit√©
        for category in modules_by_cat:
            modules_by_cat[category].sort(key=lambda x: x["priority"])
        
        return modules_by_cat

# ========== GESTIONNAIRE MULTI-LLM ==========
def load_multi_llm_manager():
    """Charge le gestionnaire multi-LLM"""
    try:
        from managers.multi_llm_manager import MultiLLMManager
        return MultiLLMManager(), True
    except ImportError:
        logger.warning("MultiLLMManager non disponible")
        return None, False
    except Exception as e:
        logger.error(f"Erreur chargement MultiLLMManager: {e}")
        return None, False

# ========== INITIALISATION ==========
def init_session_state():
    """Initialise l'√©tat de session"""
    if 'initialized' not in st.session_state:
        st.session_state.initialized = True
        st.session_state.current_view = 'dashboard'
        st.session_state.module_manager = ModuleManager()
        st.session_state.multi_llm_manager = None
        st.session_state.azure_connected = False
        
        # D√©couvrir les modules
        st.session_state.module_manager.discover_modules()
        
        # Charger le gestionnaire LLM
        llm_manager, llm_success = load_multi_llm_manager()
        if llm_success:
            st.session_state.multi_llm_manager = llm_manager

# ========== INTERFACE PRINCIPALE ==========
def show_dashboard():
    """Affiche le tableau de bord principal"""
    st.markdown('<h1 class="main-header">‚öñÔ∏è IA Juridique - Droit P√©nal des Affaires</h1>', unsafe_allow_html=True)
    
    # M√©triques principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_modules = len(st.session_state.module_manager.available_modules)
        st.metric("üì¶ Modules disponibles", total_modules)
    
    with col2:
        loaded_modules = len(st.session_state.module_manager.loaded_modules)
        st.metric("‚úÖ Modules charg√©s", loaded_modules)
    
    with col3:
        llm_status = "‚úÖ" if st.session_state.multi_llm_manager else "‚ùå"
        st.metric("ü§ñ Multi-LLM", llm_status)
    
    with col4:
        azure_status = "‚úÖ" if st.session_state.azure_connected else "‚ùå"
        st.metric("‚òÅÔ∏è Azure", azure_status)
    
    st.markdown("---")
    
    # Modules par cat√©gorie
    modules_by_cat = st.session_state.module_manager.get_modules_by_category()
    
    if not modules_by_cat:
        st.warning("‚ö†Ô∏è Aucun module trouv√©. V√©rifiez la structure du projet.")
        show_troubleshooting()
        return
    
    # Afficher les modules par cat√©gorie
    categories_display = {
        "analyse": ("üìä Analyse", "Modules d'analyse et extraction"),
        "strategie": ("‚öñÔ∏è Strat√©gie", "Modules de strat√©gie juridique"),
        "redaction": ("‚úçÔ∏è R√©daction", "Modules de g√©n√©ration de documents"),
        "gestion": ("üìÅ Gestion", "Modules de gestion des dossiers")
    }
    
    for cat_key, (cat_title, cat_desc) in categories_display.items():
        if cat_key in modules_by_cat:
            st.markdown(f"### {cat_title}")
            st.caption(cat_desc)
            
            cols = st.columns(3)
            for idx, module in enumerate(modules_by_cat[cat_key]):
                with cols[idx % 3]:
                    # Carte de module
                    status_icon = "‚úÖ" if module["loaded"] else "‚ö†Ô∏è"
                    
                    with st.container():
                        st.markdown(f"""
                        <div class="module-card">
                            <h4>{status_icon} {module['name']}</h4>
                            <p style="color: #666; font-size: 0.9em;">{module['desc']}</p>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        if st.button(
                            "Ouvrir", 
                            key=f"open_{module['id']}", 
                            use_container_width=True
                        ):
                            st.session_state.current_view = module['id']
                            st.rerun()
            
            st.markdown("")

def show_sidebar():
    """Affiche la barre lat√©rale"""
    with st.sidebar:
        st.markdown("## ‚öñÔ∏è Navigation")
        
        # Bouton Accueil
        if st.button("üè† Tableau de bord", use_container_width=True):
            st.session_state.current_view = 'dashboard'
            st.rerun()
        
        st.markdown("---")
        
        # Modules rapides
        st.markdown("### üöÄ Acc√®s rapide")
        quick_modules = ["search_unified", "import_export", "strategy", "redaction_unified"]
        
        for module_id in quick_modules:
            if module_id in st.session_state.module_manager.available_modules:
                config = st.session_state.module_manager.available_modules[module_id]["config"]
                if st.button(config["name"], use_container_width=True, key=f"quick_{module_id}"):
                    st.session_state.current_view = module_id
                    st.rerun()
        
        st.markdown("---")
        
        # Statut syst√®me
        st.markdown("### üìä Statut syst√®me")
        
        # Statut des modules
        status = st.session_state.module_manager.load_status
        if status["success"]:
            st.success(f"‚úÖ {len(status['success'])} modules OK")
        if status["failed"]:
            st.error(f"‚ùå {len(status['failed'])} erreurs")
        if status["warnings"]:
            st.warning(f"‚ö†Ô∏è {len(status['warnings'])} avertissements")
        
        # Bouton diagnostic
        if st.button("üîß Diagnostic", use_container_width=True):
            st.session_state.current_view = 'diagnostic'
            st.rerun()

def show_diagnostic():
    """Affiche la page de diagnostic"""
    st.markdown("## üîß Diagnostic du syst√®me")
    
    # √âtat des modules
    st.markdown("### üì¶ √âtat des modules")
    
    manager = st.session_state.module_manager
    
    # Tableau r√©capitulatif
    data = []
    for name, info in manager.available_modules.items():
        status = "‚úÖ Charg√©" if info["loaded"] else "‚ö†Ô∏è Non charg√©"
        error = manager.load_status["failed"].get(name, "-")
        data.append({
            "Module": info["config"]["name"],
            "ID": name,
            "Cat√©gorie": info["config"]["category"],
            "√âtat": status,
            "Erreur": error
        })
    
    if data:
        st.dataframe(data, use_container_width=True, hide_index=True)
    
    # Actions de r√©paration
    st.markdown("### üõ†Ô∏è Actions")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üîÑ Recharger tous les modules"):
            manager.discover_modules()
            st.rerun()
    
    with col2:
        if st.button("üìã Cr√©er modules manquants"):
            create_missing_modules()
    
    with col3:
        if st.button("üì• Exporter diagnostic"):
            export_diagnostic()

def show_troubleshooting():
    """Affiche l'aide au d√©pannage"""
    st.markdown("### üõ†Ô∏è D√©pannage")
    
    st.info("""
    **Aucun module trouv√© ?** Voici les √©tapes √† suivre :
    
    1. **V√©rifiez la structure** :
       ```
       votre_projet/
       ‚îú‚îÄ‚îÄ app.py
       ‚îú‚îÄ‚îÄ modules/
       ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
       ‚îÇ   ‚îú‚îÄ‚îÄ search_unified.py
       ‚îÇ   ‚îî‚îÄ‚îÄ ...
       ‚îî‚îÄ‚îÄ managers/
           ‚îú‚îÄ‚îÄ __init__.py
           ‚îî‚îÄ‚îÄ multi_llm_manager.py
       ```
    
    2. **Cr√©ez le dossier modules** s'il n'existe pas
    
    3. **Ajoutez un module test** :
       Cr√©ez `modules/test.py` avec :
       ```python
       import streamlit as st
       
       def run():
           st.write("Module test fonctionne!")
       ```
    
    4. **Red√©marrez l'application**
    """)

def create_missing_modules():
    """Cr√©e les modules manquants avec un template de base"""
    modules_path = Path(__file__).parent / "modules"
    modules_path.mkdir(exist_ok=True)
    
    template = '''"""Module {name}"""
import streamlit as st

def run():
    """Point d'entr√©e du module"""
    st.title("{title}")
    st.info("Ce module est en cours de d√©veloppement")
    
    # Interface basique
    st.markdown("### üöß En construction")
    st.write("Les fonctionnalit√©s seront bient√¥t disponibles.")
'''
    
    created = []
    for module_id, config in MODULES_CONFIG.items():
        module_path = modules_path / f"{module_id}.py"
        if not module_path.exists():
            content = template.format(
                name=module_id,
                title=config["name"]
            )
            module_path.write_text(content, encoding='utf-8')
            created.append(module_id)
    
    if created:
        st.success(f"‚úÖ {len(created)} modules cr√©√©s : {', '.join(created)}")
    else:
        st.info("Tous les modules existent d√©j√†")

def export_diagnostic():
    """Exporte le diagnostic complet"""
    diagnostic = {
        "timestamp": datetime.now().isoformat(),
        "modules": {},
        "system": {
            "python_version": sys.version,
            "streamlit_version": st.__version__,
            "working_directory": str(Path.cwd())
        }
    }
    
    # √âtat des modules
    for name, info in st.session_state.module_manager.available_modules.items():
        diagnostic["modules"][name] = {
            "config": info["config"],
            "loaded": info["loaded"],
            "error": st.session_state.module_manager.load_status["failed"].get(name)
        }
    
    # T√©l√©chargement
    st.download_button(
        "üíæ T√©l√©charger diagnostic.json",
        json.dumps(diagnostic, indent=2),
        "diagnostic.json",
        "application/json"
    )

# ========== FONCTION PRINCIPALE ==========
def main():
    """Point d'entr√©e principal"""
    init_session_state()
    
    # Sidebar
    show_sidebar()
    
    # Router vers la vue appropri√©e
    current_view = st.session_state.current_view
    
    if current_view == 'dashboard':
        show_dashboard()
    elif current_view == 'diagnostic':
        show_diagnostic()
    elif current_view in st.session_state.module_manager.available_modules:
        # Charger et ex√©cuter le module
        st.session_state.module_manager.run_module(current_view)
    else:
        show_dashboard()
    
    # Footer
    st.markdown("---")
    st.markdown(
        """<p style='text-align: center; color: #666; font-size: 0.8rem;'>
        IA Juridique v2.0 - Droit P√©nal des Affaires ‚Ä¢ Syst√®me modulaire optimis√©
        </p>""",
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main()