import streamlit as st

# Configuration de la page EN PREMIER
st.set_page_config(
    page_title="Assistant P√©nal des Affaires IA", 
    page_icon="‚öñÔ∏è", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# Titre principal IMM√âDIATEMENT apr√®s
st.title("IA Juridique")

# ENSUITE seulement, les autres imports
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

import os
import io
from typing import Dict, List, Set, Tuple, Optional, Any
import json
from datetime import datetime, timedelta
# ... reste des imports
st.title("IA Juridique")

# Assistant P√©nal des Affaires IA - Version Compl√®te
# Int√©grant Multi-LLM, Multi-Victimes et Adaptation IA

# ================== IMPORTS ET CONFIGURATION ==================

# Charger les variables d'environnement
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

# V√©rifier la disponibilit√© d'Azure
try:
    from azure.search.documents import SearchClient
    from azure.search.documents.indexes import SearchIndexClient
    from azure.core.credentials import AzureKeyCredential
    from azure.storage.blob import BlobServiceClient
    AZURE_AVAILABLE = True
    print("üü¢ AZURE DISPONIBLE")
except ImportError:
    AZURE_AVAILABLE = False
  
import re
import pandas as pd
import base64
import hashlib
from dataclasses import dataclass, field
from enum import Enum
import logging
from functools import lru_cache, wraps
import asyncio
from concurrent.futures import ThreadPoolExecutor
import difflib
import plotly.graph_objects as go
import plotly.express as px

# Configuration Streamlit
st.set_page_config(
    page_title="Assistant P√©nal des Affaires IA", 
    page_icon="üíº", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Imports conditionnels pour les IA
try:
    from openai import OpenAI
    from azure.ai.openai import AzureOpenAI
except ImportError:
    OpenAI = None
    AzureOpenAI = None

try:
    import anthropic
except ImportError:
    anthropic = None

try:
    import google.generativeai as genai
except ImportError:
    genai = None

try:
    import requests
except ImportError:
    requests = None

try:
    from docx import Document as DocxDocument
    from docx.shared import Pt, Inches, RGBColor
    from docx.enum.text import WD_ALIGN_PARAGRAPH
    DOCX_AVAILABLE = True
except ImportError:
    DOCX_AVAILABLE = False

# ================== CONFIGURATION CENTRALIS√âE ==================

class AppConfig:
    """Configuration centralis√©e de l'application"""
    
    # UI
    PAGE_SIZE = 10
    MAX_FILE_SIZE = 10 * 1024 * 1024
    
    # Prescription
    PRESCRIPTION_CONTRAVENTION = 1  # an
    PRESCRIPTION_DELIT = 6  # ans
    PRESCRIPTION_CRIME = 20  # ans
    
    # D√©lais sp√©cifiques p√©nal des affaires
    PRESCRIPTION_FRAUDE_FISCALE = 6  # ans (sauf dissimulation)
    PRESCRIPTION_TRAVAIL_DISSIMULE = 6  # ans
    
    # Export
    EXPORT_FORMAT = "%Y%m%d_%H%M%S"
    
    # Formats de citation
    CITATION_FORMATS = {
        'jurisprudence': "{juridiction}, {date}, n¬∞ {numero}",
        'article_code': "Art. {numero} {code}",
        'doctrine': "{auteur}, ¬´ {titre} ¬ª, {revue} {annee}, n¬∞ {numero}, p. {page}",
        'circulaire': "Circ. {reference} du {date}",
        'reponse_ministerielle': "R√©p. min. n¬∞ {numero}, {date}"
    }

# ================== INITIALISATION SESSION STATE ==================

def initialize_session_state():
    """Initialise toutes les variables de session"""
    if 'initialized' not in st.session_state:
        st.session_state.initialized = True
        st.session_state.dossier_actif = None
        st.session_state.dossiers = {}
        st.session_state.current_page = 1
        st.session_state.search_query = ""
        st.session_state.docs_for_analysis = []
        st.session_state.document_content = ""
        st.session_state.custom_templates = {}
        st.session_state.letterhead = None
        st.session_state.citation_manager = None
        st.session_state.victimes_adapter = []
        st.session_state.plainte_originale = None
        st.session_state.plaintes_adaptees = {}

# ================== ENUMERATIONS ==================

class InfractionAffaires(Enum):
    """Types d'infractions en droit p√©nal des affaires"""
    ABS = "Abus de biens sociaux"
    ABUS_CONFIANCE = "Abus de confiance"
    CORRUPTION = "Corruption"
    TRAFIC_INFLUENCE = "Trafic d'influence"
    PRISE_ILLEGALE = "Prise ill√©gale d'int√©r√™ts"
    FAVORITISME = "Favoritisme"
    BLANCHIMENT = "Blanchiment"
    FRAUDE_FISCALE = "Fraude fiscale"
    ESCROQUERIE = "Escroquerie"
    FAUX_USAGE_FAUX = "Faux et usage de faux"
    BANQUEROUTE = "Banqueroute"
    DELIT_INITIE = "D√©lit d'initi√©"
    MANIPULATION_COURS = "Manipulation de cours"
    ENTRAVE = "Entrave"
    TRAVAIL_DISSIMULE = "Travail dissimul√©"
    HARCELEMENT = "Harc√®lement moral/sexuel"
    MISE_DANGER = "Mise en danger d'autrui"
    BLESSURES_INVOLONTAIRES = "Blessures involontaires"
    POLLUTION = "Atteinte √† l'environnement"

class ProcedureAffaires(Enum):
    """Types de proc√©dures adapt√©es au p√©nal des affaires"""
    AUDITION_LIBRE = "Audition libre"
    ENQUETE_PRELIMINAIRE = "Enqu√™te pr√©liminaire"
    INSTRUCTION = "Information judiciaire"
    CITATION_DIRECTE = "Citation directe"
    CRPC = "CRPC"
    CJIP = "Convention judiciaire d'int√©r√™t public"

class SearchMode(Enum):
    """Modes de recherche disponibles"""
    HYBRID = "Recherche hybride (textuelle + s√©mantique)"
    TEXT_ONLY = "Recherche textuelle uniquement"
    VECTOR_ONLY = "Recherche vectorielle uniquement"
    LOCAL = "Recherche locale uniquement"

class LLMProvider(Enum):
    """Providers LLM disponibles"""
    AZURE_OPENAI = "Azure OpenAI (GPT-4)"
    CLAUDE_OPUS = "Claude Opus 4"
    CHATGPT_4O = "ChatGPT 4o"
    GEMINI = "Google Gemini"
    PERPLEXITY = "Perplexity AI"

# ================== DATACLASSES ==================

@dataclass
class Document:
    """Repr√©sente un document juridique"""
    id: str
    title: str
    content: str
    source: str = 'local'
    page_number: int = 1
    metadata: Dict[str, Any] = field(default_factory=dict)
    created_at: datetime = field(default_factory=datetime.now)
    folder_path: Optional[str] = None

@dataclass
class DossierAffaires:
    """Dossier p√©nal des affaires"""
    numero_parquet: str
    numero_instruction: Optional[str]
    
    # Client (personne physique ou morale)
    client_nom: str
    client_type: str  # "PP" ou "PM"
    client_info: Dict[str, Any]  # SIREN, forme juridique, CA, etc.
    
    # Proc√©dure
    qualification_faits: List[str]
    date_faits: datetime
    procedure_type: ProcedureAffaires
    magistrat: Optional[str]
    
    # √âl√©ments sp√©cifiques affaires
    montant_prejudice: Optional[float] = None
    delegation_pouvoirs: Optional[Dict[str, Any]] = None
    programme_conformite: Optional[Dict[str, Any]] = None
    
    # Proc√©dure
    auditions: List[Dict[str, Any]] = field(default_factory=list)
    perquisitions: List[Dict[str, Any]] = field(default_factory=list)
    expertises: List[Dict[str, Any]] = field(default_factory=list)
    audiences: List[Dict[str, Any]] = field(default_factory=list)
    decisions: List[Dict[str, Any]] = field(default_factory=list)
    
    # Multi-victimes
    victimes: List['VictimeInfo'] = field(default_factory=list)
    
    def calculer_prescription(self) -> Dict[str, Any]:
        """Calcule la prescription adapt√©e au p√©nal des affaires"""
        delais = {
            "contravention": AppConfig.PRESCRIPTION_CONTRAVENTION,
            "delit": AppConfig.PRESCRIPTION_DELIT,
            "crime": AppConfig.PRESCRIPTION_CRIME
        }
        
        # Cas sp√©ciaux p√©nal des affaires
        if "Fraude fiscale" in self.qualification_faits:
            delai_prescription = AppConfig.PRESCRIPTION_FRAUDE_FISCALE
            nature = "delit_fiscal"
        elif "Travail dissimul√©" in self.qualification_faits:
            delai_prescription = AppConfig.PRESCRIPTION_TRAVAIL_DISSIMULE
            nature = "delit_social"
        else:
            nature = "delit"  # La plupart des infractions affaires sont des d√©lits
            delai_prescription = delais[nature]
        
        date_prescription = self.date_faits + timedelta(days=365 * delai_prescription)
        
        return {
            "nature_infraction": nature,
            "delai_annees": delai_prescription,
            "date_prescription": date_prescription,
            "prescrit": datetime.now() > date_prescription,
            "jours_restants": (date_prescription - datetime.now()).days
        }

@dataclass
class VictimeInfo:
    """Information sur une victime/plaignant"""
    nom: str
    prenom: str
    prejudice_subi: str
    montant_prejudice: float
    elements_specifiques: List[str]
    documents_support: List[str]  # R√©f√©rences aux documents

@dataclass
class DelegationPouvoir:
    """Repr√©sente une d√©l√©gation de pouvoirs"""
    delegant: str
    delegataire: str
    date_delegation: datetime
    domaines: List[str]
    competence: bool = False
    autorite: bool = False
    moyens: bool = False
    subdelegation_autorisee: bool = False
    document_reference: Optional[str] = None
    
    def est_valide(self) -> bool:
        """V√©rifie si la d√©l√©gation remplit les conditions"""
        return all([self.competence, self.autorite, self.moyens])

@dataclass
class PieceVersee:
    """Pi√®ce vers√©e aux d√©bats"""
    numero: int
    titre: str
    contenu: str
    type: str
    date_ajout: datetime = field(default_factory=datetime.now)
    cote_dossier: Optional[str] = None
    dossier_id: Optional[str] = None
    citation_complete: Optional[str] = None

# ================== CSS PERSONNALIS√â ==================

st.markdown("""
<style>
    :root {
        --primary-color: #1a237e;
        --secondary-color: #283593;
        --success-color: #2e7d32;
        --warning-color: #f57c00;
        --error-color: #c62828;
    }
    
    .main { 
        background-color: #f5f5f5; 
    }
    
    .stButton > button {
        background-color: var(--primary-color);
        color: white;
        border-radius: 5px;
        border: none;
        padding: 0.5rem 1rem;
        font-weight: 600;
        transition: all 0.3s ease;
    }
    
    .stButton > button:hover {
        background-color: var(--secondary-color);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(26, 35, 126, 0.3);
    }
    
    .dossier-card {
        background: white;
        border-radius: 10px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        border-left: 5px solid var(--primary-color);
    }
    
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        text-align: center;
    }
    
    .procedure-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.875rem;
        font-weight: 500;
        margin: 0.25rem;
    }
    
    .badge-instruction { 
        background-color: #3f51b5; 
        color: white; 
    }
    
    .badge-crpc { 
        background-color: #009688; 
        color: white; 
    }
    
    .badge-cjip { 
        background-color: #4caf50; 
        color: white; 
    }
    
    .piece-versee {
        background: #f8f9fa;
        border-left: 3px solid var(--success-color);
        padding: 1rem;
        margin: 0.5rem 0;
        border-radius: 0 8px 8px 0;
    }
    
    .llm-response {
        background: white;
        border-radius: 8px;
        padding: 1.5rem;
        margin: 1rem 0;
        border-left: 4px solid var(--primary-color);
    }
</style>
""", unsafe_allow_html=True)

# ================== CONFIGURATION LLM ==================

class LLMConfig:
    """Configuration des LLMs"""
    
    @staticmethod
    def get_configs() -> Dict[LLMProvider, Dict[str, Any]]:
        return {
            LLMProvider.AZURE_OPENAI: {
                'endpoint': os.getenv('AZURE_OPENAI_ENDPOINT'),
                'key': os.getenv('AZURE_OPENAI_KEY'),
                'deployment': os.getenv('AZURE_OPENAI_DEPLOYMENT', 'gpt-4'),
                'api_version': '2024-02-01'
            },
            LLMProvider.CLAUDE_OPUS: {
                'api_key': os.getenv('ANTHROPIC_API_KEY'),
                'model': 'claude-3-opus-20240229'
            },
            LLMProvider.CHATGPT_4O: {
                'api_key': os.getenv('OPENAI_API_KEY'),
                'model': 'gpt-4-turbo-preview'
            },
            LLMProvider.GEMINI: {
                'api_key': os.getenv('GOOGLE_API_KEY'),
                'model': 'gemini-pro'
            },
            LLMProvider.PERPLEXITY: {
                'api_key': os.getenv('PERPLEXITY_API_KEY'),
                'model': 'pplx-70b-online'
            }
        }

# ================== GESTIONNAIRE MULTI-LLM ==================

class MultiLLMManager:
    """Gestionnaire pour interroger plusieurs LLMs"""
    
    def __init__(self):
        self.configs = LLMConfig.get_configs()
        self.clients = self._initialize_clients()
        self.executor = ThreadPoolExecutor(max_workers=5)
    
    def _initialize_clients(self) -> Dict[LLMProvider, Any]:
        """Initialise les clients LLM"""
        clients = {}
        
        # Azure OpenAI
        if self.configs[LLMProvider.AZURE_OPENAI]['key']:
            try:
                from azure.ai.openai import AzureOpenAI
                clients[LLMProvider.AZURE_OPENAI] = AzureOpenAI(
                    azure_endpoint=self.configs[LLMProvider.AZURE_OPENAI]['endpoint'],
                    api_key=self.configs[LLMProvider.AZURE_OPENAI]['key'],
                    api_version=self.configs[LLMProvider.AZURE_OPENAI]['api_version']
                )
            except Exception as e:
                logger.warning(f"Azure OpenAI non disponible: {e}")
        
        # Claude
        if self.configs[LLMProvider.CLAUDE_OPUS]['api_key']:
            try:
                import anthropic
                clients[LLMProvider.CLAUDE_OPUS] = anthropic.Anthropic(
                    api_key=self.configs[LLMProvider.CLAUDE_OPUS]['api_key']
                )
            except Exception as e:
                logger.warning(f"Claude non disponible: {e}")
        
        # ChatGPT
        if self.configs[LLMProvider.CHATGPT_4O]['api_key']:
            try:
                from openai import OpenAI
                clients[LLMProvider.CHATGPT_4O] = OpenAI(
                    api_key=self.configs[LLMProvider.CHATGPT_4O]['api_key']
                )
            except Exception as e:
                logger.warning(f"ChatGPT non disponible: {e}")
        
        # Gemini
        if self.configs[LLMProvider.GEMINI]['api_key']:
            try:
                import google.generativeai as genai
                genai.configure(api_key=self.configs[LLMProvider.GEMINI]['api_key'])
                clients[LLMProvider.GEMINI] = genai.GenerativeModel(
                    self.configs[LLMProvider.GEMINI]['model']
                )
            except Exception as e:
                logger.warning(f"Gemini non disponible: {e}")
        
        # Perplexity
        if self.configs[LLMProvider.PERPLEXITY]['api_key']:
            try:
                from openai import OpenAI
                clients[LLMProvider.PERPLEXITY] = OpenAI(
                    api_key=self.configs[LLMProvider.PERPLEXITY]['api_key'],
                    base_url="https://api.perplexity.ai"
                )
            except Exception as e:
                logger.warning(f"Perplexity non disponible: {e}")
        
        return clients
    
    async def query_single_llm(self, 
                              provider: LLMProvider, 
                              prompt: str,
                              system_prompt: str = None) -> Dict[str, Any]:
        """Interroge un seul LLM"""
        
        if provider not in self.clients:
            return {
                'provider': provider.value,
                'success': False,
                'error': 'Provider non configur√©',
                'response': None
            }
        
        try:
            client = self.clients[provider]
            
            # Azure OpenAI
            if provider == LLMProvider.AZURE_OPENAI:
                messages = []
                if system_prompt:
                    messages.append({"role": "system", "content": system_prompt})
                messages.append({"role": "user", "content": prompt})
                
                response = client.chat.completions.create(
                    model=self.configs[provider]['deployment'],
                    messages=messages,
                    temperature=0.7,
                    max_tokens=4000
                )
                
                return {
                    'provider': provider.value,
                    'success': True,
                    'response': response.choices[0].message.content,
                    'usage': response.usage.dict() if response.usage else None
                }
            
            # Claude
            elif provider == LLMProvider.CLAUDE_OPUS:
                messages = []
                messages.append({"role": "user", "content": prompt})
                
                response = client.messages.create(
                    model=self.configs[provider]['model'],
                    messages=messages,
                    system=system_prompt if system_prompt else "Tu es un assistant juridique expert en droit p√©nal des affaires.",
                    max_tokens=4000
                )
                
                return {
                    'provider': provider.value,
                    'success': True,
                    'response': response.content[0].text,
                    'usage': {'total_tokens': response.usage.input_tokens + response.usage.output_tokens}
                }
            
            # ChatGPT 4o
            elif provider == LLMProvider.CHATGPT_4O:
                messages = []
                if system_prompt:
                    messages.append({"role": "system", "content": system_prompt})
                messages.append({"role": "user", "content": prompt})
                
                response = client.chat.completions.create(
                    model=self.configs[provider]['model'],
                    messages=messages,
                    temperature=0.7,
                    max_tokens=4000
                )
                
                return {
                    'provider': provider.value,
                    'success': True,
                    'response': response.choices[0].message.content,
                    'usage': response.usage.dict() if response.usage else None
                }
            
            # Gemini
            elif provider == LLMProvider.GEMINI:
                full_prompt = f"{system_prompt}\n\n{prompt}" if system_prompt else prompt
                response = client.generate_content(full_prompt)
                
                return {
                    'provider': provider.value,
                    'success': True,
                    'response': response.text,
                    'usage': None
                }
            
            # Perplexity
            elif provider == LLMProvider.PERPLEXITY:
                messages = []
                if system_prompt:
                    messages.append({"role": "system", "content": system_prompt})
                messages.append({"role": "user", "content": prompt})
                
                response = client.chat.completions.create(
                    model=self.configs[provider]['model'],
                    messages=messages,
                    temperature=0.7,
                    max_tokens=4000
                )
                
                return {
                    'provider': provider.value,
                    'success': True,
                    'response': response.choices[0].message.content,
                    'usage': response.usage.dict() if response.usage else None,
                    'citations': getattr(response, 'citations', [])  # Perplexity inclut des citations
                }
            
        except Exception as e:
            logger.error(f"Erreur {provider.value}: {str(e)}")
            return {
                'provider': provider.value,
                'success': False,
                'error': str(e),
                'response': None
            }
    
    async def query_multiple_llms(self,
                                 providers: List[LLMProvider],
                                 prompt: str,
                                 system_prompt: str = None) -> List[Dict[str, Any]]:
        """Interroge plusieurs LLMs en parall√®le"""
        
        tasks = [
            self.query_single_llm(provider, prompt, system_prompt)
            for provider in providers
        ]
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # G√©rer les exceptions
        final_results = []
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                final_results.append({
                    'provider': providers[i].value,
                    'success': False,
                    'error': str(result),
                    'response': None
                })
            else:
                final_results.append(result)
        
        return final_results
    
    def fusion_responses(self, 
                        responses: List[Dict[str, Any]],
                        fusion_llm: LLMProvider = LLMProvider.AZURE_OPENAI) -> str:
        """Fusionne plusieurs r√©ponses en utilisant un LLM"""
        
        # Filtrer les r√©ponses r√©ussies
        valid_responses = [
            r for r in responses 
            if r['success'] and r['response']
        ]
        
        if not valid_responses:
            return "Aucune r√©ponse valide √† fusionner."
        
        if len(valid_responses) == 1:
            return valid_responses[0]['response']
        
        # Construire le prompt de fusion
        fusion_prompt = """Tu es un expert juridique en droit p√©nal des affaires.
Voici plusieurs analyses juridiques provenant de diff√©rentes IA sur la m√™me question :
"""
        
        for i, resp in enumerate(valid_responses, 1):
            fusion_prompt += f"=== Analyse {i} ({resp['provider']}) ===\n"
            fusion_prompt += f"{resp['response']}\n\n"
        
        fusion_prompt += """
=== INSTRUCTIONS DE FUSION ===
Fusionne ces analyses en :
1. Conservant TOUS les arguments juridiques uniques de chaque r√©ponse
2. Gardant TOUTES les r√©f√©rences l√©gales (articles, jurisprudence)
3. Structurant de mani√®re claire et hi√©rarchis√©e
4. √âliminant les redondances tout en pr√©servant les nuances
5. Signalant les points de divergence s'il y en a
6. Enrichissant avec les d√©tails compl√©mentaires de chaque analyse
Produis une synth√®se compl√®te et d√©taill√©e qui combine le meilleur de chaque analyse.
"""
        
        # Utiliser le LLM de fusion
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        fusion_result = loop.run_until_complete(
            self.query_single_llm(
                fusion_llm,
                fusion_prompt,
                "Tu es un expert en synth√®se juridique."
            )
        )
        
        if fusion_result['success']:
            return fusion_result['response']
        else:
            # Fallback : concatenation simple
            return self._simple_fusion(valid_responses)
    
    def _simple_fusion(self, responses: List[Dict[str, Any]]) -> str:
        """Fusion simple sans LLM"""
        
        fusion = "SYNTH√àSE DES ANALYSES\n" + "="*50 + "\n\n"
        
        for resp in responses:
            fusion += f"### Analyse {resp['provider']}\n"
            fusion += f"{resp['response']}\n\n"
            fusion += "-"*30 + "\n\n"
        
        return fusion

# ================== GESTIONNAIRE MULTI-VICTIMES ==================

class GestionnaireMultiVictimes:
    """G√®re plusieurs victimes dans une m√™me affaire"""
    
    def __init__(self):
        self.victimes: Dict[str, VictimeInfo] = {}
        self.affaire_commune: Dict[str, Any] = {}
    
    def ajouter_victime(self, victime: VictimeInfo) -> str:
        """Ajoute une victime √† l'affaire"""
        victime_id = f"{victime.nom}_{victime.prenom}"
        self.victimes[victime_id] = victime
        return victime_id
    
    def extraire_prejudices(self, doc_content: str, victime_id: str) -> Dict[str, Any]:
        """Extrait les √©l√©ments de pr√©judice sp√©cifiques d'un document"""
        victime = self.victimes.get(victime_id)
        if not victime:
            return {}
        
        # Extraction des √©l√©ments pertinents
        prejudice_elements = {
            'montant': victime.montant_prejudice,
            'nature': victime.prejudice_subi,
            'elements_specifiques': victime.elements_specifiques,
            'preuves': victime.documents_support
        }
        
        return prejudice_elements

# ================== ADAPTATEUR PLAINTE IA ==================

class AdaptateurPlainteIA:
    """Adapte des plaintes existantes pour de nouvelles victimes"""
    
    def __init__(self, llm_manager: MultiLLMManager = None):
        self.llm_manager = llm_manager
        self.template_cache = {}
    
    async def adapter_plainte(self, 
                            plainte_originale: str,
                            victime_originale: VictimeInfo,
                            nouvelles_victimes: List[VictimeInfo],
                            contexte_commun: Dict[str, Any]) -> Dict[str, str]:
        """Adapte une plainte pour plusieurs nouvelles victimes"""
        
        plaintes_adaptees = {}
        
        for victime in nouvelles_victimes:
            prompt = self._construire_prompt_adaptation(
                plainte_originale,
                victime_originale,
                victime,
                contexte_commun
            )
            
            # Appel √† l'IA
            if self.llm_manager:
                response = await self.llm_manager.query_single_llm(
                    LLMProvider.AZURE_OPENAI,
                    prompt,
                    "Tu es un avocat expert en droit p√©nal des affaires."
                )
                if response['success']:
                    plaintes_adaptees[f"{victime.nom}_{victime.prenom}"] = response['response']
                else:
                    # Fallback
                    plaintes_adaptees[f"{victime.nom}_{victime.prenom}"] = \
                        self._adaptation_basique(plainte_originale, victime)
            else:
                # Fallback sans IA
                plaintes_adaptees[f"{victime.nom}_{victime.prenom}"] = \
                    self._adaptation_basique(plainte_originale, victime)
        
        return plaintes_adaptees
    
    def _construire_prompt_adaptation(self, plainte_originale: str,
                                    victime_orig: VictimeInfo,
                                    nouvelle_victime: VictimeInfo,
                                    contexte: Dict[str, Any]) -> str:
        """Construit le prompt pour l'IA"""
        
        return f"""Tu es un avocat sp√©cialis√© en droit p√©nal des affaires.
        
Voici une plainte r√©dig√©e pour {victime_orig.nom} {victime_orig.prenom}:
{plainte_originale}
Adapte cette plainte pour {nouvelle_victime.nom} {nouvelle_victime.prenom} en:
1. Conservant la structure et les arguments juridiques
2. Rempla√ßant les informations personnelles
3. Adaptant le pr√©judice sp√©cifique:
   - Nature du pr√©judice: {nouvelle_victime.prejudice_subi}
   - Montant: {nouvelle_victime.montant_prejudice}‚Ç¨
   - √âl√©ments sp√©cifiques: {', '.join(nouvelle_victime.elements_specifiques)}
4. Insistant particuli√®rement sur le pr√©judice subi par cette victime
Contexte de l'affaire: {contexte}
G√©n√®re la plainte adapt√©e en gardant le m√™me niveau de qualit√© juridique."""
    
    def _adaptation_basique(self, plainte_originale: str, 
                          nouvelle_victime: VictimeInfo) -> str:
        """Adaptation basique sans IA"""
        
        # Remplacements simples
        plainte = plainte_originale
        
        # Patterns √† remplacer
        replacements = {
            r'\[NOM\]': nouvelle_victime.nom,
            r'\[PRENOM\]': nouvelle_victime.prenom,
            r'\[PREJUDICE\]': nouvelle_victime.prejudice_subi,
            r'\[MONTANT\]': f"{nouvelle_victime.montant_prejudice:,.2f}",
        }
        
        for pattern, replacement in replacements.items():
            plainte = re.sub(pattern, replacement, plainte)
        
        # Ajouter section pr√©judice sp√©cifique
        section_prejudice = f"""
III. PR√âJUDICE SP√âCIFIQUE DE {nouvelle_victime.nom} {nouvelle_victime.prenom}
Le pr√©judice subi se caract√©rise par :
- Nature : {nouvelle_victime.prejudice_subi}
- Montant : {nouvelle_victime.montant_prejudice:,.2f} euros
- √âl√©ments particuliers : {', '.join(nouvelle_victime.elements_specifiques)}
Ce pr√©judice est √©tabli par les pi√®ces suivantes :
{chr(10).join([f"- {doc}" for doc in nouvelle_victime.documents_support])}
"""
        
        # Ins√©rer avant "PAR CES MOTIFS"
        if "PAR CES MOTIFS" in plainte:
            plainte = plainte.replace("PAR CES MOTIFS", section_prejudice + "\nPAR CES MOTIFS")
        else:
            plainte += "\n" + section_prejudice
        
        return plainte

# ================== PROMPTS P√âNAL DES AFFAIRES ==================

SEARCH_PROMPTS_AFFAIRES = {
    "üîç Infractions √©conomiques": {
        "Abus de biens sociaux": [
            "abus biens sociaux √©l√©ment intentionnel dirigeant",
            "ABS int√©r√™t personnel indirect jurisprudence",
            "ABS contrari√©t√© int√©r√™t social caract√©ris√©e",
            "ABS groupe soci√©t√©s justification flux"
        ],
        "Corruption": [
            "corruption √©l√©ment mat√©riel pacte preuve",
            "corruption passive dirigeant public priv√©",
            "corruption agent public √©tranger FCPA",
            "corruption priv√©e 445-1 code p√©nal"
        ],
        "Blanchiment": [
            "blanchiment pr√©somption origine frauduleuse",
            "blanchiment auto-blanchiment dirigeant",
            "blanchiment √©l√©ment moral connaissance",
            "blanchiment justification origine fonds"
        ],
        "Fraude fiscale": [
            "fraude fiscale √©l√©ment intentionnel preuve",
            "fraude fiscale soustraction frauduleuse",
            "fraude fiscale r√©gularisation spontan√©e",
            "fraude fiscale responsabilit√© dirigeant de fait"
        ]
    },
    "‚öñÔ∏è Responsabilit√© PM": {
        "Imputation": [
            "responsabilit√© p√©nale personne morale organe repr√©sentant",
            "responsabilit√© PM pour compte crit√®res jurisprudence",
            "responsabilit√© PM d√©faut organisation pr√©vention",
            "responsabilit√© PM fusion absorption transmission"
        ],
        "D√©fenses": [
            "d√©l√©gation pouvoirs conditions cumulatives validit√©",
            "d√©l√©gation pouvoirs comp√©tence autorit√© moyens",
            "programme conformit√© att√©nuation responsabilit√©",
            "CJIP conditions √©ligibilit√© n√©gociation"
        ]
    }
}

ANALYSIS_PROMPTS_AFFAIRES = {
    "üéØ Analyse infractions √©conomiques": [
        "Analysez pr√©cis√©ment les √©l√©ments constitutifs de l'infraction reproch√©e",
        "Identifiez l'√©l√©ment intentionnel et les moyens de le contester",
        "Recherchez les causes d'exon√©ration ou d'att√©nuation",
        "Proposez une strat√©gie ax√©e sur la bonne foi et l'int√©r√™t social"
    ],
    "üè¢ Responsabilit√© personne morale": [
        "V√©rifiez les conditions d'imputation √† la personne morale",
        "Analysez si les faits ont √©t√© commis pour le compte de la PM",
        "Examinez le r√¥le des organes et repr√©sentants",
        "√âvaluez l'impact d'une √©ventuelle d√©l√©gation de pouvoirs"
    ],
    "üõ°Ô∏è Moyens de d√©fense affaires": [
        "Valorisez le programme de conformit√© existant",
        "D√©montrez les mesures correctives prises",
        "Argumentez sur l'absence d'enrichissement personnel",
        "Mettez en avant la transparence et la bonne gouvernance"
    ],
    "üí∞ Enjeux financiers": [
        "Calculez pr√©cis√©ment le pr√©judice all√©gu√©",
        "Contestez les m√©thodes de calcul du pr√©judice",
        "√âvaluez l'impact financier des sanctions encourues",
        "Proposez des modalit√©s de r√©paration adapt√©es"
    ]
}

# ================== GESTION DES CITATIONS ==================

class CitationManager:
    """Gestionnaire des citations juridiques"""
    
    def __init__(self):
        self.citations = {}
        self.citation_formats = AppConfig.CITATION_FORMATS
    
    def format_citation(self, source_type: str, metadata: Dict[str, Any]) -> str:
        """Formate une citation selon les normes juridiques"""
        format_template = self.citation_formats.get(source_type, "{reference}")
        
        try:
            return format_template.format(**metadata)
        except KeyError as e:
            logger.warning(f"M√©tadonn√©es manquantes pour citation : {e}")
            return metadata.get('reference', 'Source non sp√©cifi√©e')

# ================== GESTIONNAIRE AZURE BLOB ==================

class AzureBlobManager:
    """Gestionnaire pour Azure Blob Storage avec navigation dans les dossiers"""
    
    def __init__(self):
        self.blob_service_client = None
        self.container_client = None
        self._init_blob_client()
    
    def _init_blob_client(self):
        """Initialise le client Azure Blob"""
        connection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')
        if connection_string and AZURE_AVAILABLE:
            try:
                self.blob_service_client = BlobServiceClient.from_connection_string(connection_string)
                logger.info("Client Azure Blob Storage initialis√©")
            except Exception as e:
                logger.error(f"Erreur initialisation Azure Blob : {e}")
    
    def list_containers(self) -> List[str]:
        """Liste tous les containers disponibles"""
        if not self.blob_service_client:
            return []
        
        try:
            containers = self.blob_service_client.list_containers()
            return [container.name for container in containers]
        except Exception as e:
            logger.error(f"Erreur listing containers : {e}")
            return []
    
    def list_folders(self, container_name: str, prefix: str = "") -> List[Dict[str, Any]]:
        """Liste les dossiers et fichiers dans un chemin donn√©"""
        if not self.blob_service_client:
            return []
        
        try:
            container_client = self.blob_service_client.get_container_client(container_name)
            
            # Structure pour stocker l'arborescence
            folders = set()
            files = []
            
            # Lister tous les blobs avec le pr√©fixe
            blobs = container_client.list_blobs(name_starts_with=prefix)
            
            for blob in blobs:
                # Extraire le chemin relatif
                relative_path = blob.name[len(prefix):] if prefix else blob.name
                parts = relative_path.split('/')
                
                # Si c'est un dossier (a des sous-√©l√©ments)
                if len(parts) > 1 and parts[0]:
                    folders.add(parts[0])
                # Si c'est un fichier direct
                elif len(parts) == 1 and parts[0]:
                    files.append({
                        'name': parts[0],
                        'size': blob.size,
                        'last_modified': blob.last_modified,
                        'content_type': blob.content_settings.content_type if blob.content_settings else None,
                        'full_path': blob.name
                    })
            
            # Combiner dossiers et fichiers
            result = []
            
            # Ajouter les dossiers
            for folder in sorted(folders):
                result.append({
                    'name': folder,
                    'type': 'folder',
                    'path': f"{prefix}{folder}/" if prefix else f"{folder}/"
                })
            
            # Ajouter les fichiers
            for file in sorted(files, key=lambda x: x['name']):
                result.append({
                    'name': file['name'],
                    'type': 'file',
                    'size': file['size'],
                    'last_modified': file['last_modified'],
                    'content_type': file['content_type'],
                    'full_path': file['full_path']
                })
            
            return result
            
        except Exception as e:
            logger.error(f"Erreur listing dossiers : {e}")
            return []
    
    def download_file(self, container_name: str, blob_name: str) -> Optional[bytes]:
        """T√©l√©charge un fichier depuis Azure Blob"""
        if not self.blob_service_client:
            return None
        
        try:
            blob_client = self.blob_service_client.get_blob_client(
                container=container_name,
                blob=blob_name
            )
            
            return blob_client.download_blob().readall()
            
        except Exception as e:
            logger.error(f"Erreur t√©l√©chargement blob : {e}")
            return None
    
    def extract_folder_documents(self, container_name: str, folder_path: str, 
                               recursive: bool = True) -> List[Document]:
        """Extrait tous les documents d'un dossier (et sous-dossiers si recursive)"""
        documents = []
        
        if not self.blob_service_client:
            return documents
        
        try:
            container_client = self.blob_service_client.get_container_client(container_name)
            
            # Lister tous les blobs dans le dossier
            blobs = container_client.list_blobs(name_starts_with=folder_path)
            
            supported_extensions = ['.pdf', '.txt', '.docx', '.doc', '.rtf']
            
            for blob in blobs:
                # V√©rifier l'extension
                file_ext = os.path.splitext(blob.name)[1].lower()
                
                if file_ext in supported_extensions:
                    # T√©l√©charger et extraire le contenu
                    try:
                        content_bytes = self.download_file(container_name, blob.name)
                        
                        if content_bytes:
                            # Extraire le texte selon le type
                            if file_ext == '.txt':
                                content = content_bytes.decode('utf-8', errors='ignore')
                            elif file_ext in ['.docx', '.doc']:
                                content = self._extract_docx_text(content_bytes)
                            elif file_ext == '.pdf':
                                content = self._extract_pdf_text(content_bytes)
                            else:
                                content = content_bytes.decode('utf-8', errors='ignore')
                            
                            # Cr√©er le document
                            doc = Document(
                                id=f"azure_{blob.name.replace('/', '_')}",
                                title=os.path.basename(blob.name),
                                content=content,
                                source='azure_blob',
                                metadata={
                                    'container': container_name,
                                    'blob_path': blob.name,
                                    'folder': folder_path,
                                    'size': blob.size,
                                    'last_modified': blob.last_modified.isoformat() if blob.last_modified else None
                                },
                                folder_path=folder_path
                            )
                            
                            documents.append(doc)
                            
                    except Exception as e:
                        logger.warning(f"Erreur extraction {blob.name} : {e}")
            
            return documents
            
        except Exception as e:
            logger.error(f"Erreur extraction documents : {e}")
            return documents
    
    def _extract_docx_text(self, content_bytes: bytes) -> str:
        """Extrait le texte d'un fichier DOCX"""
        try:
            if DOCX_AVAILABLE:
                doc = DocxDocument(io.BytesIO(content_bytes))
                return '\n'.join([paragraph.text for paragraph in doc.paragraphs])
            else:
                return "[Contenu DOCX - module python-docx requis]"
        except Exception as e:
            logger.error(f"Erreur extraction DOCX : {e}")
            return "[Erreur extraction DOCX]"
    
    def _extract_pdf_text(self, content_bytes: bytes) -> str:
        """Extrait le texte d'un fichier PDF"""
        try:
            # Ici vous pourriez utiliser PyPDF2 ou pdfplumber
            # Pour l'instant, retour basique
            return "[Contenu PDF - extraction non impl√©ment√©e]"
        except Exception as e:
            logger.error(f"Erreur extraction PDF : {e}")
            return "[Erreur extraction PDF]"

# ================== DOCUMENT MANAGER ==================

class DocumentManager:
    """Gestionnaire de documents avec recherche locale et Azure"""
    
    def __init__(self):
        self.local_documents: Dict[str, Document] = {}
        self.citation_manager = CitationManager()
        self.azure_blob_manager = AzureBlobManager()
        
        # Initialiser Azure si disponible
        if AZURE_AVAILABLE and os.getenv('AZURE_SEARCH_ENDPOINT'):
            self._init_azure_clients()
        else:
            self.search_client = None
    
    def _init_azure_clients(self):
        """Initialise les clients Azure"""
        try:
            self.search_client = SearchClient(
                endpoint=os.getenv('AZURE_SEARCH_ENDPOINT'),
                index_name="penal-affaires-index",
                credential=AzureKeyCredential(os.getenv('AZURE_SEARCH_KEY'))
            )
            logger.info("Client Azure Search initialis√©")
        except Exception as e:
            logger.error(f"Erreur initialisation Azure : {e}")
            self.search_client = None
    
    def search(self, query: str, mode: SearchMode = SearchMode.HYBRID, 
               page: int = 1) -> Tuple[List[Document], int]:
        """Recherche dans les documents"""
        results = []
        
        # Recherche Azure si disponible
        if self.search_client and mode != SearchMode.LOCAL:
            try:
                azure_results = self._search_azure(query, mode, page)
                results.extend(azure_results)
            except Exception as e:
                logger.warning(f"Recherche Azure √©chou√©e : {e}")
        
        # Recherche locale
        local_results = self._search_local(query)
        results.extend(local_results)
        
        # Pagination
        start = (page - 1) * AppConfig.PAGE_SIZE
        end = start + AppConfig.PAGE_SIZE
        
        return results[start:end], len(results)
    
    def _search_local(self, query: str) -> List[Document]:
        """Recherche locale simple"""
        results = []
        query_lower = query.lower()
        
        for doc in self.local_documents.values():
            if query_lower in doc.content.lower() or query_lower in doc.title.lower():
                results.append(doc)
        
        return results
    
    def _search_azure(self, query: str, mode: SearchMode, page: int) -> List[Document]:
        """Recherche Azure"""
        if not self.search_client:
            return []
        
        search_params = {
            "search_text": query,
            "select": ["id", "title", "content", "metadata"],
            "top": AppConfig.PAGE_SIZE,
            "skip": (page - 1) * AppConfig.PAGE_SIZE
        }
        
        results = self.search_client.search(**search_params)
        
        documents = []
        for result in results:
            doc = Document(
                id=result["id"],
                title=result["title"],
                content=result["content"],
                source="azure",
                metadata=result.get("metadata", {})
            )
            documents.append(doc)
        
        return documents
    
    def add_document(self, title: str, content: str, 
                    metadata: Optional[Dict[str, Any]] = None) -> str:
        """Ajoute un document"""
        doc_id = f"doc_{datetime.now().timestamp()}"
        
        doc = Document(
            id=doc_id,
            title=title,
            content=content,
            metadata=metadata or {}
        )
        
        self.local_documents[doc_id] = doc
        st.session_state.docs_for_analysis.append(doc)
        return doc_id

# ================== ANALYSEUR DE RISQUES AFFAIRES ==================

class RiskAnalyzerAffaires:
    """Analyse des risques sp√©cifique au p√©nal des affaires"""
    
    def __init__(self):
        self.risk_patterns = {
            'absence_element_intentionnel': {
                'check': lambda d: 'Abus de biens sociaux' in d.qualification_faits,
                'level': 'opportunity',
                'description': '√âl√©ment intentionnel difficile √† prouver',
                'strategy': 'D√©montrer la poursuite de l\'int√©r√™t social'
            },
            'delegation_valide': {
                'check': lambda d: d.delegation_pouvoirs and d.delegation_pouvoirs.get('valide'),
                'level': 'opportunity',
                'description': 'D√©l√©gation de pouvoirs valide',
                'strategy': 'Exon√©ration de responsabilit√© du dirigeant'
            },
            'programme_conformite': {
                'check': lambda d: d.programme_conformite and d.programme_conformite.get('score', 0) > 4,
                'level': 'opportunity',
                'description': 'Programme de conformit√© robuste',
                'strategy': 'N√©gocier CJIP ou att√©nuation de peine'
            },
            'regularisation_fiscale': {
                'check': lambda d: 'Fraude fiscale' in d.qualification_faits,
                'level': 'opportunity',
                'description': 'R√©gularisation fiscale possible',
                'strategy': 'N√©gocier avec l\'administration fiscale'
            }
        }
    
    def analyze(self, dossier: DossierAffaires) -> Dict[str, Any]:
        """Analyse compl√®te des risques"""
        risks = {'critical': [], 'high': [], 'medium': [], 'opportunities': []}
        
        for risk_name, risk_config in self.risk_patterns.items():
            try:
                if risk_config['check'](dossier):
                    risk_entry = {
                        'type': risk_name,
                        'description': risk_config['description'],
                        'level': risk_config['level']
                    }
                    
                    if 'strategy' in risk_config:
                        risk_entry['strategy'] = risk_config['strategy']
                    
                    level = risk_config['level']
                    if level == 'opportunity':
                        risks['opportunities'].append(risk_entry)
                    else:
                        risks[level].append(risk_entry)
                        
            except Exception as e:
                logger.warning(f"Erreur analyse risque {risk_name}: {e}")
        
        return {
            'risks': risks,
            'summary': self._generate_summary(risks),
            'recommendations': self._generate_recommendations(risks)
        }
    
    def _generate_summary(self, risks: Dict[str, List]) -> str:
        """G√©n√®re un r√©sum√© des risques"""
        opp_count = len(risks.get('opportunities', []))
        
        if opp_count >= 3:
            return f"‚úÖ {opp_count} opportunit√©s de d√©fense identifi√©es"
        elif opp_count > 0:
            return f"üìä Situation √©quilibr√©e avec {opp_count} points favorables"
        else:
            return "‚ö†Ô∏è Peu d'√©l√©ments favorables identifi√©s"
    
    def _generate_recommendations(self, risks: Dict[str, List]) -> List[str]:
        """G√©n√®re des recommandations"""
        recommendations = []
        
        for opp in risks.get('opportunities', []):
            if opp.get('strategy'):
                recommendations.append(opp['strategy'])
        
        return recommendations[:3]  # Top 3

# ================== CALCULATEUR D'AMENDES ==================

class CalculateurAmendesAffaires:
    """Calcule les amendes en droit p√©nal des affaires"""
    
    def __init__(self):
        self.amendes_base = {
            'Abus de biens sociaux': 375000,
            'Corruption': 1000000,
            'Trafic d\'influence': 500000,
            'Fraude fiscale': 500000,
            'Blanchiment': 375000,
            'Faux et usage de faux': 375000,
            'Escroquerie': 375000,
            'Abus de confiance': 375000,
            'Favoritisme': 200000,
            'Prise ill√©gale d\'int√©r√™ts': 500000,
            'Travail dissimul√©': 45000,
            'Banqueroute': 75000
        }
    
    def calculer_amende(self, infraction: str, is_pm: bool = False, 
                       chiffre_affaires: float = None) -> Dict[str, Any]:
        """Calcule l'amende encourue"""
        
        amende_base = self.amendes_base.get(infraction, 375000)
        amende_pm = amende_base * 5 if is_pm else amende_base
        
        calcul_special = {}
        
        # Calculs sp√©ciaux selon l'infraction
        if infraction == 'Fraude fiscale':
            calcul_special['mode'] = 'Jusqu\'au double du produit de la fraude'
        elif infraction == 'Blanchiment':
            calcul_special['mode'] = 'Jusqu\'√† 50% des sommes blanchies'
        elif infraction == 'Corruption' and chiffre_affaires and is_pm:
            calcul_special['mode'] = 'Jusqu\'√† 10% du CA moyen'
            calcul_special['montant'] = chiffre_affaires * 0.1
        
        peines_comp = []
        if is_pm:
            peines_comp = [
                "Exclusion des march√©s publics (5 ans max)",
                "Interdiction de faire appel public √† l'√©pargne",
                "Confiscation",
                "Affichage de la d√©cision"
            ]
        
        return {
            'amende_base': amende_base if not is_pm else amende_pm,
            'calcul_special': calcul_special,
            'peines_complementaires': peines_comp
        }

# ================== GESTIONNAIRE DE PI√àCES ==================

class GestionnairePieces:
    """Gestionnaire des pi√®ces vers√©es aux d√©bats"""
    
    def __init__(self, citation_manager: CitationManager):
        self.pieces: Dict[int, PieceVersee] = {}
        self.numero_actuel = 0
        self.citation_manager = citation_manager
    
    def verser_piece(self, titre: str, contenu: str, type_piece: str,
                    dossier_id: Optional[str] = None,
                    metadata: Optional[Dict[str, Any]] = None) -> int:
        """Verse une nouvelle pi√®ce"""
        self.numero_actuel += 1
        
        citation = self.citation_manager.format_citation(type_piece, metadata or {})
        
        piece = PieceVersee(
            numero=self.numero_actuel,
            titre=titre,
            contenu=contenu,
            type=type_piece,
            dossier_id=dossier_id,
            citation_complete=citation
        )
        
        self.pieces[self.numero_actuel] = piece
        return self.numero_actuel
    
    def generer_bordereau(self) -> str:
        """G√©n√®re le bordereau de communication"""
        bordereau = "BORDEREAU DE COMMUNICATION DE PI√àCES\n"
        bordereau += "=" * 50 + "\n\n"
        bordereau += f"Date : {datetime.now().strftime('%d/%m/%Y')}\n\n"
        
        for piece in sorted(self.pieces.values(), key=lambda x: x.numero):
            bordereau += f"{piece.numero}. {piece.titre}\n"
            if piece.citation_complete:
                bordereau += f"   {piece.citation_complete}\n"
        
        bordereau += f"\n\nTOTAL : {len(self.pieces)} pi√®ces\n"
        
        return bordereau

# ================== ASSISTANT R√âDACTION AFFAIRES ==================

class AssistantRedactionAffaires:
    """Assistant pour la r√©daction d'actes en p√©nal des affaires"""
    
    def __init__(self):
        self.templates = {
            'demande_audition_libre': {
                'titre': 'Demande d\'audition libre',
                'contenu': """Ma√Ætre [NOM]
Avocat au Barreau de [VILLE]
√Ä l'attention de [DESTINATAIRE]
[SERVICE]
Objet : Demande d'audition libre
Proc√©dure n¬∞ [NUMERO]
Monsieur/Madame,
J'ai l'honneur de vous informer que M./Mme [CLIENT], dirigeant(e) de la soci√©t√© [SOCIETE], 
souhaite √™tre entendu(e) dans le cadre de l'enqu√™te r√©f√©renc√©e ci-dessus.
Mon client(e) se tient √† votre disposition pour une audition libre et sollicite 
communication pr√©alable des pi√®ces de la proc√©dure (art. 61-1 CPP).
Disponibilit√©s propos√©es :
- [DATE 1]
- [DATE 2]
- [DATE 3]
Je vous prie d'agr√©er, Monsieur/Madame, l'expression de ma consid√©ration distingu√©e.
Ma√Ætre [NOM]"""
            },
            
            'conclusions_relaxe_abs': {
                'titre': 'Conclusions aux fins de relaxe - ABS',
                'contenu': """CONCLUSIONS AUX FINS DE RELAXE
POUR : [CLIENT]
       [SOCIETE]
CONTRE : LE MINIST√àRE PUBLIC
I. SUR L'ABSENCE D'√âL√âMENT MAT√âRIEL
L'abus de biens sociaux suppose un usage contraire √† l'int√©r√™t social.
En l'esp√®ce, les actes ont √©t√© r√©alis√©s dans l'int√©r√™t exclusif de la soci√©t√©.
II. SUR L'ABSENCE D'√âL√âMENT INTENTIONNEL
Mon client a agi en toute transparence et bonne foi.
Aucun enrichissement personnel n'est d√©montr√©.
III. SUR LA PRESCRIPTION (subsidiairement)
Les faits se prescrivent par 6 ans √† compter de leur r√©v√©lation.
PAR CES MOTIFS
- PRONONCER la relaxe"""
            },
            
            'memoire_cjip': {
                'titre': 'M√©moire CJIP',
                'contenu': """M√âMOIRE EN VUE D'UNE CJIP
POUR : [SOCIETE]
I. √âLIGIBILIT√â
- Personne morale
- Infractions √©ligibles
- Absence de condamnation pr√©alable
II. INT√âR√äT PUBLIC
- R√©paration rapide
- √âconomie judiciaire
III. ENGAGEMENTS
- Amende : [MONTANT]
- Programme de conformit√© renforc√©
- Audit externe
IV. GARANTIES
- Validation CA
- Budget d√©di√©"""
            }
        }

# ================== EXPORT PROFESSIONNEL ==================

class ProfessionalExporter:
    """Export en format professionnel"""
    
    def __init__(self, letterhead: Dict[str, Any] = None):
        self.letterhead = letterhead or {}
    
    def export_to_word(self, content: str, title: str = None) -> Optional[bytes]:
        """Exporte en format Word"""
        
        if not DOCX_AVAILABLE:
            st.warning("Module python-docx non install√©")
            return None
        
        try:
            doc = DocxDocument()
            
            # En-t√™te si configur√©
            if self.letterhead:
                header = doc.sections[0].header
                header_para = header.paragraphs[0]
                header_para.text = self.letterhead.get('nom', '')
                header_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            # Titre
            if title:
                doc.add_heading(title, 0)
            
            # Contenu
            for line in content.split('\n'):
                if line.strip():
                    doc.add_paragraph(line)
            
            # Export
            buffer = io.BytesIO()
            doc.save(buffer)
            buffer.seek(0)
            
            return buffer.getvalue()
            
        except Exception as e:
            logger.error(f"Erreur export Word : {e}")
            return None

# ================== GESTIONNAIRE PRINCIPAL ==================

class GestionnaireAffaires:
    """Gestionnaire principal des dossiers p√©naux des affaires"""
    
    def __init__(self):
        self.dossiers: Dict[str, DossierAffaires] = {}
        self.citation_manager = CitationManager()
        self.gestionnaire_pieces = GestionnairePieces(self.citation_manager)
        self.risk_analyzer = RiskAnalyzerAffaires()
        self.calculateur_amendes = CalculateurAmendesAffaires()
        self.assistant_redaction = AssistantRedactionAffaires()
        self.gestionnaire_multi_victimes = GestionnaireMultiVictimes()
        self.llm_manager = None  # Sera initialis√© si configur√©
        self.adaptateur_plainte = None
    
    def init_llm_manager(self):
        """Initialise le gestionnaire LLM"""
        if not self.llm_manager:
            self.llm_manager = MultiLLMManager()
            self.adaptateur_plainte = AdaptateurPlainteIA(self.llm_manager)
    
    def creer_dossier(self, dossier: DossierAffaires) -> str:
        """Cr√©e un nouveau dossier"""
        dossier_id = f"{dossier.numero_parquet}_{datetime.now().timestamp()}"
        self.dossiers[dossier_id] = dossier
        return dossier_id
    
    def analyser_dossier(self, dossier_id: str) -> Dict[str, Any]:
        """Analyse compl√®te d'un dossier"""
        
        if dossier_id not in self.dossiers:
            return {}
        
        dossier = self.dossiers[dossier_id]
        
        # Analyse des risques
        risk_analysis = self.risk_analyzer.analyze(dossier)
        
        # Calcul des amendes
        amendes = {}
        for infraction in dossier.qualification_faits:
            is_pm = dossier.client_type == "PM"
            ca = dossier.client_info.get('chiffre_affaires') if is_pm else None
            amendes[infraction] = self.calculateur_amendes.calculer_amende(
                infraction, is_pm, ca
            )
        
        return {
            'risk_analysis': risk_analysis,
            'amendes': amendes,
            'prescription': dossier.calculer_prescription()
        }

# ================== GESTIONNAIRES SINGLETON ==================

@st.cache_resource
def get_managers():
    """Cr√©e et retourne les gestionnaires singleton"""
    return {
        'gestionnaire': GestionnaireAffaires(),
        'doc_manager': DocumentManager(),
        'exporter': ProfessionalExporter()
    }

# ================== INITIALISATION ==================

initialize_session_state()
managers = get_managers()
gestionnaire = managers['gestionnaire']
doc_manager = managers['doc_manager']
exporter = managers['exporter']

# Initialiser le gestionnaire LLM si configur√©
gestionnaire.init_llm_manager()

# ================== INTERFACE PRINCIPALE ==================

# Cr√©er les tabs principaux
tabs = st.tabs([
    "üìÇ Dossiers",
    "üîç Recherche",
    "ü§ñ IA Multi-LLM",
    "‚úçÔ∏è R√©daction", 
    "üìé Pi√®ces",
    "‚òÅÔ∏è Azure Blob",
    "‚öôÔ∏è Configuration"
])

# ================== TAB 1: GESTION DES DOSSIERS ==================

with tabs[0]:
    st.header("üìÇ Gestion des dossiers")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.subheader("‚ûï Nouveau dossier")
        
        with st.form("nouveau_dossier"):
            numero_parquet = st.text_input("N¬∞ Parquet", placeholder="2024/12345")
            
            # Type de client
            client_type = st.radio("Type de client", ["Personne physique", "Personne morale"])
            
            if client_type == "Personne physique":
                client_nom = st.text_input("Nom et pr√©nom")
                client_info = {}
            else:
                client_nom = st.text_input("D√©nomination sociale")
                col_pm1, col_pm2 = st.columns(2)
                with col_pm1:
                    forme_juridique = st.selectbox("Forme", ["SAS", "SARL", "SA", "SNC"])
                    siren = st.text_input("SIREN")
                with col_pm2:
                    ca = st.number_input("CA annuel (‚Ç¨)", min_value=0, step=100000)
                    effectif = st.number_input("Effectif", min_value=0)
                
                client_info = {
                    'forme_juridique': forme_juridique,
                    'siren': siren,
                    'chiffre_affaires': ca,
                    'effectif': effectif
                }
            
            procedure_type = st.selectbox(
                "Type de proc√©dure",
                [p.value for p in ProcedureAffaires]
            )
            
            qualifications = st.multiselect(
                "Infractions",
                [inf.value for inf in InfractionAffaires]
            )
            
            date_faits = st.date_input("Date des faits")
            montant_prejudice = st.number_input("Pr√©judice all√©gu√© (‚Ç¨)", min_value=0)
            
            if st.form_submit_button("Cr√©er le dossier", type="primary"):
                if numero_parquet and client_nom:
                    dossier = DossierAffaires(
                        numero_parquet=numero_parquet,
                        numero_instruction=None,
                        client_nom=client_nom,
                        client_type="PM" if client_type == "Personne morale" else "PP",
                        client_info=client_info,
                        qualification_faits=qualifications,
                        date_faits=datetime.combine(date_faits, datetime.min.time()),
                        procedure_type=ProcedureAffaires(procedure_type),
                        magistrat=None,
                        montant_prejudice=montant_prejudice
                    )
                    
                    dossier_id = gestionnaire.creer_dossier(dossier)
                    st.session_state.dossier_actif = dossier_id
                    st.session_state.dossiers[dossier_id] = dossier
                    st.success(f"‚úÖ Dossier {numero_parquet} cr√©√©")
                    st.rerun()
    
    with col2:
        st.subheader("üìÅ Dossiers actifs")
        
        if st.session_state.dossiers:
            for dossier_id, dossier in st.session_state.dossiers.items():
                with st.container():
                    st.markdown('<div class="dossier-card">', unsafe_allow_html=True)
                    
                    col_d1, col_d2, col_d3 = st.columns([3, 2, 1])
                    
                    with col_d1:
                        st.markdown(f"**{dossier.numero_parquet}**")
                        st.write(f"**Client :** {dossier.client_nom}")
                        if dossier.client_type == "PM":
                            st.caption(f"{dossier.client_info.get('forme_juridique', 'PM')}")
                        
                        # Infractions
                        infractions_str = ", ".join(dossier.qualification_faits[:2])
                        if len(dossier.qualification_faits) > 2:
                            infractions_str += f" (+{len(dossier.qualification_faits)-2})"
                        st.write(f"**Infractions :** {infractions_str}")
                        
                        # Victimes
                        if dossier.victimes:
                            st.caption(f"üë• {len(dossier.victimes)} victime(s)")
                        
                        # Badge proc√©dure
                        badge_class = f"badge-{dossier.procedure_type.name.lower()}"
                        st.markdown(
                            f'<span class="procedure-badge {badge_class}">'
                            f'{dossier.procedure_type.value}</span>',
                            unsafe_allow_html=True
                        )
                    
                    with col_d2:
                        # Prescription
                        prescription = dossier.calculer_prescription()
                        if prescription['prescrit']:
                            st.error("‚ö†Ô∏è PRESCRIT")
                        else:
                            jours = prescription['jours_restants']
                            if jours < 180:
                                st.warning(f"‚è∞ Prescription: {jours}j")
                            else:
                                st.info(f"üìÖ Prescription: {jours}j")
                        
                        # Enjeux
                        if dossier.montant_prejudice:
                            st.metric("Enjeux", f"{dossier.montant_prejudice:,.0f}‚Ç¨")
                    
                    with col_d3:
                        if st.button("üìÇ Ouvrir", key=f"open_{dossier_id}"):
                            st.session_state.dossier_actif = dossier_id
                            st.rerun()
                        
                        if st.button("ü§ñ Analyser", key=f"analyze_{dossier_id}"):
                            with st.spinner("Analyse..."):
                                analysis = gestionnaire.analyser_dossier(dossier_id)
                                st.session_state[f"analysis_{dossier_id}"] = analysis
                                st.success("‚úÖ Analyse termin√©e")
                    
                    # Afficher l'analyse si disponible
                    if f"analysis_{dossier_id}" in st.session_state:
                        with st.expander("üìä R√©sultats de l'analyse"):
                            analysis = st.session_state[f"analysis_{dossier_id}"]
                            
                            st.write(f"**Synth√®se :** {analysis['risk_analysis']['summary']}")
                            
                            # Recommandations
                            if analysis['risk_analysis']['recommendations']:
                                st.write("**Strat√©gies recommand√©es :**")
                                for rec in analysis['risk_analysis']['recommendations']:
                                    st.write(f"‚Ä¢ {rec}")
                            
                            # Amendes
                            if analysis['amendes']:
                                st.write("**Amendes encourues :**")
                                for inf, amende in analysis['amendes'].items():
                                    st.write(f"‚Ä¢ {inf}: {amende['amende_base']:,.0f}‚Ç¨")
                    
                    st.markdown('</div>', unsafe_allow_html=True)
        else:
            st.info("Aucun dossier cr√©√©")

# ================== TAB 2: RECHERCHE ==================

with tabs[1]:
    st.header("üîç Recherche et analyse")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üîç Recherche jurisprudence")
        
        query = st.text_input(
            "Rechercher", 
            placeholder="Ex: abus biens sociaux √©l√©ment intentionnel..."
        )
        
        search_mode = st.selectbox(
            "Mode",
            [mode.value for mode in SearchMode]
        )
        
        if st.button("üîç Rechercher", type="primary"):
            if query:
                with st.spinner("Recherche..."):
                    results, total = doc_manager.search(
                        query=query,
                        mode=SearchMode(search_mode),
                        page=st.session_state.current_page
                    )
                    
                    if results:
                        st.success(f"‚úÖ {total} r√©sultats")
                        
                        for result in results:
                            with st.expander(f"üìÑ {result.title}"):
                                st.write(result.content[:500] + "...")
                                
                                if st.button("üìé Verser aux d√©bats", key=f"verser_{result.id}"):
                                    num = gestionnaire.gestionnaire_pieces.verser_piece(
                                        titre=result.title,
                                        contenu=result.content,
                                        type_piece='jurisprudence',
                                        dossier_id=st.session_state.dossier_actif
                                    )
                                    st.success(f"‚úÖ Pi√®ce n¬∞{num}")
                    else:
                        st.warning("Aucun r√©sultat")
    
    with col2:
        st.subheader("üéØ Recherches sugg√©r√©es")
        
        for categorie, recherches in SEARCH_PROMPTS_AFFAIRES.items():
            with st.expander(categorie):
                for type_recherche, prompts in recherches.items():
                    st.markdown(f"**{type_recherche}**")
                    for prompt in prompts[:2]:  # Limiter √† 2
                        if st.button(f"üîç {prompt[:30]}...", key=f"prompt_{prompt[:20]}"):
                            st.session_state.search_query = prompt

# ================== TAB 3: IA MULTI-LLM ==================

with tabs[2]:
    st.header("ü§ñ Assistant IA Multi-LLM")
    
    # Initialiser le manager
    if 'llm_manager' not in st.session_state:
        if gestionnaire.llm_manager:
            st.session_state.llm_manager = gestionnaire.llm_manager
        else:
            st.session_state.llm_manager = None
    
    llm_manager = st.session_state.llm_manager
    
    if not llm_manager:
        st.warning("‚ö†Ô∏è Aucun LLM configur√©. V√©rifiez vos cl√©s API dans le fichier .env")
    else:
        # S√©lection des LLMs
        col1_llm, col2_llm = st.columns([1, 2])
        
        with col1_llm:
            st.subheader("üéØ Configuration")
            
            # LLMs disponibles
            available_llms = list(llm_manager.clients.keys())
            
            if not available_llms:
                st.error("Aucun LLM configur√©. V√©rifiez vos cl√©s API.")
            else:
                st.success(f"‚úÖ {len(available_llms)} LLMs disponibles")
                
                # Mode de requ√™te
                query_mode = st.radio(
                    "Mode d'interrogation",
                    ["Un seul LLM", "Plusieurs LLMs", "Tous les LLMs"]
                )
                
                selected_llms = []
                
                if query_mode == "Un seul LLM":
                    selected_llm = st.selectbox(
                        "Choisir le LLM",
                        available_llms,
                        format_func=lambda x: x.value
                    )
                    selected_llms = [selected_llm]
                
                elif query_mode == "Plusieurs LLMs":
                    selected_llms = st.multiselect(
                        "Choisir les LLMs",
                        available_llms,
                        format_func=lambda x: x.value
                    )
                
                else:  # Tous les LLMs
                    selected_llms = available_llms
                
                # Options de fusion
                enable_fusion = False
                fusion_llm = None
                
                if len(selected_llms) > 1:
                    st.divider()
                    
                    enable_fusion = st.checkbox("üîÄ Activer la fusion des r√©ponses", value=True)
                    
                    if enable_fusion:
                        fusion_llm = st.selectbox(
                            "LLM pour la fusion",
                            available_llms,
                            format_func=lambda x: x.value,
                            help="Le LLM qui fusionnera toutes les r√©ponses"
                        )
            
            # Contexte du dossier
            st.divider()
            
            use_dossier_context = st.checkbox("üìÇ Utiliser le contexte du dossier actif")
            
            if use_dossier_context and st.session_state.dossier_actif:
                dossier = st.session_state.dossiers.get(st.session_state.dossier_actif)
                if dossier:
                    st.info(f"Dossier : {dossier.numero_parquet}")
                    st.caption(f"Client : {dossier.client_nom}")
                    st.caption(f"Infractions : {', '.join(dossier.qualification_faits[:2])}")
        
        with col2_llm:
            st.subheader("üí¨ Requ√™te")
            
            # Templates de prompts
            prompt_templates = {
                "Analyse juridique": """Analyse juridique approfondie :
                
Contexte : {context}
Question : {question}
Fournis une analyse d√©taill√©e incluant :
1. Les √©l√©ments constitutifs de l'infraction
2. Les moyens de d√©fense possibles
3. La jurisprudence pertinente
4. Les risques et opportunit√©s
5. Une strat√©gie recommand√©e""",
                
                "Adaptation de plainte": """Adapte cette plainte pour un nouveau plaignant :
Plainte originale :
{original}
Nouveau plaignant : {nouveau_plaignant}
Pr√©judice sp√©cifique : {prejudice}
Adapte en conservant la structure juridique mais en personnalisant pour ce plaignant.""",
                
                "Recherche de jurisprudence": """Recherche la jurisprudence pertinente pour :
                
Infraction : {infraction}
Point de droit : {point_droit}
Cite les arr√™ts les plus r√©cents et pertinents avec leurs apports.""",
                
                "Strat√©gie de d√©fense": """√âlabore une strat√©gie de d√©fense pour :
Client : {client}
Infractions reproch√©es : {infractions}
√âl√©ments favorables : {elements_favorables}
√âl√©ments d√©favorables : {elements_defavorables}
Propose une strat√©gie compl√®te et argument√©e."""
            }
            
            # S√©lection du template
            use_template = st.checkbox("üìã Utiliser un template")
            
            if use_template:
                template_name = st.selectbox(
                    "Template",
                    list(prompt_templates.keys())
                )
                
                # Variables du template
                template = prompt_templates[template_name]
                variables = re.findall(r'\{(\w+)\}', template)
                
                variable_values = {}
                for var in variables:
                    if var == 'context' and use_dossier_context and 'dossier' in locals():
                        # Auto-remplir le contexte
                        context = f"Dossier {dossier.numero_parquet}, "
                        context += f"Client: {dossier.client_nom}, "
                        context += f"Infractions: {', '.join(dossier.qualification_faits)}"
                        variable_values[var] = context
                    else:
                        variable_values[var] = st.text_area(
                            f"{var.replace('_', ' ').title()}",
                            height=100 if var in ['original', 'prejudice'] else 50
                        )
                
                # Construire le prompt final
                try:
                    prompt = template.format(**variable_values)
                except KeyError:
                    prompt = template
                    st.warning("Remplissez toutes les variables du template")
            else:
                # Prompt libre
                prompt = st.text_area(
                    "Votre question",
                    height=200,
                    placeholder="Posez votre question juridique..."
                )
            
            # System prompt optionnel
            with st.expander("‚öôÔ∏è Instructions syst√®me (optionnel)"):
                system_prompt = st.text_area(
                    "Instructions pour l'IA",
                    value="Tu es un avocat expert en droit p√©nal des affaires fran√ßais. "
                          "Fournis des analyses pr√©cises avec r√©f√©rences l√©gales.",
                    height=100
                )
            
            # Bouton pour lancer la requ√™te
            if st.button("üöÄ Interroger les LLMs", type="primary", disabled=not selected_llms):
                if prompt:
                    with st.spinner(f"Interrogation de {len(selected_llms)} LLM(s)..."):
                        
                        # Mesurer le temps
                        start_time = datetime.now()
                        
                        # Interroger les LLMs
                        loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(loop)
                        
                        results = loop.run_until_complete(
                            llm_manager.query_multiple_llms(
                                selected_llms,
                                prompt,
                                system_prompt
                            )
                        )
                        
                        end_time = datetime.now()
                        duration = (end_time - start_time).total_seconds()
                        
                        # Stocker les r√©sultats
                        st.session_state.llm_results = results
                        st.session_state.llm_duration = duration
                        st.session_state.llm_prompt = prompt
                        
                        st.success(f"‚úÖ Termin√© en {duration:.1f} secondes")
                else:
                    st.error("Entrez une question")
            
            # Affichage des r√©sultats
            if st.session_state.get('llm_results'):
                st.divider()
                st.subheader("üìä R√©sultats")
                
                results = st.session_state.llm_results
                successful_results = [r for r in results if r['success']]
                
                # M√©triques
                col_m1, col_m2, col_m3 = st.columns(3)
                
                with col_m1:
                    st.metric("R√©ponses re√ßues", f"{len(successful_results)}/{len(results)}")
                
                with col_m2:
                    st.metric("Temps total", f"{st.session_state.llm_duration:.1f}s")
                
                with col_m3:
                    total_tokens = sum(
                        r.get('usage', {}).get('total_tokens', 0) 
                        for r in successful_results 
                        if r.get('usage')
                    )
                    if total_tokens:
                        st.metric("Tokens utilis√©s", f"{total_tokens:,}")
                
                # Tabs pour les r√©ponses
                tab_names = [r['provider'] for r in successful_results]
                if len(successful_results) > 1 and enable_fusion:
                    tab_names.append("üîÄ Fusion")
                
                response_tabs = st.tabs(tab_names)
                
                # Afficher chaque r√©ponse
                for i, (tab, result) in enumerate(zip(response_tabs, successful_results)):
                    with tab:
                        if result['success']:
                            # Options d'action
                            col_a1, col_a2, col_a3 = st.columns(3)
                            
                            with col_a1:
                                if st.button("üìã Copier", key=f"copy_{i}"):
                                    st.code(result['response'])
                            
                            with col_a2:
                                if st.button("üìé Verser aux d√©bats", key=f"verser_llm_{i}"):
                                    num = gestionnaire.gestionnaire_pieces.verser_piece(
                                        titre=f"Analyse IA - {result['provider']}",
                                        contenu=result['response'],
                                        type_piece='rapport',
                                        dossier_id=st.session_state.dossier_actif
                                    )
                                    st.success(f"‚úÖ Pi√®ce n¬∞{num}")
                            
                            with col_a3:
                                if st.button("‚úèÔ∏è √âditer", key=f"edit_{i}"):
                                    st.session_state.document_content = result['response']
                                    st.info("üìù Charg√© dans l'√©diteur")
                            
                            # Afficher la r√©ponse
                            st.markdown('<div class="llm-response">', unsafe_allow_html=True)
                            st.markdown(result['response'])
                            st.markdown('</div>', unsafe_allow_html=True)
                            
                            # M√©tadonn√©es
                            with st.expander("üìä D√©tails"):
                                if result.get('usage'):
                                    st.json(result['usage'])
                                if result.get('citations'):
                                    st.write("**Sources :**")
                                    for citation in result['citations']:
                                        st.write(f"- {citation}")
                        else:
                            st.error(f"‚ùå Erreur : {result.get('error', 'Inconnue')}")
                
                # Tab fusion si activ√©e
                if len(successful_results) > 1 and enable_fusion:
                    with response_tabs[-1]:
                        if st.button("üîÄ G√©n√©rer la fusion", type="primary"):
                            with st.spinner("Fusion en cours..."):
                                fusion_result = llm_manager.fusion_responses(
                                    successful_results,
                                    fusion_llm
                                )
                                
                                st.session_state.fusion_result = fusion_result
                                st.success("‚úÖ Fusion termin√©e")
                        
                        if st.session_state.get('fusion_result'):
                            # Options pour la fusion
                            col_f1, col_f2, col_f3 = st.columns(3)
                            
                            with col_f1:
                                if st.button("üìã Copier fusion"):
                                    st.code(st.session_state.fusion_result)
                            
                            with col_f2:
                                if st.button("üìé Verser fusion"):
                                    num = gestionnaire.gestionnaire_pieces.verser_piece(
                                        titre="Analyse IA - Synth√®se multi-LLM",
                                        contenu=st.session_state.fusion_result,
                                        type_piece='rapport',
                                        dossier_id=st.session_state.dossier_actif
                                    )
                                    st.success(f"‚úÖ Pi√®ce n¬∞{num}")
                            
                            with col_f3:
                                if st.button("‚úèÔ∏è √âditer fusion"):
                                    st.session_state.document_content = st.session_state.fusion_result
                                    st.info("üìù Charg√© dans l'√©diteur")
                            
                            # Afficher la fusion
                            st.markdown("### üîÄ Synth√®se fusionn√©e")
                            st.markdown('<div class="llm-response">', unsafe_allow_html=True)
                            st.markdown(st.session_state.fusion_result)
                            st.markdown('</div>', unsafe_allow_html=True)
                
                # Comparaison c√¥te √† c√¥te
                if len(successful_results) > 1:
                    with st.expander("üîÑ Comparaison c√¥te √† c√¥te"):
                        cols = st.columns(len(successful_results[:3]))  # Max 3 colonnes
                        
                        for col, result in zip(cols, successful_results[:3]):
                            with col:
                                st.markdown(f"**{result['provider']}**")
                                st.markdown(result['response'][:500] + "...")

# ================== TAB 4: R√âDACTION ==================

with tabs[3]:
    st.header("‚úçÔ∏è R√©daction d'actes")
    
    # Nouveau : Section adaptation multi-victimes
    adaptation_enabled = st.checkbox("üîÑ Adapter une plainte pour plusieurs victimes")
    
    if adaptation_enabled:
        st.subheader("Adaptation multi-victimes")
        
        col1_adapt, col2_adapt = st.columns([1, 1])
        
        with col1_adapt:
            st.markdown("### 1Ô∏è‚É£ Document source")
            
            # S√©lection de la plainte originale
            if st.session_state.docs_for_analysis:
                plainte_source = st.selectbox(
                    "Plainte √† adapter",
                    st.session_state.docs_for_analysis,
                    format_func=lambda x: x.title
                )
                
                if st.button("üìÑ Charger cette plainte"):
                    st.session_state.plainte_originale = plainte_source.content
                    st.success("‚úÖ Plainte charg√©e")
            
            # Option de charger depuis un fichier
            uploaded_file = st.file_uploader(
                "Ou t√©l√©charger une plainte",
                type=['txt', 'docx'],
                key="plainte_upload"
            )
            
            if uploaded_file:
                content = uploaded_file.read().decode('utf-8')
                st.session_state.plainte_originale = content
                st.success("‚úÖ Fichier charg√©")
        
        with col2_adapt:
            st.markdown("### 2Ô∏è‚É£ Nouvelles victimes")
            
            # Formulaire pour ajouter des victimes
            with st.form("nouvelle_victime"):
                nom = st.text_input("Nom")
                prenom = st.text_input("Pr√©nom")
                prejudice = st.text_area("Description du pr√©judice")
                montant = st.number_input("Montant du pr√©judice (‚Ç¨)", min_value=0.0)
                
                elements_spec = st.text_area(
                    "√âl√©ments sp√©cifiques (un par ligne)",
                    help="Ex: Perte de chance, atteinte √† l'image, etc."
                )
                
                if st.form_submit_button("‚ûï Ajouter cette victime"):
                    victime = VictimeInfo(
                        nom=nom,
                        prenom=prenom,
                        prejudice_subi=prejudice,
                        montant_prejudice=montant,
                        elements_specifiques=elements_spec.split('\n') if elements_spec else [],
                        documents_support=[]
                    )
                    
                    if 'victimes_adapter' not in st.session_state:
                        st.session_state.victimes_adapter = []
                    
                    st.session_state.victimes_adapter.append(victime)
                    st.success(f"‚úÖ {nom} {prenom} ajout√©(e)")
                    st.rerun()
        
        # Liste des victimes √† traiter
        if st.session_state.get('victimes_adapter'):
            st.markdown("### üë• Victimes √† traiter")
            
            for i, victime in enumerate(st.session_state.victimes_adapter):
                col1_v, col2_v, col3_v = st.columns([2, 2, 1])
                
                with col1_v:
                    st.write(f"**{victime.nom} {victime.prenom}**")
                
                with col2_v:
                    st.write(f"Pr√©judice: {victime.montant_prejudice:,.0f}‚Ç¨")
                
                with col3_v:
                    if st.button("üóëÔ∏è", key=f"del_victime_{i}"):
                        st.session_state.victimes_adapter.pop(i)
                        st.rerun()
            
            # Choix du mode d'adaptation
            adaptation_mode = st.radio(
                "Mode d'adaptation",
                ["ü§ñ Avec IA (recommand√©)", "üìù Sans IA (basique)"]
            )
            
            # Bouton pour g√©n√©rer toutes les plaintes
            if st.button("üöÄ G√©n√©rer toutes les plaintes adapt√©es", type="primary"):
                if st.session_state.get('plainte_originale'):
                    with st.spinner("Adaptation en cours..."):
                        
                        # Cr√©er l'adaptateur
                        if not gestionnaire.adaptateur_plainte:
                            gestionnaire.adaptateur_plainte = AdaptateurPlainteIA()
                        
                        adaptateur = gestionnaire.adaptateur_plainte
                        
                        # Adapter pour chaque victime
                        plaintes_adaptees = {}
                        
                        if adaptation_mode.startswith("ü§ñ") and gestionnaire.llm_manager:
                            # Adaptation avec IA
                            victime_orig = VictimeInfo(
                                nom="[NOM]",
                                prenom="[PRENOM]",
                                prejudice_subi="[PREJUDICE]",
                                montant_prejudice=0,
                                elements_specifiques=[],
                                documents_support=[]
                            )
                            
                            contexte = {}
                            if st.session_state.dossier_actif:
                                dossier = st.session_state.dossiers.get(st.session_state.dossier_actif)
                                if dossier:
                                    contexte = {
                                        'numero_parquet': dossier.numero_parquet,
                                        'infractions': dossier.qualification_faits,
                                        'date_faits': dossier.date_faits.strftime('%d/%m/%Y')
                                    }
                            
                            loop = asyncio.new_event_loop()
                            asyncio.set_event_loop(loop)
                            
                            plaintes_adaptees = loop.run_until_complete(
                                adaptateur.adapter_plainte(
                                    st.session_state.plainte_originale,
                                    victime_orig,
                                    st.session_state.victimes_adapter,
                                    contexte
                                )
                            )
                        else:
                            # Adaptation basique
                            for victime in st.session_state.victimes_adapter:
                                plainte_adaptee = adaptateur._adaptation_basique(
                                    st.session_state.plainte_originale,
                                    victime
                                )
                                
                                plaintes_adaptees[f"{victime.nom}_{victime.prenom}"] = plainte_adaptee
                        
                        st.session_state.plaintes_adaptees = plaintes_adaptees
                        st.success(f"‚úÖ {len(plaintes_adaptees)} plaintes g√©n√©r√©es")
                else:
                    st.error("Chargez d'abord une plainte source")
        
        # Affichage et export des plaintes adapt√©es
        if st.session_state.get('plaintes_adaptees'):
            st.markdown("### üìÑ Plaintes g√©n√©r√©es")
            
            for victime_id, plainte in st.session_state.plaintes_adaptees.items():
                with st.expander(f"Plainte pour {victime_id}"):
                    st.text_area(
                        "Contenu",
                        value=plainte[:1000] + "...",
                        height=300,
                        key=f"preview_{victime_id}"
                    )
                    
                    col_exp1, col_exp2, col_exp3 = st.columns(3)
                    
                    with col_exp1:
                        st.download_button(
                            "üíæ T√©l√©charger TXT",
                            plainte,
                            f"plainte_{victime_id}.txt",
                            key=f"dl_txt_{victime_id}"
                        )
                    
                    with col_exp2:
                        if st.button("üìÑ Export Word", key=f"word_{victime_id}"):
                            doc_bytes = exporter.export_to_word(
                                plainte,
                                f"Plainte - {victime_id}"
                            )
                            if doc_bytes:
                                st.download_button(
                                    "üíæ DOCX",
                                    doc_bytes,
                                    f"plainte_{victime_id}.docx",
                                    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                    key=f"dl_docx_{victime_id}"
                                )
                    
                    with col_exp3:
                        if st.button("üìé Verser aux d√©bats", key=f"verser_plainte_{victime_id}"):
                            num = gestionnaire.gestionnaire_pieces.verser_piece(
                                titre=f"Plainte {victime_id}",
                                contenu=plainte,
                                type_piece='plainte',
                                dossier_id=st.session_state.dossier_actif
                            )
                            st.success(f"‚úÖ Pi√®ce n¬∞{num}")
            
            # Export group√©
            if st.button("üì¶ Exporter toutes les plaintes"):
                import zipfile
                import io
                
                zip_buffer = io.BytesIO()
                
                with zipfile.ZipFile(zip_buffer, 'w') as zip_file:
                    for victime_id, plainte in st.session_state.plaintes_adaptees.items():
                        zip_file.writestr(f"plainte_{victime_id}.txt", plainte)
                
                zip_buffer.seek(0)
                
                st.download_button(
                    "üíæ T√©l√©charger ZIP",
                    zip_buffer.getvalue(),
                    f"plaintes_adaptees_{datetime.now().strftime(AppConfig.EXPORT_FORMAT)}.zip",
                    "application/zip"
                )
    
    # Section r√©daction classique
    st.divider()
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.subheader("üìù Mod√®les")
        
        template_key = st.selectbox(
            "Type de document",
            list(gestionnaire.assistant_redaction.templates.keys()),
            format_func=lambda x: gestionnaire.assistant_redaction.templates[x]['titre']
        )
        
        if st.button("üìã Utiliser ce mod√®le", type="primary"):
            template = gestionnaire.assistant_redaction.templates[template_key]
            st.session_state.document_content = template['contenu']
            st.success("‚úÖ Mod√®le charg√©")
    
    with col2:
        st.subheader("‚úèÔ∏è √âditeur")
        
        # √âditeur
        st.session_state.document_content = st.text_area(
            "Document",
            value=st.session_state.document_content,
            height=600
        )
        
        # Export
        col_exp1, col_exp2 = st.columns(2)
        
        with col_exp1:
            if st.button("üíæ Export TXT"):
                st.download_button(
                    "T√©l√©charger",
                    st.session_state.document_content,
                    f"document_{datetime.now().strftime(AppConfig.EXPORT_FORMAT)}.txt"
                )
        
        with col_exp2:
            if st.button("üìÑ Export Word"):
                if st.session_state.letterhead:
                    doc_bytes = exporter.export_to_word(
                        st.session_state.document_content,
                        "Document juridique"
                    )
                    if doc_bytes:
                        st.download_button(
                            "T√©l√©charger DOCX",
                            doc_bytes,
                            f"document_{datetime.now().strftime(AppConfig.EXPORT_FORMAT)}.docx",
                            "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                        )
                else:
                    st.warning("Configurez votre en-t√™te")

# ================== TAB 5: PI√àCES ==================

with tabs[4]:
    st.header("üìé Gestion des pi√®ces")
    
    pieces = gestionnaire.gestionnaire_pieces.pieces
    
    if pieces:
        # Liste des pi√®ces
        for piece in pieces.values():
            with st.expander(f"üìÑ Pi√®ce n¬∞{piece.numero} - {piece.titre}"):
                if piece.citation_complete:
                    st.code(piece.citation_complete)
                
                st.write(piece.contenu[:300] + "..." if len(piece.contenu) > 300 else piece.contenu)
                
                if st.button(f"üóëÔ∏è Retirer", key=f"remove_{piece.numero}"):
                    del gestionnaire.gestionnaire_pieces.pieces[piece.numero]
                    st.rerun()
        
        # Bordereau
        if st.button("üìã G√©n√©rer le bordereau", type="primary"):
            bordereau = gestionnaire.gestionnaire_pieces.generer_bordereau()
            st.text_area("Bordereau", value=bordereau, height=400)
            
            st.download_button(
                "üíæ T√©l√©charger",
                bordereau,
                f"bordereau_{datetime.now().strftime(AppConfig.EXPORT_FORMAT)}.txt"
            )
    else:
        st.info("Aucune pi√®ce vers√©e")

# ================== TAB 6: AZURE BLOB ==================

with tabs[5]:
    st.header("‚òÅÔ∏è Azure Blob Storage")
    
    if not doc_manager.azure_blob_manager.blob_service_client:
        st.warning("‚ö†Ô∏è Azure Blob Storage non configur√©. Ajoutez AZURE_STORAGE_CONNECTION_STRING dans le fichier .env")
    else:
        col1_blob, col2_blob = st.columns([1, 2])
        
        with col1_blob:
            st.subheader("üìÅ Navigation")
            
            # S√©lection du container
            containers = doc_manager.azure_blob_manager.list_containers()
            
            if containers:
                selected_container = st.selectbox(
                    "Container",
                    containers,
                    key="azure_container"
                )
                
                # Navigation dans les dossiers
                if 'azure_current_path' not in st.session_state:
                    st.session_state.azure_current_path = ""
                
                # Afficher le chemin actuel
                if st.session_state.azure_current_path:
                    st.caption(f"üìç {st.session_state.azure_current_path}")
                    
                    # Bouton retour
                    if st.button("‚¨ÜÔ∏è Dossier parent"):
                        parts = st.session_state.azure_current_path.rstrip('/').split('/')
                        if len(parts) > 1:
                            st.session_state.azure_current_path = '/'.join(parts[:-1]) + '/'
                        else:
                            st.session_state.azure_current_path = ""
                        st.rerun()
                
                # Lister le contenu
                items = doc_manager.azure_blob_manager.list_folders(
                    selected_container,
                    st.session_state.azure_current_path
                )
                
                if items:
                    st.write("**Contenu :**")
                    
                    # Afficher les dossiers et fichiers
                    for item in items:
                        if item['type'] == 'folder':
                            if st.button(f"üìÅ {item['name']}", key=f"folder_{item['path']}"):
                                st.session_state.azure_current_path = item['path']
                                st.rerun()
                        else:
                            # Afficher les fichiers
                            file_size = item['size'] / 1024  # Ko
                            if file_size > 1024:
                                file_size = f"{file_size/1024:.1f} Mo"
                            else:
                                file_size = f"{file_size:.1f} Ko"
                            
                            st.caption(f"üìÑ {item['name']} ({file_size})")
                
                # Options d'extraction
                st.divider()
                
                recursive = st.checkbox("üîÑ Inclure les sous-dossiers", value=True)
                
                if st.button("üì• Extraire les documents", type="primary"):
                    if st.session_state.azure_current_path:
                        with st.spinner("Extraction en cours..."):
                            documents = doc_manager.azure_blob_manager.extract_folder_documents(
                                selected_container,
                                st.session_state.azure_current_path,
                                recursive=recursive
                            )
                            
                            if documents:
                                # Ajouter aux documents locaux
                                for doc in documents:
                                    doc_manager.local_documents[doc.id] = doc
                                    st.session_state.docs_for_analysis.append(doc)
                                
                                st.session_state.azure_documents = documents
                                st.success(f"‚úÖ {len(documents)} documents extraits")
                            else:
                                st.warning("Aucun document trouv√©")
                    else:
                        st.error("S√©lectionnez un dossier")
            else:
                st.error("Aucun container Azure trouv√©")
        
        with col2_blob:
            st.subheader("üìÑ Documents extraits")
            
            if st.session_state.get('azure_documents'):
                documents = st.session_state.azure_documents
                
                # Statistiques
                col_stat1, col_stat2, col_stat3 = st.columns(3)
                
                with col_stat1:
                    st.metric("Documents", len(documents))
                
                with col_stat2:
                    total_size = sum(doc.metadata.get('size', 0) for doc in documents)
                    st.metric("Taille totale", f"{total_size/1024/1024:.1f} Mo")
                
                with col_stat3:
                    folders = set(doc.folder_path for doc in documents)
                    st.metric("Dossiers", len(folders))
                
                # Options d'action
                st.divider()
                
                action = st.radio(
                    "Action sur les documents",
                    ["üìã Afficher", "ü§ñ Analyser avec IA", "üìé Verser aux d√©bats"]
                )
                
                if action == "üìã Afficher":
                    # Liste des documents
                    for doc in documents[:10]:  # Limiter l'affichage
                        with st.expander(f"üìÑ {doc.title}"):
                            st.write(f"**Chemin :** {doc.metadata.get('blob_path', '')}")
                            st.write(f"**Taille :** {doc.metadata.get('size', 0)/1024:.1f} Ko")
                            st.write("**Extrait :**")
                            st.text(doc.content[:500] + "...")
                
                elif action == "ü§ñ Analyser avec IA":
                    # Analyse group√©e avec IA
                    st.write("**Analyse par IA**")
                    
                    # Contexte des documents
                    doc_context = f"J'ai {len(documents)} documents du dossier Azure '{st.session_state.azure_current_path}'"
                    doc_list = "\n".join([f"- {doc.title}" for doc in documents[:10]])
                    if len(documents) > 10:
                        doc_list += f"\n... et {len(documents)-10} autres documents"
                    
                    st.info(doc_context)
                    st.caption("Documents :")
                    st.text(doc_list)
                    
                    # Question pour l'IA
                    question = st.text_area(
                        "Question pour l'IA sur ces documents",
                        placeholder="Ex: Quelle est la strat√©gie de d√©fense principale qui ressort de ces documents ?",
                        height=100
                    )
                    
                    if st.button("ü§ñ Analyser", type="primary"):
                        if question and gestionnaire.llm_manager:
                            # Construire le contexte complet
                            full_context = f"{doc_context}\n\nContenu des documents principaux :\n"
                            
                            # Ajouter le contenu des documents (limit√©)
                            for i, doc in enumerate(documents[:5]):  # Max 5 documents
                                full_context += f"\n--- Document {i+1}: {doc.title} ---\n"
                                full_context += doc.content[:2000] + "...\n"
                            
                            full_prompt = f"Contexte : {full_context}\n\nQuestion : {question}"
                            
                            with st.spinner("Analyse en cours..."):
                                # Utiliser le premier LLM disponible
                                available_llms = list(gestionnaire.llm_manager.clients.keys())
                                if available_llms:
                                    loop = asyncio.new_event_loop()
                                    asyncio.set_event_loop(loop)
                                    
                                    result = loop.run_until_complete(
                                        gestionnaire.llm_manager.query_single_llm(
                                            available_llms[0],
                                            full_prompt,
                                            "Tu es un avocat expert analysant des documents juridiques."
                                        )
                                    )
                                    
                                    if result['success']:
                                        st.success("‚úÖ Analyse termin√©e")
                                        st.markdown("**R√©ponse de l'IA :**")
                                        st.markdown(result['response'])
                                        
                                        # Option de sauvegarder
                                        if st.button("üìé Verser cette analyse aux d√©bats"):
                                            num = gestionnaire.gestionnaire_pieces.verser_piece(
                                                titre=f"Analyse IA - Dossier Azure {st.session_state.azure_current_path}",
                                                contenu=result['response'],
                                                type_piece='rapport',
                                                dossier_id=st.session_state.dossier_actif
                                            )
                                            st.success(f"‚úÖ Pi√®ce n¬∞{num}")
                                    else:
                                        st.error(f"Erreur : {result.get('error')}")
                        else:
                            st.error("Entrez une question et v√©rifiez la configuration des LLMs")
                
                elif action == "üìé Verser aux d√©bats":
                    # Verser tous les documents
                    if st.button("üìé Verser tous les documents", type="primary"):
                        versed_count = 0
                        
                        with st.spinner("Versement en cours..."):
                            for doc in documents:
                                num = gestionnaire.gestionnaire_pieces.verser_piece(
                                    titre=doc.title,
                                    contenu=doc.content,
                                    type_piece='document',
                                    dossier_id=st.session_state.dossier_actif,
                                    metadata={
                                        'source': 'azure_blob',
                                        'container': doc.metadata.get('container'),
                                        'path': doc.metadata.get('blob_path')
                                    }
                                )
                                versed_count += 1
                        
                        st.success(f"‚úÖ {versed_count} documents vers√©s aux d√©bats")
                
                # Export des documents
                st.divider()
                
                if st.button("üíæ Exporter en ZIP"):
                    import zipfile
                    import io
                    
                    zip_buffer = io.BytesIO()
                    
                    with zipfile.ZipFile(zip_buffer, 'w') as zip_file:
                        for doc in documents:
                            # Cr√©er l'arborescence dans le ZIP
                            file_path = doc.metadata.get('blob_path', doc.title)
                            zip_file.writestr(file_path, doc.content)
                    
                    zip_buffer.seek(0)
                    
                    st.download_button(
                        "üíæ T√©l√©charger ZIP",
                        zip_buffer.getvalue(),
                        f"azure_documents_{datetime.now().strftime(AppConfig.EXPORT_FORMAT)}.zip",
                        "application/zip"
                    )
            else:
                st.info("S√©lectionnez un dossier Azure pour extraire les documents")
                
                # Guide d'utilisation
                with st.expander("üìñ Guide d'utilisation"):
                    st.markdown("""
                    ### Comment utiliser Azure Blob Storage
                    
                    1. **Configuration** : Ajoutez votre cha√Æne de connexion Azure dans le fichier `.env` :
                       ```
                       AZURE_STORAGE_CONNECTION_STRING=DefaultEndpointsProtocol=https;AccountName=...
                       ```
                    
                    2. **Navigation** : 
                       - S√©lectionnez un container
                       - Cliquez sur les dossiers pour naviguer
                       - Utilisez "Dossier parent" pour remonter
                    
                    3. **Extraction** :
                       - S√©lectionnez un dossier
                       - Choisissez d'inclure ou non les sous-dossiers
                       - Cliquez sur "Extraire les documents"
                    
                    4. **Analyse IA** :
                       - Les documents extraits peuvent √™tre analys√©s par l'IA
                       - Posez des questions sur l'ensemble des documents
                       - L'IA synth√©tisera les informations pertinentes
                    
                    5. **Formats support√©s** :
                       - `.txt` : Texte brut
                       - `.docx` / `.doc` : Documents Word
                       - `.pdf` : Documents PDF (n√©cessite PyPDF2)
                       - `.rtf` : Rich Text Format
                    """)

# ================== TAB 7: CONFIGURATION ==================

with tabs[6]:
    st.header("‚öôÔ∏è Configuration")
    
    st.subheader("üé® En-t√™te personnalis√©")
    
    with st.form("config_letterhead"):
        nom = st.text_input("Nom du cabinet")
        adresse = st.text_area("Adresse", height=100)
        telephone = st.text_input("T√©l√©phone")
        email = st.text_input("Email")
        barreau = st.text_input("Barreau")
        
        if st.form_submit_button("üíæ Sauvegarder"):
            st.session_state.letterhead = {
                'nom': nom,
                'adresse': adresse,
                'telephone': telephone,
                'email': email,
                'barreau': barreau
            }
            exporter.letterhead = st.session_state.letterhead
            st.success("‚úÖ Configuration sauvegard√©e")

# ================== SIDEBAR ==================

with st.sidebar:
    st.markdown("## üíº Assistant P√©nal des Affaires")
    st.caption("Version compl√®te avec Multi-LLM v3.0")
    
    st.divider()
    
    # Dossier actif
    if st.session_state.dossier_actif:
        dossier = st.session_state.dossiers.get(st.session_state.dossier_actif)
        if dossier:
            st.success(f"üìÇ {dossier.numero_parquet}")
            st.caption(f"{dossier.client_nom}")
            
            if dossier.client_type == "PM":
                st.caption(f"{dossier.client_info.get('forme_juridique', 'PM')}")
            
            # M√©triques
            if dossier.montant_prejudice:
                st.metric("Enjeux", f"{dossier.montant_prejudice:,.0f}‚Ç¨")
            
            # Prescription
            prescription = dossier.calculer_prescription()
            if not prescription['prescrit']:
                st.metric("Prescription", f"{prescription['jours_restants']}j")
            
            # Victimes
            if dossier.victimes:
                st.metric("Victimes", len(dossier.victimes))
    else:
        st.info("Aucun dossier s√©lectionn√©")
    
    st.divider()
    
    # Actions rapides
    st.subheader("‚ö° Actions rapides")
    
    if st.button("üìã Bordereau", use_container_width=True):
        if gestionnaire.gestionnaire_pieces.pieces:
            st.text_area(
                "Bordereau",
                gestionnaire.gestionnaire_pieces.generer_bordereau()[:200] + "...",
                height=150
            )
    
    if st.button("üîç Recherche ABS", use_container_width=True):
        st.session_state.search_query = "abus biens sociaux √©l√©ment intentionnel"
    
    if st.button("üìÑ Mod√®le CJIP", use_container_width=True):
        st.session_state.document_content = gestionnaire.assistant_redaction.templates['memoire_cjip']['contenu']
    
    if st.button("ü§ñ Test Multi-LLM", use_container_width=True):
        st.session_state.selected_tab = 2  # Tab IA
    
    if doc_manager.azure_blob_manager.blob_service_client:
        if st.button("‚òÅÔ∏è Azure Blob", use_container_width=True):
            st.session_state.selected_tab = 5  # Tab Azure
    
    # Footer
    st.divider()
    st.caption("üíº Assistant P√©nal Affaires v3.0")
    st.caption("‚ú® Multi-LLM & Multi-Victimes")
    st.caption("‚òÅÔ∏è Azure Blob Storage")
    st.caption(f"¬© {datetime.now().year}")

# ================== MAIN ==================

if __name__ == "__main__":
    logger.info("Application Assistant P√©nal des Affaires d√©marr√©e")
