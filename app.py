import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import plotly.express as px
import plotly.graph_objects as go
import streamlit.components.v1 as components
import time
import json

# Configuration de la page
st.set_page_config(
    page_title="IA Juridique Pro",
    page_icon="‚öñÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configuration des IA disponibles
AVAILABLE_AIS = {
    "GPT-4": {"icon": "ü§ñ", "description": "Analyse approfondie et r√©daction complexe"},
    "Claude 3": {"icon": "üß†", "description": "Cr√©ativit√© et argumentation nuanc√©e"},
    "Gemini Pro": {"icon": "‚ú®", "description": "Recherche exhaustive et synth√®se"},
    "LLaMA 3": {"icon": "ü¶ô", "description": "Analyse technique et pr√©cision"},
    "Mistral": {"icon": "üåü", "description": "Rapidit√© et concision"}
}

# Fonction CSS am√©lior√©e
def load_custom_css():
    st.markdown("""
    <style>
    /* Variables CSS pour les couleurs */
    :root {
        --primary-color: #2c3e50;
        --secondary-color: #34495e;
        --accent-color: #3498db;
        --success-color: #27ae60;
        --warning-color: #f39c12;
        --danger-color: #e74c3c;
        --text-primary: #2c3e50;
        --text-secondary: #7f8c8d;
        --border-color: #bdc3c7;
        --hover-color: #ecf0f1;
        --background-light: #f8f9fa;
        --ai-selected: #3498db;
        --ai-hover: #2980b9;
    }
    
    /* Typography */
    h1 { font-size: 1.8rem !important; color: var(--text-primary); margin-bottom: 0.5rem !important; }
    h2 { font-size: 1.5rem !important; color: var(--text-primary); margin-bottom: 0.5rem !important; }
    h3 { font-size: 1.3rem !important; color: var(--text-primary); margin-bottom: 0.5rem !important; }
    h4 { font-size: 1.15rem !important; color: var(--text-primary); margin-bottom: 0.5rem !important; }
    h5 { font-size: 1.05rem !important; color: var(--text-primary); margin-bottom: 0.5rem !important; }
    
    /* Layout optimization */
    .block-container {
        padding-top: 1rem !important;
        max-width: 1400px !important;
    }
    
    .element-container {
        margin-bottom: 0.5rem !important;
    }
    
    /* AI Selector Card */
    .ai-selector-card {
        background: white;
        border: 2px solid var(--border-color);
        border-radius: 8px;
        padding: 15px;
        margin: 8px 0;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .ai-selector-card:hover {
        border-color: var(--ai-hover);
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    .ai-selector-card.selected {
        border-color: var(--ai-selected);
        background: rgba(52, 152, 219, 0.05);
        box-shadow: 0 2px 8px rgba(52, 152, 219, 0.2);
    }
    
    /* Module Cards */
    .module-card {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
        border: 1px solid var(--border-color);
        height: 100%;
        display: flex;
        flex-direction: column;
    }
    
    .module-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 20px rgba(0,0,0,0.12);
        border-color: var(--accent-color);
    }
    
    .module-icon {
        font-size: 2.5rem;
        margin-bottom: 10px;
    }
    
    .module-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 8px;
    }
    
    .module-description {
        font-size: 0.85rem;
        color: var(--text-secondary);
        margin-bottom: 15px;
        flex-grow: 1;
    }
    
    .module-features {
        font-size: 0.8rem;
        color: var(--text-secondary);
        border-top: 1px solid var(--border-color);
        padding-top: 10px;
        margin-top: auto;
    }
    
    /* Search Bar Enhanced */
    .search-container {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 12px rgba(0,0,0,0.08);
        padding: 25px;
        margin: 20px 0;
        border: 1px solid var(--border-color);
    }
    
    .search-container:hover {
        border-color: var(--accent-color);
    }
    
    /* Feature Tags */
    .feature-tag {
        display: inline-block;
        padding: 4px 10px;
        margin: 2px;
        background: var(--hover-color);
        border-radius: 15px;
        font-size: 0.75rem;
        color: var(--text-primary);
        border: 1px solid var(--border-color);
    }
    
    /* Buttons */
    .stButton > button {
        background: var(--accent-color);
        color: white;
        border: none;
        border-radius: 6px;
        padding: 8px 20px;
        font-weight: 500;
        transition: all 0.2s ease;
    }
    
    .stButton > button:hover {
        background: var(--ai-hover);
        transform: translateY(-1px);
    }
    
    /* Sidebar enhancement */
    .css-1d391kg {
        background: var(--background-light);
    }
    
    [data-testid="stSidebar"] {
        background: var(--background-light);
    }
    
    /* Response mode selector */
    .response-mode {
        background: white;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        padding: 15px;
        margin: 10px 0;
    }
    
    /* Quick action buttons */
    .quick-action {
        background: white;
        border: 1px solid var(--border-color);
        border-radius: 6px;
        padding: 10px 15px;
        margin: 5px;
        cursor: pointer;
        transition: all 0.2s ease;
        text-align: center;
    }
    
    .quick-action:hover {
        border-color: var(--accent-color);
        background: var(--hover-color);
    }
    
    /* AI Response Container */
    .ai-response-container {
        background: white;
        border-radius: 10px;
        padding: 20px;
        margin: 10px 0;
        border: 1px solid var(--border-color);
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }
    
    .ai-response-header {
        display: flex;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid var(--border-color);
    }
    
    /* Fusion mode indicator */
    .fusion-indicator {
        background: linear-gradient(45deg, #3498db, #9b59b6);
        color: white;
        padding: 8px 15px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }
    
    /* Module navigation */
    .module-nav-item {
        padding: 10px 15px;
        margin: 3px 0;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .module-nav-item:hover {
        background: var(--hover-color);
        padding-left: 20px;
    }
    
    .module-nav-item.active {
        background: var(--accent-color);
        color: white;
    }
    
    /* Responsive */
    @media (max-width: 768px) {
        .module-card {
            margin-bottom: 15px;
        }
        
        .search-container {
            padding: 15px;
        }
    }
    </style>
    """, unsafe_allow_html=True)

# √âtat global de l'application
def init_session_state():
    """Initialise les variables de session"""
    if 'selected_ais' not in st.session_state:
        st.session_state.selected_ais = []
    if 'response_mode' not in st.session_state:
        st.session_state.response_mode = 'fusion'
    if 'current_module' not in st.session_state:
        st.session_state.current_module = 'accueil'
    if 'azure_blob_docs' not in st.session_state:
        # Simulation de donn√©es Azure Blob
        st.session_state.azure_blob_docs = 1247
        st.session_state.azure_blob_dossiers = 89
    if 'ai_responses' not in st.session_state:
        st.session_state.ai_responses = {}

# S√©lecteur d'IA am√©lior√©
def create_ai_selector():
    """Interface de s√©lection des IA avec fusion des r√©ponses"""
    st.markdown("### ü§ñ S√©lection des IA")
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        # S√©lection multiple des IA
        selected = st.multiselect(
            "Choisissez une ou plusieurs IA",
            options=list(AVAILABLE_AIS.keys()),
            default=st.session_state.selected_ais,
            help="S√©lectionnez plusieurs IA pour comparer ou fusionner leurs r√©ponses"
        )
        st.session_state.selected_ais = selected
        
        # Affichage des IA s√©lectionn√©es
        if selected:
            cols = st.columns(len(selected))
            for idx, ai in enumerate(selected):
                with cols[idx]:
                    st.markdown(f"""
                    <div class="ai-selector-card selected">
                        <div style="text-align: center;">
                            <div style="font-size: 2rem;">{AVAILABLE_AIS[ai]['icon']}</div>
                            <div style="font-weight: 600; margin: 5px 0;">{ai}</div>
                            <div style="font-size: 0.75rem; color: var(--text-secondary);">
                                {AVAILABLE_AIS[ai]['description']}
                            </div>
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
    
    with col2:
        # Mode de r√©ponse
        st.markdown("**Mode de r√©ponse**")
        mode = st.radio(
            "Mode",
            ["fusion", "comparaison", "synth√®se"],
            format_func=lambda x: {
                "fusion": "üîÑ Fusion compl√®te",
                "comparaison": "üìä Comparaison",
                "synth√®se": "üìù Synth√®se"
            }[x],
            key="response_mode_selector",
            label_visibility="collapsed"
        )
        st.session_state.response_mode = mode
        
        # Explication du mode
        mode_explanations = {
            "fusion": "Combine toutes les r√©ponses pour maximiser les d√©tails",
            "comparaison": "Affiche les r√©ponses c√¥te √† c√¥te",
            "synth√®se": "Cr√©e une synth√®se concise des points cl√©s"
        }
        st.caption(mode_explanations[mode])

# Barre de navigation lat√©rale am√©lior√©e
def create_sidebar():
    """Sidebar avec tous les modules et fonctionnalit√©s"""
    with st.sidebar:
        # Header
        st.markdown("""
        <div style="text-align: center; padding: 15px; background: var(--accent-color); 
                    margin: -35px -35px 20px -35px; border-radius: 0 0 10px 10px;">
            <h2 style="color: white; margin: 0; font-size: 1.3em;">‚öñÔ∏è IA Juridique Pro</h2>
            <p style="color: rgba(255,255,255,0.9); margin: 5px 0 0 0; font-size: 0.8em;">
                Assistant Juridique Intelligent
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Modules principaux
        st.markdown("#### üìö Modules principaux")
        
        modules = {
            "accueil": {"icon": "üè†", "label": "Accueil & Recherche"},
            "redaction": {"icon": "‚úçÔ∏è", "label": "R√©daction IA"},
            "recherche_juridique": {"icon": "‚öñÔ∏è", "label": "Recherche juridique"},
            "analyse": {"icon": "üîç", "label": "Analyse documents"},
            "preparation_client": {"icon": "üëî", "label": "Pr√©paration client"},
            "plaidoirie": {"icon": "üéØ", "label": "Plaidoirie IA"},
            "conclusions": {"icon": "üìã", "label": "Conclusions"},
            "assignation": {"icon": "üìú", "label": "Assignations"},
            "contrats": {"icon": "üìÑ", "label": "Contrats"},
            "consultations": {"icon": "üí¨", "label": "Consultations"},
            "courriers": {"icon": "‚úâÔ∏è", "label": "Courriers"},
            "veille": {"icon": "üì∞", "label": "Veille juridique"}
        }
        
        for key, module in modules.items():
            if st.button(
                f"{module['icon']} {module['label']}", 
                key=f"nav_{key}",
                use_container_width=True,
                type="primary" if st.session_state.current_module == key else "secondary"
            ):
                st.session_state.current_module = key
                st.rerun()
        
        st.markdown("---")
        
        # Outils sp√©cialis√©s
        st.markdown("#### üõ†Ô∏è Outils sp√©cialis√©s")
        
        tools = {
            "timeline": {"icon": "üìÖ", "label": "Timeline affaire"},
            "calculs": {"icon": "üßÆ", "label": "Calculs juridiques"},
            "modeles": {"icon": "üìë", "label": "Mod√®les documents"},
            "citations": {"icon": "üìñ", "label": "Gestionnaire citations"},
            "agenda": {"icon": "üìÜ", "label": "Agenda proc√©dures"},
            "tarification": {"icon": "üí∞", "label": "Calcul honoraires"}
        }
        
        for key, tool in tools.items():
            if st.button(
                f"{tool['icon']} {tool['label']}", 
                key=f"tool_{key}",
                use_container_width=True
            ):
                st.session_state.current_module = key
                st.rerun()
        
        st.markdown("---")
        
        # Gestion & Administration
        st.markdown("#### ‚öôÔ∏è Gestion")
        
        admin_modules = {
            "documents": {"icon": "üìÅ", "label": "Documents"},
            "clients": {"icon": "üë•", "label": "Clients"},
            "dossiers": {"icon": "üóÇÔ∏è", "label": "Dossiers"},
            "facturation": {"icon": "üßæ", "label": "Facturation"},
            "statistiques": {"icon": "üìä", "label": "Statistiques"},
            "parametres": {"icon": "‚öôÔ∏è", "label": "Param√®tres"}
        }
        
        for key, admin in admin_modules.items():
            if st.button(
                f"{admin['icon']} {admin['label']}", 
                key=f"admin_{key}",
                use_container_width=True
            ):
                st.session_state.current_module = key
                st.rerun()
        
        st.markdown("---")
        
        # Statistiques Azure Blob
        st.markdown("#### üìä Ressources")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Documents", f"{st.session_state.azure_blob_docs:,}", "Azure")
        with col2:
            st.metric("Dossiers", st.session_state.azure_blob_dossiers, "Actifs")

# Page d'accueil avec toutes les fonctionnalit√©s
def show_accueil():
    """Page d'accueil montrant toutes les fonctionnalit√©s"""
    
    # Header compact
    st.markdown("""
    <h1 style="text-align: center; margin-bottom: 10px;">‚öñÔ∏è IA Juridique Pro</h1>
    <p style="text-align: center; color: var(--text-secondary); margin-bottom: 20px;">
        Votre assistant juridique intelligent multi-IA
    </p>
    """, unsafe_allow_html=True)
    
    # S√©lecteur d'IA en haut
    create_ai_selector()
    
    st.markdown("---")
    
    # Barre de recherche intelligente
    st.markdown("### üîç Recherche intelligente")
    search_query = st.text_area(
        "Posez votre question ou d√©crivez votre besoin",
        placeholder="Exemples :\n‚Ä¢ Comment r√©diger des conclusions pour un divorce ?\n‚Ä¢ Jurisprudence sur la responsabilit√© m√©dicale\n‚Ä¢ Pr√©parer mon client pour l'audience de demain\n‚Ä¢ @Martin (recherche de dossier)",
        height=80,
        key="main_search"
    )
    
    col1, col2, col3 = st.columns([2, 2, 1])
    with col1:
        search_type = st.selectbox(
            "Type de recherche",
            ["Tout", "Jurisprudence", "Doctrine", "Dossiers", "Documents", "Mod√®les"]
        )
    with col2:
        if st.session_state.selected_ais:
            if st.button("üöÄ Lancer la recherche IA", type="primary", use_container_width=True):
                if search_query:
                    process_ai_search(search_query, search_type)
        else:
            st.warning("S√©lectionnez au moins une IA")
    
    st.markdown("---")
    
    # Grille des fonctionnalit√©s principales
    st.markdown("### üéØ Fonctionnalit√©s principales")
    
    # Premi√®re ligne de fonctionnalit√©s
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("""
        <div class="module-card">
            <div class="module-icon">‚úçÔ∏è</div>
            <div class="module-title">R√©daction IA</div>
            <div class="module-description">
                G√©n√©rez tous vos documents juridiques avec l'IA
            </div>
            <div class="module-features">
                <span class="feature-tag">Conclusions</span>
                <span class="feature-tag">Assignations</span>
                <span class="feature-tag">Contrats</span>
                <span class="feature-tag">Courriers</span>
            </div>
        </div>
        """, unsafe_allow_html=True)
        if st.button("Acc√©der", key="btn_redaction", use_container_width=True):
            st.session_state.current_module = "redaction"
            st.rerun()
    
    with col2:
        st.markdown("""
        <div class="module-card">
            <div class="module-icon">‚öñÔ∏è</div>
            <div class="module-title">Recherche Juridique</div>
            <div class="module-description">
                Acc√®s complet √† la jurisprudence et doctrine
            </div>
            <div class="module-features">
                <span class="feature-tag">Cassation</span>
                <span class="feature-tag">CE</span>
                <span class="feature-tag">CA</span>
                <span class="feature-tag">Doctrine</span>
            </div>
        </div>
        """, unsafe_allow_html=True)
        if st.button("Acc√©der", key="btn_recherche", use_container_width=True):
            st.session_state.current_module = "recherche_juridique"
            st.rerun()
    
    with col3:
        st.markdown("""
        <div class="module-card">
            <div class="module-icon">üëî</div>
            <div class="module-title">Pr√©paration Client</div>
            <div class="module-description">
                Pr√©parez efficacement vos clients aux audiences
            </div>
            <div class="module-features">
                <span class="feature-tag">Questions</span>
                <span class="feature-tag">R√©ponses</span>
                <span class="feature-tag">Strat√©gie</span>
                <span class="feature-tag">Simulation</span>
            </div>
        </div>
        """, unsafe_allow_html=True)
        if st.button("Acc√©der", key="btn_preparation", use_container_width=True):
            st.session_state.current_module = "preparation_client"
            st.rerun()
    
    with col4:
        st.markdown("""
        <div class="module-card">
            <div class="module-icon">üîç</div>
            <div class="module-title">Analyse Documents</div>
            <div class="module-description">
                Analysez et synth√©tisez vos documents juridiques
            </div>
            <div class="module-features">
                <span class="feature-tag">Risques</span>
                <span class="feature-tag">Points cl√©s</span>
                <span class="feature-tag">Timeline</span>
                <span class="feature-tag">Synth√®se</span>
            </div>
        </div>
        """, unsafe_allow_html=True)
        if st.button("Acc√©der", key="btn_analyse", use_container_width=True):
            st.session_state.current_module = "analyse"
            st.rerun()
    
    # Deuxi√®me ligne
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("""
        <div class="module-card">
            <div class="module-icon">üéØ</div>
            <div class="module-title">Plaidoirie IA</div>
            <div class="module-description">
                Cr√©ez des plaidoiries percutantes et structur√©es
            </div>
            <div class="module-features">
                <span class="feature-tag">Structure</span>
                <span class="feature-tag">Arguments</span>
                <span class="feature-tag">Rh√©torique</span>
            </div>
        </div>
        """, unsafe_allow_html=True)
        if st.button("Acc√©der", key="btn_plaidoirie", use_container_width=True):
            st.session_state.current_module = "plaidoirie"
            st.rerun()
    
    with col2:
        st.markdown("""
        <div class="module-card">
            <div class="module-icon">üì∞</div>
            <div class="module-title">Veille Juridique</div>
            <div class="module-description">
                Restez inform√© des derni√®res actualit√©s juridiques
            </div>
            <div class="module-features">
                <span class="feature-tag">Alertes</span>
                <span class="feature-tag">Actualit√©s</span>
                <span class="feature-tag">R√©formes</span>
            </div>
        </div>
        """, unsafe_allow_html=True)
        if st.button("Acc√©der", key="btn_veille", use_container_width=True):
            st.session_state.current_module = "veille"
            st.rerun()
    
    with col3:
        st.markdown("""
        <div class="module-card">
            <div class="module-icon">üßÆ</div>
            <div class="module-title">Calculs Juridiques</div>
            <div class="module-description">
                Calculez int√©r√™ts, indemnit√©s et prestations
            </div>
            <div class="module-features">
                <span class="feature-tag">Int√©r√™ts</span>
                <span class="feature-tag">Art. 700</span>
                <span class="feature-tag">Indemnit√©s</span>
            </div>
        </div>
        """, unsafe_allow_html=True)
        if st.button("Acc√©der", key="btn_calculs", use_container_width=True):
            st.session_state.current_module = "calculs"
            st.rerun()
    
    with col4:
        st.markdown("""
        <div class="module-card">
            <div class="module-icon">üìÖ</div>
            <div class="module-title">Timeline & Agenda</div>
            <div class="module-description">
                G√©rez vos d√©lais et √©ch√©ances proc√©durales
            </div>
            <div class="module-features">
                <span class="feature-tag">D√©lais</span>
                <span class="feature-tag">Audiences</span>
                <span class="feature-tag">Rappels</span>
            </div>
        </div>
        """, unsafe_allow_html=True)
        if st.button("Acc√©der", key="btn_timeline", use_container_width=True):
            st.session_state.current_module = "timeline"
            st.rerun()
    
    # Actions rapides
    st.markdown("---")
    st.markdown("### ‚ö° Actions rapides")
    
    quick_cols = st.columns(6)
    quick_actions = [
        ("üìù Nouvelle conclusion", "conclusions"),
        ("üìú Nouvelle assignation", "assignation"),
        ("üìÑ Nouveau contrat", "contrats"),
        ("üîç Analyser document", "analyse"),
        ("üë• Nouveau client", "clients"),
        ("üìÅ Nouveau dossier", "dossiers")
    ]
    
    for idx, (label, module) in enumerate(quick_actions):
        with quick_cols[idx]:
            if st.button(label, key=f"quick_{module}", use_container_width=True):
                st.session_state.current_module = module
                st.rerun()

# Fonction de traitement des recherches IA
def process_ai_search(query, search_type):
    """Traite les recherches avec les IA s√©lectionn√©es"""
    
    if not st.session_state.selected_ais:
        st.warning("Veuillez s√©lectionner au moins une IA")
        return
    
    # Container pour les r√©ponses
    response_container = st.container()
    
    with response_container:
        st.markdown("### ü§ñ R√©ponses des IA")
        
        # Mode fusion
        if st.session_state.response_mode == "fusion":
            with st.spinner(f"Interrogation de {len(st.session_state.selected_ais)} IA et fusion des r√©ponses..."):
                time.sleep(2)  # Simulation
                
            st.markdown(f"""
            <div class="ai-response-container">
                <div class="ai-response-header">
                    <div class="fusion-indicator">
                        üîÑ R√©ponse fusionn√©e de {len(st.session_state.selected_ais)} IA
                    </div>
                </div>
                <div style="margin-top: 15px;">
                    <h5>Analyse compl√®te sur : "{query}"</h5>
                    <p>Voici la synth√®se enrichie combinant les analyses de {', '.join(st.session_state.selected_ais)} :</p>
                    
                    <h6>1. Points juridiques essentiels</h6>
                    <ul>
                        <li><strong>Fondement juridique principal :</strong> Article 1240 du Code civil (responsabilit√© d√©lictuelle)</li>
                        <li><strong>Jurisprudence consolid√©e :</strong> Cass. Civ. 2e, 10 mai 2023 √©tablit le principe...</li>
                        <li><strong>Doctrine majoritaire :</strong> Selon Terr√© et Simler, la notion s'√©tend...</li>
                    </ul>
                    
                    <h6>2. Argumentation d√©taill√©e</h6>
                    <p>L'ensemble des IA convergent sur les arguments suivants, enrichis de leurs perspectives uniques...</p>
                    
                    <h6>3. Strat√©gie recommand√©e</h6>
                    <p>Approche en trois temps recommand√©e par consensus des IA...</p>
                    
                    <h6>4. Points d'attention</h6>
                    <ul>
                        <li>D√©lai de prescription : attention particuli√®re requise</li>
                        <li>Charge de la preuve : √©l√©ments n√©cessaires identifi√©s</li>
                        <li>Risques proc√©duraux : anticipation recommand√©e</li>
                    </ul>
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        # Mode comparaison
        elif st.session_state.response_mode == "comparaison":
            cols = st.columns(len(st.session_state.selected_ais))
            
            for idx, ai in enumerate(st.session_state.selected_ais):
                with cols[idx]:
                    with st.spinner(f"Interrogation de {ai}..."):
                        time.sleep(1)
                    
                    st.markdown(f"""
                    <div class="ai-response-container">
                        <div style="text-align: center; margin-bottom: 10px;">
                            <span style="font-size: 2rem;">{AVAILABLE_AIS[ai]['icon']}</span>
                            <h5>{ai}</h5>
                        </div>
                        <div style="font-size: 0.9em;">
                            <p><strong>Analyse :</strong> Perspective unique de {ai} sur la question...</p>
                            <p><strong>Points cl√©s :</strong></p>
                            <ul style="font-size: 0.85em;">
                                <li>Point sp√©cifique 1</li>
                                <li>Point sp√©cifique 2</li>
                            </ul>
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
        
        # Mode synth√®se
        else:  # synth√®se
            with st.spinner("Cr√©ation de la synth√®se concise..."):
                time.sleep(1.5)
            
            st.markdown(f"""
            <div class="ai-response-container">
                <div class="ai-response-header">
                    <div class="fusion-indicator">
                        üìù Synth√®se de {len(st.session_state.selected_ais)} IA
                    </div>
                </div>
                <div style="margin-top: 15px;">
                    <h5>Synth√®se concise</h5>
                    <div style="background: var(--background-light); padding: 15px; border-radius: 8px;">
                        <p><strong>Conclusion principale :</strong> Les {len(st.session_state.selected_ais)} IA s'accordent sur...</p>
                        <p><strong>Actions recommand√©es :</strong></p>
                        <ol>
                            <li>Action prioritaire 1</li>
                            <li>Action prioritaire 2</li>
                            <li>Action prioritaire 3</li>
                        </ol>
                        <p><strong>D√©lai sugg√©r√© :</strong> 15 jours pour la mise en ≈ìuvre</p>
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)

# Module Pr√©paration Client
def show_preparation_client():
    """Module de pr√©paration du client aux audiences"""
    st.title("üëî Pr√©paration du client")
    
    # S√©lection IA
    create_ai_selector()
    
    st.markdown("---")
    
    # Informations sur l'affaire
    col1, col2 = st.columns(2)
    with col1:
        client_name = st.text_input("Nom du client", placeholder="Ex: M. Martin")
        type_audience = st.selectbox(
            "Type d'audience",
            ["Audience de plaidoirie", "Comparution personnelle", "Expertise", "Conciliation", "R√©f√©r√©"]
        )
    
    with col2:
        date_audience = st.date_input("Date de l'audience")
        juridiction = st.text_input("Juridiction", placeholder="Ex: TGI Paris")
    
    # Description de l'affaire
    st.markdown("#### üìã Contexte de l'affaire")
    contexte = st.text_area(
        "D√©crivez l'affaire et les enjeux",
        height=120,
        placeholder="R√©sumez les faits, les enjeux et les points sensibles..."
    )
    
    # Points √† pr√©parer
    st.markdown("#### üéØ Points sp√©cifiques √† pr√©parer")
    col1, col2 = st.columns(2)
    
    with col1:
        points_forts = st.text_area(
            "Points forts du dossier",
            height=100,
            placeholder="√âl√©ments favorables..."
        )
    
    with col2:
        points_faibles = st.text_area(
            "Points √† renforcer",
            height=100,
            placeholder="√âl√©ments √† expliquer..."
        )
    
    # Options de pr√©paration
    st.markdown("#### ‚öôÔ∏è Type de pr√©paration")
    preparation_options = st.multiselect(
        "S√©lectionnez les √©l√©ments √† pr√©parer",
        [
            "Questions probables du juge",
            "R√©ponses types √† pr√©parer",
            "Comportement et pr√©sentation",
            "Documents √† apporter",
            "Strat√©gie de communication",
            "Simulation d'audience",
            "Points juridiques √† expliquer",
            "Gestion du stress"
        ],
        default=["Questions probables du juge", "R√©ponses types √† pr√©parer"]
    )
    
    # G√©n√©ration
    if st.button("üöÄ G√©n√©rer la pr√©paration", type="primary", use_container_width=True):
        if not st.session_state.selected_ais:
            st.warning("S√©lectionnez au moins une IA")
        else:
            with st.spinner("Pr√©paration en cours avec les IA s√©lectionn√©es..."):
                time.sleep(2)
            
            st.success("‚úÖ Pr√©paration g√©n√©r√©e avec succ√®s !")
            
            # R√©sultats
            st.markdown("### üìã Guide de pr√©paration")
            
            tabs = st.tabs(["Questions/R√©ponses", "Comportement", "Documents", "Strat√©gie", "Simulation"])
            
            with tabs[0]:
                st.markdown("""
                <div class="ai-response-container">
                    <h5>‚ùì Questions probables et r√©ponses sugg√©r√©es</h5>
                    
                    <div style="margin: 15px 0; padding: 15px; background: var(--background-light); border-radius: 8px;">
                        <p><strong>Question 1 :</strong> "Pouvez-vous expliquer les circonstances exactes de..."</p>
                        <p><strong>R√©ponse sugg√©r√©e :</strong> "Oui, Monsieur/Madame le Pr√©sident. Le [date], j'ai..."</p>
                        <p style="color: var(--text-secondary); font-size: 0.85em;"><em>üí° Conseil : Restez factuel et chronologique</em></p>
                    </div>
                    
                    <div style="margin: 15px 0; padding: 15px; background: var(--background-light); border-radius: 8px;">
                        <p><strong>Question 2 :</strong> "Qu'avez-vous fait imm√©diatement apr√®s..."</p>
                        <p><strong>R√©ponse sugg√©r√©e :</strong> "J'ai imm√©diatement contact√©..."</p>
                        <p style="color: var(--text-secondary); font-size: 0.85em;"><em>üí° Conseil : Montrez votre bonne foi</em></p>
                    </div>
                </div>
                """, unsafe_allow_html=True)
            
            with tabs[1]:
                st.markdown("""
                <div class="ai-response-container">
                    <h5>üëî Conseils de comportement et pr√©sentation</h5>
                    
                    <h6>Tenue vestimentaire</h6>
                    <ul>
                        <li>Tenue professionnelle sobre (costume/tailleur)</li>
                        <li>Couleurs neutres recommand√©es</li>
                        <li>√âviter bijoux voyants et parfums forts</li>
                    </ul>
                    
                    <h6>Attitude g√©n√©rale</h6>
                    <ul>
                        <li>Se lever √† l'entr√©e des magistrats</li>
                        <li>S'adresser au juge : "Monsieur/Madame le Pr√©sident"</li>
                        <li>Parler clairement et distinctement</li>
                        <li>Regarder le juge quand vous r√©pondez</li>
                    </ul>
                    
                    <h6>Gestion du stress</h6>
                    <p>Techniques de respiration recommand√©es avant l'audience...</p>
                </div>
                """, unsafe_allow_html=True)

# Module R√©daction IA
def show_redaction():
    """Module de r√©daction avec IA"""
    st.title("‚úçÔ∏è R√©daction juridique IA")
    
    # S√©lection IA
    create_ai_selector()
    
    st.markdown("---")
    
    # Type de document
    doc_type = st.selectbox(
        "Type de document √† r√©diger",
        [
            "Conclusions",
            "Assignation", 
            "Plaidoirie",
            "Contrat",
            "Consultation juridique",
            "Courrier juridique",
            "Note de synth√®se",
            "Requ√™te",
            "Transaction",
            "Mise en demeure"
        ]
    )
    
    # Mod√®les pr√©d√©finis
    if doc_type == "Conclusions":
        modeles = st.selectbox(
            "Mod√®le de conclusions",
            ["Vierge", "Divorce", "Responsabilit√©", "Commercial", "Social", "P√©nal"]
        )
    
    # Informations de base
    st.markdown("#### üìã Informations g√©n√©rales")
    col1, col2 = st.columns(2)
    
    with col1:
        client = st.text_input("Client", placeholder="Nom du client")
        adversaire = st.text_input("Partie adverse", placeholder="Nom de l'adversaire")
    
    with col2:
        juridiction = st.text_input("Juridiction", placeholder="Ex: TGI Paris")
        numero_rg = st.text_input("N¬∞ RG", placeholder="Ex: 24/00123")
    
    # Contenu principal
    st.markdown("#### üìù Contenu")
    
    # Assistant de r√©daction
    use_assistant = st.checkbox("ü§ñ Utiliser l'assistant IA pour structurer")
    
    if use_assistant:
        # Questions guid√©es selon le type
        if doc_type == "Conclusions":
            faits = st.text_area("Expos√© des faits", height=100, 
                               placeholder="D√©crivez les faits de mani√®re chronologique...")
            demandes = st.text_area("Demandes du client", height=80,
                                  placeholder="Que demande votre client ?")
            arguments = st.text_area("Arguments juridiques", height=100,
                                   placeholder="Vos moyens et arguments...")
    else:
        # R√©daction libre
        content = st.text_area("Contenu du document", height=300,
                             placeholder="R√©digez ou collez votre texte ici...")
    
    # Options avanc√©es
    with st.expander("‚öôÔ∏è Options avanc√©es"):
        col1, col2 = st.columns(2)
        with col1:
            tone = st.select_slider(
                "Ton du document",
                options=["Tr√®s formel", "Formel", "Neutre", "Direct"],
                value="Formel"
            )
            longueur = st.slider("Longueur cible (pages)", 1, 50, 5)
        
        with col2:
            inclure_jurisprudence = st.checkbox("Inclure jurisprudence pertinente", value=True)
            inclure_doctrine = st.checkbox("Citer la doctrine")
            verifier_delais = st.checkbox("V√©rifier les d√©lais proc√©duraux", value=True)
    
    # Bouton de g√©n√©ration
    if st.button("üöÄ G√©n√©rer avec l'IA", type="primary", use_container_width=True):
        if not st.session_state.selected_ais:
            st.warning("S√©lectionnez au moins une IA pour la r√©daction")
        else:
            generate_document(doc_type, st.session_state.selected_ais)

def generate_document(doc_type, selected_ais):
    """G√©n√®re le document avec les IA s√©lectionn√©es"""
    
    with st.spinner(f"G√©n√©ration en cours avec {len(selected_ais)} IA..."):
        time.sleep(3)
    
    st.success("‚úÖ Document g√©n√©r√© avec succ√®s !")
    
    # Affichage selon le mode
    if st.session_state.response_mode == "fusion":
        st.markdown(f"""
        <div class="ai-response-container">
            <div class="ai-response-header">
                <div class="fusion-indicator">
                    üîÑ Document fusionn√© - {len(selected_ais)} IA
                </div>
            </div>
            <div style="margin-top: 20px;">
                <h4>CONCLUSIONS POUR MONSIEUR MARTIN</h4>
                <p style="text-align: center; margin: 20px 0;">
                    <strong>DEVANT LE TRIBUNAL DE GRANDE INSTANCE DE PARIS</strong>
                </p>
                
                <h5>PLAISE AU TRIBUNAL</h5>
                
                <h6>I. FAITS ET PROC√âDURE</h6>
                <p>Les IA ont collabor√© pour produire une analyse compl√®te et nuanc√©e des faits...</p>
                
                <h6>II. DISCUSSION</h6>
                <p>A. Sur le fondement juridique</p>
                <p>L'analyse combin√©e des {len(selected_ais)} IA r√©v√®le que...</p>
                
                <h6>III. DEMANDES</h6>
                <p>PAR CES MOTIFS, et tous autres √† produire, d√©duire ou suppl√©er...</p>
            </div>
            
            <div style="margin-top: 20px; padding: 15px; background: var(--background-light); border-radius: 8px;">
                <p><strong>üìä Statistiques de g√©n√©ration :</strong></p>
                <ul style="font-size: 0.9em;">
                    <li>Longueur : 2,847 mots</li>
                    <li>Jurisprudences cit√©es : 12</li>
                    <li>Articles de loi : 8</li>
                    <li>Temps de g√©n√©ration : 3.2s</li>
                </ul>
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    # Actions post-g√©n√©ration
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.download_button("üì• T√©l√©charger Word", data="...", file_name=f"{doc_type}.docx")
    with col2:
        st.download_button("üìÑ T√©l√©charger PDF", data="...", file_name=f"{doc_type}.pdf")
    with col3:
        if st.button("‚úèÔ∏è Modifier"):
            st.info("√âditeur en cours de chargement...")
    with col4:
        if st.button("üìß Envoyer"):
            st.info("Pr√©paration de l'envoi...")

# Module Recherche Juridique
def show_recherche_juridique():
    """Module de recherche juridique avanc√©e"""
    st.title("‚öñÔ∏è Recherche juridique intelligente")
    
    # S√©lection IA pour analyse
    create_ai_selector()
    
    st.markdown("---")
    
    # Barre de recherche principale
    search_query = st.text_input(
        "üîç Recherche",
        placeholder="Ex: responsabilit√© du fait des choses, article 1242, garde juridique...",
        key="juridique_search"
    )
    
    # Filtres avanc√©s
    with st.expander("üîß Filtres avanc√©s", expanded=True):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            sources = st.multiselect(
                "Sources",
                ["Cour de cassation", "Conseil d'√âtat", "Cours d'appel", 
                 "Juridictions du fond", "CJUE", "CEDH", "Doctrine", "Codes"],
                default=["Cour de cassation", "Conseil d'√âtat"]
            )
            
            matieres = st.multiselect(
                "Mati√®res",
                ["Civil", "P√©nal", "Commercial", "Social", "Administratif", 
                 "Fiscal", "Famille", "Immobilier", "Propri√©t√© intellectuelle"]
            )
        
        with col2:
            date_debut = st.date_input("Date d√©but", value=datetime(2020, 1, 1))
            date_fin = st.date_input("Date fin", value=datetime.now())
            
            importance = st.select_slider(
                "Importance",
                options=["Toutes", "Importantes", "Tr√®s importantes", "Principes uniquement"],
                value="Toutes"
            )
        
        with col3:
            recherche_semantique = st.checkbox("Recherche s√©mantique IA", value=True)
            inclure_doctrine = st.checkbox("Inclure la doctrine", value=True)
            recherche_europeenne = st.checkbox("Inclure droit europ√©en")
            
            tri = st.selectbox(
                "Trier par",
                ["Pertinence", "Date ‚Üì", "Date ‚Üë", "Importance"]
            )
    
    # Recherches sugg√©r√©es
    st.markdown("#### üí° Recherches populaires")
    suggested_searches = [
        "Responsabilit√© m√©dicale 2024",
        "Clause abusive consommateur",
        "Licenciement √©conomique proc√©dure",
        "Garde altern√©e crit√®res"
    ]
    
    sug_cols = st.columns(len(suggested_searches))
    for idx, suggestion in enumerate(suggested_searches):
        with sug_cols[idx]:
            if st.button(suggestion, key=f"sug_{idx}", use_container_width=True):
                st.session_state.juridique_search = suggestion
                st.rerun()
    
    # Bouton de recherche
    if st.button("üîç Lancer la recherche", type="primary", use_container_width=True):
        if search_query:
            perform_juridique_search(search_query, sources, st.session_state.selected_ais)

def perform_juridique_search(query, sources, selected_ais):
    """Effectue la recherche juridique avec IA"""
    
    with st.spinner("Recherche en cours dans les bases juridiques..."):
        time.sleep(2)
    
    # R√©sultats
    st.markdown("### üìö R√©sultats de recherche")
    
    # Statistiques
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("Documents trouv√©s", "127")
    with col2:
        st.metric("Arr√™ts de principe", "8")
    with col3:
        st.metric("Articles doctrine", "23")
    with col4:
        st.metric("Score pertinence", "94%")
    
    # Analyse IA si activ√©e
    if selected_ais:
        st.markdown("#### ü§ñ Analyse IA des r√©sultats")
        
        if st.session_state.response_mode == "fusion":
            st.markdown(f"""
            <div class="ai-response-container">
                <div class="ai-response-header">
                    <div class="fusion-indicator">
                        üîÑ Analyse fusionn√©e - {len(selected_ais)} IA
                    </div>
                </div>
                <div style="margin-top: 15px;">
                    <h5>Synth√®se de la jurisprudence sur "{query}"</h5>
                    
                    <h6>üìå Principe d√©gag√©</h6>
                    <p>La jurisprudence constante √©tablit que {query} implique...</p>
                    
                    <h6>üèõÔ∏è Arr√™ts fondamentaux</h6>
                    <ol>
                        <li><strong>Cass. Civ. 2e, 10 mai 2023, n¬∞22-12.345</strong> : Principe de...</li>
                        <li><strong>CE, 15 mars 2023, n¬∞456789</strong> : Application en mati√®re administrative...</li>
                    </ol>
                    
                    <h6>üìà √âvolution jurisprudentielle</h6>
                    <p>On observe une tendance vers...</p>
                    
                    <h6>‚öñÔ∏è Application pratique</h6>
                    <p>Pour votre dossier, cela signifie que...</p>
                </div>
            </div>
            """, unsafe_allow_html=True)
    
    # R√©sultats d√©taill√©s
    st.markdown("#### üìã Documents trouv√©s")
    
    # Tabs par type
    tabs = st.tabs(["üèõÔ∏è Jurisprudence", "üìö Doctrine", "üìñ Codes", "üá™üá∫ Droit europ√©en"])
    
    with tabs[0]:
        for i in range(3):
            st.markdown(f"""
            <div class="ai-response-container" style="margin-bottom: 15px;">
                <div style="display: flex; justify-content: space-between; align-items: start;">
                    <div style="flex-grow: 1;">
                        <h5 style="margin: 0; color: var(--accent-color);">
                            Cass. Civ. 2e, {10-i} janvier 2024, n¬∞23-{12345+i}
                        </h5>
                        <p style="margin: 5px 0; font-size: 0.85em; color: var(--text-secondary);">
                            <strong>Mots-cl√©s :</strong> Responsabilit√© ‚Ä¢ Pr√©judice ‚Ä¢ R√©paration int√©grale
                        </p>
                        <p style="margin: 10px 0; font-size: 0.9em;">
                            "Attendu que la responsabilit√© du fait des choses suppose la r√©union de trois conditions : 
                            une chose, instrument du dommage, sous la garde de celui dont la responsabilit√© est recherch√©e..."
                        </p>
                        <div style="margin-top: 10px;">
                            <span class="feature-tag">‚≠ê Arr√™t de principe</span>
                            <span class="feature-tag">Revirement</span>
                        </div>
                    </div>
                    <div style="margin-left: 20px;">
                        <button style="padding: 5px 10px; margin: 2px;">üìÑ Texte int√©gral</button><br>
                        <button style="padding: 5px 10px; margin: 2px;">üíæ Sauvegarder</button><br>
                        <button style="padding: 5px 10px; margin: 2px;">üìã Citer</button>
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)

# Fonction principale
def main():
    """Point d'entr√©e principal de l'application"""
    
    # Initialisation
    init_session_state()
    load_custom_css()
    
    # Sidebar
    create_sidebar()
    
    # Routeur vers les modules
    module_functions = {
        "accueil": show_accueil,
        "redaction": show_redaction,
        "recherche_juridique": show_recherche_juridique,
        "preparation_client": show_preparation_client,
        "analyse": lambda: st.info("Module Analyse en d√©veloppement..."),
        "plaidoirie": lambda: st.info("Module Plaidoirie en d√©veloppement..."),
        "conclusions": lambda: st.info("Module Conclusions en d√©veloppement..."),
        "assignation": lambda: st.info("Module Assignations en d√©veloppement..."),
        "contrats": lambda: st.info("Module Contrats en d√©veloppement..."),
        "consultations": lambda: st.info("Module Consultations en d√©veloppement..."),
        "courriers": lambda: st.info("Module Courriers en d√©veloppement..."),
        "veille": lambda: st.info("Module Veille juridique en d√©veloppement..."),
        "timeline": lambda: st.info("Module Timeline en d√©veloppement..."),
        "calculs": lambda: st.info("Module Calculs juridiques en d√©veloppement..."),
        "modeles": lambda: st.info("Module Mod√®les en d√©veloppement..."),
        "citations": lambda: st.info("Module Citations en d√©veloppement..."),
        "agenda": lambda: st.info("Module Agenda en d√©veloppement..."),
        "tarification": lambda: st.info("Module Tarification en d√©veloppement..."),
        "documents": lambda: st.info("Module Documents en d√©veloppement..."),
        "clients": lambda: st.info("Module Clients en d√©veloppement..."),
        "dossiers": lambda: st.info("Module Dossiers en d√©veloppement..."),
        "facturation": lambda: st.info("Module Facturation en d√©veloppement..."),
        "statistiques": lambda: st.info("Module Statistiques en d√©veloppement..."),
        "parametres": lambda: st.info("Module Param√®tres en d√©veloppement...")
    }
    
    # Affichage du module s√©lectionn√©
    current_module = st.session_state.current_module
    if current_module in module_functions:
        module_functions[current_module]()
    else:
        show_accueil()
    
    # Footer
    st.markdown("---")
    st.markdown(
        """<p style='text-align: center; color: #7f8c8d; font-size: 0.8em;'>
        ‚öñÔ∏è IA Juridique Pro ‚Ä¢ Assistant multi-IA pour professionnels du droit
        </p>""",
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main()