import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
import streamlit.components.v1 as components
import time
import json

# Configuration de la page
st.set_page_config(
    page_title="IA Juridique - Droit P√©nal des Affaires",
    page_icon="‚öñÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configuration des IA disponibles
AVAILABLE_AIS = {
    "GPT-3.5": {"icon": "ü§ñ", "description": "Analyse rapide et r√©ponses structur√©es"},
    "GPT-4": {"icon": "üß†", "description": "Analyse approfondie et raisonnement complexe"},
    "Azure OpenAI": {"icon": "‚òÅÔ∏è", "description": "IA s√©curis√©e pour donn√©es sensibles"},
    "Claude Opus 4": {"icon": "üé≠", "description": "Argumentation nuanc√©e et cr√©ative"},
    "Gemini": {"icon": "‚ú®", "description": "Recherche exhaustive multimodale"},
    "Mistral": {"icon": "üåü", "description": "Sp√©cialiste droit fran√ßais et europ√©en"}
}

# Base de clients pour la pr√©paration
CLIENTS_DB = {
    "lesueur": {
        "nom": "M. Lesueur",
        "affaire": "ABS SAS TechFinance",
        "qualification": "Abus de biens sociaux",
        "statut": "Mis en examen",
        "audience": "15/02/2024 - Tribunal correctionnel"
    },
    "martin": {
        "nom": "Mme Martin",
        "affaire": "Blanchiment r√©seau international",
        "qualification": "Blanchiment aggrav√©",
        "statut": "T√©moin assist√©",
        "audience": "20/02/2024 - Juge d'instruction"
    },
    "dupont": {
        "nom": "M. Dupont",
        "affaire": "Corruption march√© public",
        "qualification": "Corruption active",
        "statut": "Mis en examen",
        "audience": "25/02/2024 - Chambre de l'instruction"
    }
}

# Modules de pr√©paration client
PREPARATION_MODULES = {
    "questions_tribunal": {
        "titre": "Questions du tribunal",
        "themes": [
            "Questions sur les faits",
            "Questions sur l'organisation de la soci√©t√©",
            "Questions sur votre r√¥le et responsabilit√©s",
            "Questions sur les flux financiers",
            "Questions sur votre connaissance des faits"
        ]
    },
    "questions_procureur": {
        "titre": "Questions du procureur",
        "themes": [
            "Questions pi√®ges sur l'intentionnalit√©",
            "Questions sur les contradictions",
            "Questions sur les documents",
            "Questions sur les t√©moignages",
            "Questions sur les ant√©c√©dents"
        ]
    },
    "comportement": {
        "titre": "Comportement √† l'audience",
        "themes": [
            "Attitude g√©n√©rale et pr√©sentation",
            "Gestion du stress et des √©motions",
            "Communication non-verbale",
            "Formules de politesse",
            "R√©actions aux provocations"
        ]
    },
    "strategie": {
        "titre": "Strat√©gie de d√©fense",
        "themes": [
            "Points forts √† mettre en avant",
            "Points faibles √† minimiser",
            "√âl√©ments de contexte favorables",
            "Arguments juridiques cl√©s",
            "Ligne de d√©fense coh√©rente"
        ]
    }
}

# Suggestions de prompts enrichies avec modules
PROMPT_SUGGESTIONS = {
    "pr√©par": [
        "pr√©parer client audience correctionnelle",
        "pr√©parer interrogatoire juge instruction",
        "pr√©parer questions procureur ABS",
        "pr√©parer confrontation t√©moins",
        "pr√©parer plaidoirie partie civile"
    ],
    "r√©dac": [
        "r√©diger conclusions ABS d√©fense",
        "r√©diger plainte constitution partie civile",
        "r√©diger m√©moire cassation p√©nal",
        "r√©diger observations expertise comptable",
        "r√©diger requ√™te nullit√© proc√©dure"
    ],
    "analys": [
        "analyser PV audition garde √† vue",
        "analyser rapport expertise financi√®re",
        "analyser scell√©s documents comptables",
        "analyser contradictions t√©moignages",
        "analyser risques mise en examen"
    ],
    "recherch": [
        "rechercher jurisprudence ABS prescription",
        "rechercher jurisprudence blanchiment auto-blanchiment",
        "rechercher arr√™ts corruption √©l√©ment moral",
        "rechercher doctrine nullit√©s proc√©dure",
        "rechercher CEDH d√©lai raisonnable"
    ],
    "calcul": [
        "calculer d√©lai appel correctionnel",
        "calculer prescription ABS dissimul√©",
        "calculer int√©r√™ts civils pr√©judice",
        "calculer honoraires complexit√© dossier",
        "calculer d√©lai cassation p√©nal"
    ]
}

# Fonction CSS optimis√©e
def load_custom_css():
    st.markdown("""
    <style>
    /* Variables CSS adapt√©es au p√©nal des affaires */
    :root {
        --primary-color: #1a1a2e;
        --secondary-color: #16213e;
        --accent-color: #e94560;
        --success-color: #0f3460;
        --warning-color: #f39c12;
        --danger-color: #c0392b;
        --text-primary: #2c3e50;
        --text-secondary: #7f8c8d;
        --border-color: #bdc3c7;
        --hover-color: #ecf0f1;
        --background-light: #f8f9fa;
        --ai-selected: #e94560;
        --ai-hover: #c0392b;
        --penal-bg: #fef5f5;
        --client-bg: #e8f5e9;
    }
    
    /* Typography ultra-compacte */
    h1 { font-size: 1.5rem !important; margin-bottom: 0.3rem !important; }
    h2 { font-size: 1.25rem !important; margin-bottom: 0.3rem !important; }
    h3 { font-size: 1.1rem !important; margin-bottom: 0.3rem !important; }
    h4 { font-size: 1rem !important; margin-bottom: 0.3rem !important; }
    h5 { font-size: 0.9rem !important; margin-bottom: 0.3rem !important; }
    
    /* Layout ultra-compact */
    .block-container {
        padding-top: 0.5rem !important;
        max-width: 1600px !important;
    }
    
    /* Pr√©paration client card */
    .preparation-card {
        background: var(--client-bg);
        border: 2px solid #4caf50;
        border-radius: 8px;
        padding: 15px;
        margin: 10px 0;
    }
    
    .preparation-theme {
        background: white;
        border: 1px solid #4caf50;
        border-radius: 6px;
        padding: 12px;
        margin: 8px 0;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .preparation-theme:hover {
        background: #f1f8e9;
        transform: translateX(5px);
        box-shadow: 0 2px 8px rgba(76, 175, 80, 0.2);
    }
    
    .client-info-badge {
        background: #4caf50;
        color: white;
        padding: 4px 12px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 600;
        display: inline-block;
        margin: 2px;
    }
    
    /* Suggestion de prompts am√©lior√©e */
    .prompt-suggestion {
        background: white;
        border: 1px solid var(--border-color);
        border-radius: 4px;
        padding: 8px 12px;
        margin: 3px 0;
        cursor: pointer;
        font-size: 0.85rem;
        transition: all 0.2s ease;
        position: relative;
    }
    
    .prompt-suggestion:hover {
        background: var(--penal-bg);
        border-color: var(--accent-color);
        transform: translateX(5px);
    }
    
    .prompt-module-tag {
        position: absolute;
        right: 8px;
        top: 50%;
        transform: translateY(-50%);
        background: var(--accent-color);
        color: white;
        padding: 2px 8px;
        border-radius: 10px;
        font-size: 0.7rem;
    }
    
    /* AI Selector optimis√© */
    .ai-selector-mini {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px;
        background: white;
        border: 1px solid var(--border-color);
        border-radius: 6px;
        margin: 4px;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .ai-selector-mini:hover {
        border-color: var(--ai-hover);
        background: var(--hover-color);
    }
    
    .ai-selector-mini.selected {
        border-color: var(--ai-selected);
        background: var(--penal-bg);
        font-weight: 600;
    }
    
    /* Module Cards ultra-compactes */
    .module-card {
        background: white;
        border-radius: 8px;
        padding: 12px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
        border: 1px solid var(--border-color);
        height: 100%;
        min-height: 120px;
    }
    
    .module-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.12);
        border-color: var(--accent-color);
    }
    
    /* Search container avec d√©tection client */
    .search-container {
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.08);
        padding: 20px;
        margin: 15px 0;
        border: 1px solid var(--border-color);
        position: relative;
    }
    
    .search-container.client-mode {
        border-color: #4caf50;
        background: #f1f8e9;
    }
    
    /* Questions preview */
    .question-preview {
        background: var(--background-light);
        border-left: 3px solid var(--accent-color);
        padding: 10px;
        margin: 5px 0;
        font-size: 0.85rem;
    }
    
    .question-category {
        font-weight: 600;
        color: var(--accent-color);
        margin-bottom: 5px;
    }
    
    /* Responsive optimis√© */
    @media (max-width: 768px) {
        .module-card {
            min-height: 100px;
            padding: 10px;
        }
    }
    </style>
    """, unsafe_allow_html=True)

# √âtat global
def init_session_state():
    """Initialise les variables de session"""
    if 'selected_ais' not in st.session_state:
        st.session_state.selected_ais = []
    if 'response_mode' not in st.session_state:
        st.session_state.response_mode = 'fusion'
    if 'current_view' not in st.session_state:
        st.session_state.current_view = 'dashboard'
    if 'search_query' not in st.session_state:
        st.session_state.search_query = ""
    if 'client_mode' not in st.session_state:
        st.session_state.client_mode = None
    if 'preparation_themes' not in st.session_state:
        st.session_state.preparation_themes = []

# Fonction pour d√©tecter et traiter les commandes client
def process_client_command(query):
    """D√©tecte et traite les commandes @client"""
    if query.startswith("@"):
        parts = query[1:].split(",", 1)
        client_name = parts[0].strip().lower()
        
        if client_name in CLIENTS_DB:
            client = CLIENTS_DB[client_name]
            command = parts[1].strip() if len(parts) > 1 else ""
            
            return {
                "is_client_command": True,
                "client": client,
                "client_key": client_name,
                "command": command
            }
    
    return {"is_client_command": False}

# G√©n√©rateur de prompts intelligent avec modules
def get_smart_suggestions(query, client_context=None):
    """G√©n√®re des suggestions bas√©es sur les modules et le contexte"""
    suggestions = {}
    query_lower = query.lower()
    
    # Si contexte client, prioriser la pr√©paration
    if client_context:
        suggestions["pr√©paration_audience"] = [
            f"Pr√©parer {client_context['nom']} - Questions sur {client_context['qualification']}",
            f"Simuler interrogatoire {client_context['statut']} - {client_context['affaire']}",
            f"Strat√©gie d√©fense {client_context['audience']}",
            f"Points faibles √† travailler avec {client_context['nom']}",
            f"Documents √† pr√©parer pour {client_context['nom']}"
        ]
    
    # Suggestions bas√©es sur les mots-cl√©s
    for keyword, prompts in PROMPT_SUGGESTIONS.items():
        if keyword in query_lower:
            # Ajouter le module associ√©
            module_map = {
                "pr√©par": "üëî Pr√©paration",
                "r√©dac": "‚úçÔ∏è R√©daction",
                "analys": "üîç Analyse",
                "recherch": "‚öñÔ∏è Recherche",
                "calcul": "üßÆ Calculs"
            }
            module = module_map.get(keyword, "")
            suggestions[keyword] = [(p, module) for p in prompts[:4]]
    
    # Suggestions contextuelles si pas de match
    if not suggestions and len(query) > 3:
        suggestions["suggestions_modules"] = [
            (f"‚úçÔ∏è R√©diger {query}", "‚úçÔ∏è R√©daction"),
            (f"üîç Analyser {query}", "üîç Analyse"),
            (f"‚öñÔ∏è Rechercher jurisprudence {query}", "‚öñÔ∏è Recherche"),
            (f"üëî Pr√©parer client pour {query}", "üëî Pr√©paration")
        ]
    
    return suggestions

# Barre de recherche intelligente avec d√©tection client
def create_smart_search_bar():
    """Barre de recherche avec IA et d√©tection @client"""
    
    # JavaScript am√©lior√©
    search_js = """
    <script>
    function setupEnhancedSearch() {
        const checkTextarea = setInterval(function() {
            const textarea = document.querySelector('textarea[aria-label="main_search"]');
            if (textarea) {
                clearInterval(checkTextarea);
                
                let debounceTimer;
                
                textarea.addEventListener('input', function(event) {
                    clearTimeout(debounceTimer);
                    const value = textarea.value;
                    
                    // Style diff√©rent pour @client
                    if (value.startsWith('@')) {
                        textarea.style.borderColor = '#4caf50';
                        textarea.style.backgroundColor = '#f1f8e9';
                        
                        // Extraire le nom du client
                        const clientPart = value.substring(1).split(',')[0];
                        if (clientPart.length > 2) {
                            textarea.style.borderWidth = '2px';
                        }
                    } else {
                        textarea.style.borderColor = '';
                        textarea.style.backgroundColor = '';
                        textarea.style.borderWidth = '';
                    }
                    
                    debounceTimer = setTimeout(() => {
                        const nativeInputValueSetter = Object.getOwnPropertyDescriptor(
                            window.HTMLTextAreaElement.prototype, 'value'
                        ).set;
                        nativeInputValueSetter.call(textarea, value);
                        const inputEvent = new Event('input', { bubbles: true });
                        textarea.dispatchEvent(inputEvent);
                    }, 300);
                });
                
                textarea.addEventListener('keydown', function(event) {
                    if (event.key === 'Enter' && !event.shiftKey) {
                        event.preventDefault();
                        const buttons = document.querySelectorAll('button');
                        buttons.forEach(button => {
                            if (button.textContent.includes('Analyser')) {
                                button.click();
                            }
                        });
                    }
                });
                
                textarea.focus();
            }
        }, 100);
    }
    
    setupEnhancedSearch();
    const observer = new MutationObserver(setupEnhancedSearch);
    observer.observe(document.body, { childList: true, subtree: true });
    </script>
    """
    
    # Container principal
    client_context = process_client_command(st.session_state.get('search_query', ''))
    container_class = "search-container client-mode" if client_context['is_client_command'] else "search-container"
    
    st.markdown(f'<div class="{container_class}">', unsafe_allow_html=True)
    
    # Titre adaptatif
    if client_context['is_client_command']:
        st.markdown(f"### üëî Pr√©paration de {client_context['client']['nom']}")
        st.markdown(f"""
        <div>
            <span class="client-info-badge">üìÅ {client_context['client']['affaire']}</span>
            <span class="client-info-badge">‚öñÔ∏è {client_context['client']['qualification']}</span>
            <span class="client-info-badge">üìÖ {client_context['client']['audience']}</span>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown("### üîç Recherche intelligente IA - Droit P√©nal des Affaires")
    
    col1, col2 = st.columns([4, 1])
    
    with col1:
        query = st.text_area(
            "main_search",
            placeholder=(
                "Exemples :\n"
                "‚Ä¢ @Lesueur, pr√©parer pour l'audience\n"
                "‚Ä¢ @Martin, questions du procureur sur blanchiment\n"
                "‚Ä¢ Analyser PV garde √† vue\n"
                "‚Ä¢ R√©diger conclusions ABS"
            ),
            height=80,
            key="search_query",
            label_visibility="hidden"
        )
    
    with col2:
        st.write("")  # Alignement
        if st.button("ü§ñ Analyser", type="primary", use_container_width=True):
            if query:
                st.session_state.current_view = "process_query"
                st.rerun()
    
    # Traitement des suggestions
    if query:
        client_cmd = process_client_command(query)
        
        if client_cmd['is_client_command']:
            # Mode pr√©paration client
            st.markdown("#### üìã Modules de pr√©paration disponibles")
            
            for module_key, module_info in PREPARATION_MODULES.items():
                st.markdown(f"""
                <div class="preparation-theme">
                    <h5>{module_info['titre']}</h5>
                    <div style="font-size: 0.85rem; color: var(--text-secondary);">
                        {len(module_info['themes'])} th√®mes ‚Ä¢ Dur√©e estim√©e : {len(module_info['themes']) * 30} min
                    </div>
                </div>
                """, unsafe_allow_html=True)
                
                if st.button(f"Pr√©parer {module_info['titre']}", key=f"prep_{module_key}", use_container_width=True):
                    st.session_state.preparation_module = module_key
                    st.session_state.current_client = client_cmd['client_key']
                    st.session_state.current_view = "preparation_detail"
                    st.rerun()
            
            # Suggestions de s√©ances th√©matiques
            st.markdown("#### üéØ S√©ances th√©matiques sugg√©r√©es")
            themes = [
                "üìå Questions sur l'√©l√©ment intentionnel (crucial en ABS)",
                "üìå Chronologie des faits et coh√©rence du r√©cit",
                "üìå Documents comptables et justificatifs",
                "üìå Relations avec les co-mis en examen",
                "üìå Strat√©gie face aux parties civiles"
            ]
            for theme in themes[:3]:
                st.info(theme)
        
        else:
            # Mode recherche normale avec suggestions
            suggestions = get_smart_suggestions(query)
            
            if suggestions:
                st.markdown("#### üí° Suggestions IA bas√©es sur les modules")
                
                for category, items in suggestions.items():
                    for item in items:
                        if isinstance(item, tuple):
                            prompt, module = item
                            col1, col2 = st.columns([5, 1])
                            with col1:
                                if st.button(f"‚Üí {prompt}", key=f"sug_{prompt[:30]}", use_container_width=True):
                                    st.session_state.search_query = prompt
                                    st.rerun()
                            with col2:
                                st.markdown(f'<span class="prompt-module-tag">{module}</span>', unsafe_allow_html=True)
                        else:
                            if st.button(f"‚Üí {item}", key=f"sug_{item[:30]}", use_container_width=True):
                                st.session_state.search_query = item
                                st.rerun()
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Injecter JavaScript
    components.html(search_js, height=0)
    
    return query

# S√©lecteur d'IA compact optimis√©
def create_ai_selector_mini():
    """S√©lecteur d'IA version ultra-compacte"""
    st.markdown("### ü§ñ IA disponibles")
    
    # Affichage en grille 2x3
    cols = st.columns(3)
    for idx, (ai_name, ai_info) in enumerate(AVAILABLE_AIS.items()):
        with cols[idx % 3]:
            selected = ai_name in st.session_state.selected_ais
            
            if st.checkbox(
                f"{ai_info['icon']} {ai_name}",
                value=selected,
                key=f"ai_{ai_name}",
                help=ai_info['description']
            ):
                if ai_name not in st.session_state.selected_ais:
                    st.session_state.selected_ais.append(ai_name)
            else:
                if ai_name in st.session_state.selected_ais:
                    st.session_state.selected_ais.remove(ai_name)
    
    # Mode de fusion
    if st.session_state.selected_ais:
        col1, col2, col3 = st.columns(3)
        with col1:
            if st.button("üîÑ Fusion", key="mode_fusion", use_container_width=True,
                        type="primary" if st.session_state.response_mode == "fusion" else "secondary"):
                st.session_state.response_mode = "fusion"
        with col2:
            if st.button("üìä Comparaison", key="mode_comp", use_container_width=True,
                        type="primary" if st.session_state.response_mode == "comparaison" else "secondary"):
                st.session_state.response_mode = "comparaison"
        with col3:
            if st.button("üìù Synth√®se", key="mode_synth", use_container_width=True,
                        type="primary" if st.session_state.response_mode == "synth√®se" else "secondary"):
                st.session_state.response_mode = "synth√®se"

# Page de pr√©paration d√©taill√©e
def show_preparation_detail():
    """Affiche le d√©tail de pr√©paration client avec questions"""
    if 'preparation_module' not in st.session_state:
        st.session_state.current_view = 'dashboard'
        st.rerun()
        return
    
    module = PREPARATION_MODULES[st.session_state.preparation_module]
    client = CLIENTS_DB[st.session_state.current_client]
    
    # Header
    st.markdown(f"""
    <h2>üëî Pr√©paration de {client['nom']}</h2>
    <h3>{module['titre']}</h3>
    """, unsafe_allow_html=True)
    
    # Info client
    st.markdown(f"""
    <div class="preparation-card">
        <strong>Affaire :</strong> {client['affaire']}<br>
        <strong>Qualification :</strong> {client['qualification']}<br>
        <strong>Audience :</strong> {client['audience']}
    </div>
    """, unsafe_allow_html=True)
    
    # S√©lection IA pour g√©n√©ration
    create_ai_selector_mini()
    
    st.markdown("---")
    
    # Th√®mes et questions
    st.markdown("### üìã S√©ances th√©matiques")
    
    for idx, theme in enumerate(module['themes']):
        with st.expander(f"**S√©ance {idx+1} : {theme}**", expanded=idx==0):
            
            # G√©n√©rer des questions avec IA
            if st.button(f"ü§ñ G√©n√©rer questions IA", key=f"gen_{idx}"):
                if not st.session_state.selected_ais:
                    st.warning("S√©lectionnez au moins une IA")
                else:
                    with st.spinner(f"G√©n√©ration par {len(st.session_state.selected_ais)} IA..."):
                        time.sleep(1.5)
                    
                    # Questions g√©n√©r√©es selon le th√®me
                    if "intentionnel" in theme.lower() or "faits" in theme.lower():
                        questions = [
                            "‚ùì Pouvez-vous m'expliquer pr√©cis√©ment votre r√¥le dans la soci√©t√© au moment des faits ?",
                            "‚ùì Aviez-vous connaissance du caract√®re irr√©gulier de ces op√©rations ?",
                            "‚ùì Qui a donn√© l'ordre de proc√©der √† ces virements ?",
                            "‚ùì Quel b√©n√©fice personnel en avez-vous retir√© ?",
                            "‚ùì Comment expliquez-vous ces mouvements de fonds ?"
                        ]
                    elif "organisation" in theme.lower() or "soci√©t√©" in theme.lower():
                        questions = [
                            "‚ùì D√©crivez l'organigramme de la soci√©t√©",
                            "‚ùì Qui avait le pouvoir de signature sur les comptes ?",
                            "‚ùì Comment √©taient prises les d√©cisions importantes ?",
                            "‚ùì Y avait-il des proc√©dures de contr√¥le interne ?",
                            "‚ùì Qui validait les d√©penses exceptionnelles ?"
                        ]
                    elif "flux" in theme.lower() or "financ" in theme.lower():
                        questions = [
                            "‚ùì Expliquez la destination de ces fonds",
                            "‚ùì Pourquoi ces virements vers des comptes personnels ?",
                            "‚ùì Comment justifiez-vous ces montants ?",
                            "‚ùì Y avait-il des contreparties √† ces paiements ?",
                            "‚ùì Qui b√©n√©ficiait in fine de ces sommes ?"
                        ]
                    else:
                        questions = [
                            "‚ùì Question g√©n√©rale adapt√©e au th√®me",
                            "‚ùì Question de suivi pour approfondir",
                            "‚ùì Question pi√®ge potentielle",
                            "‚ùì Question de coh√©rence avec les pi√®ces",
                            "‚ùì Question finale de synth√®se"
                        ]
                    
                    # Affichage des questions
                    for q in questions:
                        st.markdown(f"""
                        <div class="question-preview">
                            <div class="question-category">{'Tribunal' if idx % 2 == 0 else 'Procureur'}</div>
                            {q}
                        </div>
                        """, unsafe_allow_html=True)
                    
                    # Conseils de r√©ponse
                    st.markdown("#### üí° Conseils pour r√©pondre")
                    st.success("""
                    ‚Ä¢ Restez factuel et chronologique
                    ‚Ä¢ Ne sp√©culez pas sur les intentions d'autrui
                    ‚Ä¢ R√©f√©rez-vous aux documents quand possible
                    ‚Ä¢ Admettez ne pas savoir plut√¥t que d'inventer
                    ‚Ä¢ Gardez votre calme face aux questions agressives
                    """)
            
            # Zone de notes
            notes = st.text_area(
                "Notes de pr√©paration",
                key=f"notes_{idx}",
                placeholder="Points cl√©s √† retenir, r√©ponses √† pr√©parer...",
                height=100
            )
            
            # Dur√©e estim√©e
            st.info(f"‚è±Ô∏è Dur√©e estim√©e : 30-45 minutes")
    
    # Actions finales
    st.markdown("---")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üìÑ G√©n√©rer fiche compl√®te", type="primary", use_container_width=True):
            st.success("Fiche de pr√©paration g√©n√©r√©e")
    
    with col2:
        if st.button("üéØ Simulation d'audience", use_container_width=True):
            st.info("Module simulation en d√©veloppement")
    
    with col3:
        if st.button("üìß Envoyer au client", use_container_width=True):
            st.info("Envoi par email...")
    
    with col4:
        if st.button("‚¨ÖÔ∏è Retour", use_container_width=True):
            st.session_state.current_view = 'dashboard'
            st.rerun()

# Sidebar optimis√©e
def create_sidebar():
    """Sidebar avec navigation et stats"""
    with st.sidebar:
        # Header
        st.markdown("""
        <div style="text-align: center; padding: 10px; background: linear-gradient(135deg, #1a1a2e, #e94560); 
                    margin: -35px -35px 15px -35px; border-radius: 0 0 10px 10px;">
            <h3 style="color: white; margin: 0; font-size: 1.1rem;">‚öñÔ∏è IA P√©nal des Affaires</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # IA s√©lectionn√©es
        if st.session_state.selected_ais:
            st.markdown("#### ü§ñ IA actives")
            ia_list = " ‚Ä¢ ".join([AVAILABLE_AIS[ai]['icon'] for ai in st.session_state.selected_ais])
            st.markdown(f"<div style='text-align: center; font-size: 1.2rem;'>{ia_list}</div>", unsafe_allow_html=True)
            st.markdown("---")
        
        # Navigation principale
        st.markdown("#### üìä Modules")
        
        modules = [
            ("üè† Tableau de bord", "dashboard"),
            ("üëî Pr√©paration client", "preparation"),
            ("‚úçÔ∏è R√©daction p√©nale", "redaction"),
            ("‚öñÔ∏è Recherche juridique", "recherche"),
            ("üîç Analyse dossiers", "analyse"),
            ("‚è±Ô∏è Suivi temps", "temps"),
            ("üìÅ Documents", "documents"),
            ("üìä Statistiques", "stats")
        ]
        
        for label, key in modules:
            if st.button(label, key=f"nav_{key}", use_container_width=True,
                        type="primary" if st.session_state.current_view == key else "secondary"):
                st.session_state.current_view = key
                st.rerun()
        
        # Stats rapides
        st.markdown("---")
        st.markdown("#### üö® Urgences")
        st.error("‚è∞ D√©lai appel : 3j", icon="üö®")
        st.warning("üìÖ Audience demain", icon="‚ö†Ô∏è")
        
        # Clients en pr√©paration
        st.markdown("---")
        st.markdown("#### üë• Clients actifs")
        for client_key, client in list(CLIENTS_DB.items())[:3]:
            if st.button(f"‚Üí {client['nom']}", key=f"quick_client_{client_key}", use_container_width=True):
                st.session_state.search_query = f"@{client_key}, pr√©parer audience"
                st.session_state.current_view = "dashboard"
                st.rerun()

# Page Tableau de bord principal
def show_dashboard():
    """Dashboard avec toutes les fonctionnalit√©s"""
    
    # Header minimal
    st.markdown("""
    <h1 style="text-align: center; margin: 5px 0;">‚öñÔ∏è IA Juridique - Droit P√©nal des Affaires</h1>
    <p style="text-align: center; color: var(--text-secondary); font-size: 0.85rem; margin-bottom: 10px;">
        6 IA sp√©cialis√©es ‚Ä¢ Pr√©paration client intelligente ‚Ä¢ Modules interconnect√©s
    </p>
    """, unsafe_allow_html=True)
    
    # S√©lecteur IA
    create_ai_selector_mini()
    
    st.markdown("---")
    
    # Barre de recherche intelligente
    query = create_smart_search_bar()
    
    # Si une requ√™te est en cours de traitement
    if st.session_state.current_view == "process_query" and query:
        process_main_query(query)
        return
    
    # Modules principaux en grille compacte
    st.markdown("### üéØ Modules sp√©cialis√©s")
    
    # Ligne 1 : Modules m√©tier
    col1, col2, col3, col4, col5, col6 = st.columns(6)
    
    module_configs = [
        ("üëî", "Pr√©paration Client", "Questions tribunal ‚Ä¢ Simulation ‚Ä¢ Comportement", "preparation"),
        ("‚úçÔ∏è", "R√©daction IA", "Conclusions ‚Ä¢ Plaintes ‚Ä¢ M√©moires", "redaction"),
        ("‚öñÔ∏è", "Recherche", "Jurisprudence ‚Ä¢ Doctrine ‚Ä¢ CEDH", "recherche"),
        ("üîç", "Analyse", "PV ‚Ä¢ Expertises ‚Ä¢ Strat√©gie", "analyse"),
        ("‚è±Ô∏è", "Temps", "Timer ‚Ä¢ Facturation ‚Ä¢ Stats", "temps"),
        ("üìä", "Stats", "Taux succ√®s ‚Ä¢ D√©lais ‚Ä¢ KPI", "stats")
    ]
    
    for idx, (icon, title, desc, view) in enumerate(module_configs):
        with [col1, col2, col3, col4, col5, col6][idx]:
            st.markdown(f"""
            <div class="module-card">
                <div style="text-align: center;">
                    <div style="font-size: 2rem;">{icon}</div>
                    <div style="font-weight: 600; font-size: 0.85rem; margin: 5px 0;">{title}</div>
                    <div style="font-size: 0.7rem; color: var(--text-secondary);">{desc}</div>
                </div>
            </div>
            """, unsafe_allow_html=True)
            if st.button("Ouvrir", key=f"btn_{view}", use_container_width=True):
                st.session_state.current_view = view
                st.rerun()
    
    # Ligne 2 : Infractions
    st.markdown("### üö® Infractions p√©nales")
    
    col1, col2, col3, col4, col5, col6 = st.columns(6)
    
    infractions = [
        ("üí∞", "ABS", "Abus biens sociaux"),
        ("üîÑ", "Blanchiment", "TRACFIN ‚Ä¢ Aggrav√©"),
        ("üé≠", "Corruption", "Active ‚Ä¢ Passive"),
        ("üìà", "Boursier", "Initi√© ‚Ä¢ AMF"),
        ("üîó", "Escroquerie", "Faux ‚Ä¢ Crypto"),
        ("üè¶", "Banqueroute", "Frauduleuse")
    ]
    
    for idx, (icon, title, desc) in enumerate(infractions):
        with [col1, col2, col3, col4, col5, col6][idx]:
            st.markdown(f"""
            <div class="module-card" style="min-height: 90px;">
                <div style="text-align: center;">
                    <div style="font-size: 1.5rem;">{icon}</div>
                    <div style="font-weight: 600; font-size: 0.8rem;">{title}</div>
                    <div style="font-size: 0.65rem; color: var(--text-secondary);">{desc}</div>
                </div>
            </div>
            """, unsafe_allow_html=True)
    
    # Actions rapides
    st.markdown("### ‚ö° Actions rapides")
    
    quick_cols = st.columns(10)
    quick_actions = [
        ("üö®", "Plainte"),
        ("üìÑ", "Constit. PC"),
        ("‚è∞", "D√©lais"),
        ("üí∞", "Honoraires"),
        ("üìä", "Rapport"),
        ("üîç", "Analyse PV"),
        ("üìÖ", "Audience"),
        ("üí≥", "TRACFIN"),
        ("üìù", "Nullit√©"),
        ("‚öñÔ∏è", "QPC")
    ]
    
    for idx, (icon, label) in enumerate(quick_actions):
        with quick_cols[idx]:
            if st.button(f"{icon}\n{label}", key=f"quick_{label}", use_container_width=True):
                st.info(f"Module {label} en d√©veloppement")

# Traitement des requ√™tes principales
def process_main_query(query):
    """Traite les requ√™tes avec IA"""
    
    # V√©rifier si c'est une commande client
    client_cmd = process_client_command(query)
    
    if client_cmd['is_client_command']:
        # Rediriger vers la pr√©paration
        st.session_state.current_view = 'preparation_detail'
        st.session_state.current_client = client_cmd['client_key']
        st.session_state.preparation_module = 'questions_tribunal'
        st.rerun()
    else:
        # Traitement normal avec IA
        if not st.session_state.selected_ais:
            st.warning("‚ö†Ô∏è S√©lectionnez au moins une IA pour analyser votre requ√™te")
            if st.button("‚¨ÖÔ∏è Retour"):
                st.session_state.current_view = 'dashboard'
                st.rerun()
            return
        
        st.markdown(f"### ü§ñ Analyse : *{query}*")
        st.markdown(f"**IA actives :** {', '.join(st.session_state.selected_ais)}")
        st.markdown(f"**Mode :** {st.session_state.response_mode}")
        
        with st.spinner(f"Interrogation de {len(st.session_state.selected_ais)} IA..."):
            time.sleep(2)
        
        # R√©sultats selon le mode
        if st.session_state.response_mode == "fusion":
            st.markdown("""
            <div class="ai-response-container">
                <h4>üîÑ R√©ponse fusionn√©e multi-IA</h4>
                <p>Analyse crois√©e pour une r√©ponse compl√®te et nuanc√©e...</p>
                <ul>
                    <li>Point 1 enrichi par GPT-4 et Claude Opus 4</li>
                    <li>Point 2 compl√©t√© par Azure OpenAI</li>
                    <li>Point 3 v√©rifi√© par Gemini et Mistral</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
        
        if st.button("‚¨ÖÔ∏è Nouvelle recherche", type="primary"):
            st.session_state.current_view = 'dashboard'
            st.rerun()

# Fonction principale
def main():
    """Point d'entr√©e principal"""
    
    # Initialisation
    init_session_state()
    load_custom_css()
    
    # Sidebar
    create_sidebar()
    
    # Router
    views = {
        "dashboard": show_dashboard,
        "preparation": lambda: st.info("üëî Module Pr√©paration client - Utilisez @NomClient dans la recherche"),
        "preparation_detail": show_preparation_detail,
        "process_query": lambda: process_main_query(st.session_state.search_query),
        "redaction": lambda: st.info("‚úçÔ∏è Module R√©daction en d√©veloppement"),
        "recherche": lambda: st.info("‚öñÔ∏è Module Recherche en d√©veloppement"),
        "analyse": lambda: st.info("üîç Module Analyse en d√©veloppement"),
        "temps": lambda: st.info("‚è±Ô∏è Module Temps en d√©veloppement"),
        "documents": lambda: st.info("üìÅ Module Documents en d√©veloppement"),
        "stats": lambda: st.info("üìä Module Statistiques en d√©veloppement")
    }
    
    # Affichage
    current_view = st.session_state.current_view
    if current_view in views:
        views[current_view]()
    else:
        show_dashboard()
    
    # Footer minimal
    st.markdown("---")
    st.markdown(
        """<p style='text-align: center; color: #95a5a6; font-size: 0.7rem;'>
        ‚öñÔ∏è IA Juridique P√©nal des Affaires | 6 IA | RGPD
        </p>""",
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main()