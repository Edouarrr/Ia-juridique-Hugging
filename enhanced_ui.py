# enhanced_ui.py
"""
Interface utilisateur optimis√©e pour l'application juridique
Am√©lioration de l'UX, du design et de la fluidit√©
"""

import time
from datetime import datetime

import streamlit as st
import streamlit.components.v1 as components

from app import ModuleManager
from managers.multi_llm_manager import MultiLLMManager

# Configuration de la page avec un design moderne
st.set_page_config(
    page_title="IA Juridique Pro",
    page_icon="‚öñÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√© pour un design moderne et fluide
def load_custom_css():
    st.markdown("""
    <style>
    /* Palette de couleurs professionnelle */
    :root {
        --primary-color: #1a73e8;
        --secondary-color: #f8f9fa;
        --accent-color: #34a853;
        --danger-color: #ea4335;
        --text-primary: #202124;
        --text-secondary: #5f6368;
        --border-color: #dadce0;
        --hover-color: #e8f0fe;
    }
    
    /* Design g√©n√©ral plus moderne */
    .stApp {
        background-color: #ffffff;
    }
    
    /* Sidebar am√©lior√©e */
    .css-1d391kg {
        background-color: var(--secondary-color);
        border-right: 1px solid var(--border-color);
    }
    
    /* Barre de recherche personnalis√©e */
    .search-container {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        padding: 20px;
        margin-bottom: 30px;
        border: 2px solid transparent;
        transition: all 0.3s ease;
    }
    
    .search-container:hover {
        border-color: var(--primary-color);
        box-shadow: 0 4px 12px rgba(26,115,232,0.15);
    }
    
    /* Boutons modernes */
    .stButton > button {
        background-color: var(--primary-color);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 12px 24px;
        font-weight: 500;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .stButton > button:hover {
        background-color: #1557b0;
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        transform: translateY(-1px);
    }
    
    /* Cards modernes */
    .feature-card {
        background: white;
        border-radius: 12px;
        padding: 24px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
        height: 100%;
        cursor: pointer;
        border: 2px solid transparent;
    }
    
    .feature-card:hover {
        box-shadow: 0 4px 16px rgba(0,0,0,0.12);
        transform: translateY(-2px);
        border-color: var(--primary-color);
    }
    
    /* M√©triques am√©lior√©es */
    .metric-container {
        background: linear-gradient(135deg, #f5f7fa 0%, #e9ecef 100%);
        border-radius: 12px;
        padding: 20px;
        text-align: center;
        transition: all 0.3s ease;
    }
    
    .metric-container:hover {
        transform: scale(1.02);
    }
    
    /* Navigation tabs moderne */
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
        background-color: var(--secondary-color);
        padding: 8px;
        border-radius: 12px;
    }
    
    .stTabs [data-baseweb="tab"] {
        border-radius: 8px;
        padding: 8px 16px;
        background-color: transparent;
        transition: all 0.3s ease;
    }
    
    .stTabs [aria-selected="true"] {
        background-color: white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    /* Animations fluides */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .animate-in {
        animation: fadeIn 0.5s ease-out;
    }
    
    /* Am√©lioration des inputs */
    .stTextInput > div > div > input,
    .stSelectbox > div > div > select,
    .stTextArea > div > div > textarea {
        border-radius: 8px;
        border: 2px solid var(--border-color);
        transition: all 0.3s ease;
    }
    
    .stTextInput > div > div > input:focus,
    .stSelectbox > div > div > select:focus,
    .stTextArea > div > div > textarea:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(26,115,232,0.1);
    }
    
    /* Quick action buttons */
    .quick-action {
        display: inline-flex;
        align-items: center;
        padding: 8px 16px;
        background: var(--hover-color);
        border-radius: 20px;
        margin: 4px;
        cursor: pointer;
        transition: all 0.2s ease;
        border: 1px solid transparent;
    }
    
    .quick-action:hover {
        background: var(--primary-color);
        color: white;
        transform: scale(1.05);
    }
    
    /* Header moderne */
    .main-header {
        background: linear-gradient(135deg, #1a73e8 0%, #1557b0 100%);
        color: white;
        padding: 40px;
        border-radius: 16px;
        margin-bottom: 30px;
        box-shadow: 0 4px 12px rgba(26,115,232,0.2);
    }
    
    /* Notifications */
    .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 16px 24px;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        z-index: 1000;
        animation: slideIn 0.3s ease-out;
    }
    
    @keyframes slideIn {
        from { transform: translateX(100%); }
        to { transform: translateX(0); }
    }
    </style>
    """, unsafe_allow_html=True)

def create_search_interface():
    """Cr√©e une interface de recherche am√©lior√©e avec soumission sur Entr√©e"""
    
    # JavaScript pour g√©rer la soumission avec Entr√©e
    search_js = """
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Attendre que Streamlit charge compl√®tement
        setTimeout(function() {
            const textarea = document.querySelector('.stTextArea textarea');
            if (textarea) {
                textarea.addEventListener('keydown', function(event) {
                    // D√©tecter Entr√©e sans modificateur
                    if (event.key === 'Enter' && !event.shiftKey && !event.ctrlKey && !event.metaKey) {
                        event.preventDefault();
                        
                        // Trouver et cliquer sur le bouton de recherche
                        const searchButton = document.querySelector('[data-testid="search-button"]');
                        if (searchButton) {
                            searchButton.click();
                        }
                    }
                });
                
                // Focus automatique sur la zone de recherche
                textarea.focus();
            }
        }, 500);
    });
    </script>
    """
    
    # Conteneur de recherche avec style
    st.markdown('<div class="search-container animate-in">', unsafe_allow_html=True)
    
    col1, col2 = st.columns([4, 1])
    
    with col1:
        # Zone de texte de 4 lignes
        query = st.text_area(
            "",
            placeholder="üí° D√©crivez votre besoin juridique...\n\nExemples :\n‚Ä¢ R√©diger des conclusions pour une affaire de...\n‚Ä¢ Rechercher la jurisprudence sur...\n‚Ä¢ Analyser les risques dans...",
            height=100,  # 4 lignes environ
            key="main_search",
            help="Appuyez sur Entr√©e pour lancer la recherche"
        )

        search_mode = st.selectbox(
            "Mode",
            ["Recherche multi-IA", "Ex√©cuter un module"],
            key="search_mode_select"
        )

        selected_models = []
        selected_module = None
        merge_option = "synth√©tique"

        if search_mode == "Recherche multi-IA":
            llm_manager = MultiLLMManager()
            providers = llm_manager.get_available_providers()
            selected_models = st.multiselect(
                "Mod√®les IA",
                providers,
                default=providers,
                key="multi_models_select"
            )

            merge_option = st.radio(
                "Fusion des r√©ponses",
                ["synth√©tique", "exhaustive"],
                horizontal=True,
                key="merge_option_radio"
            )
        else:
            manager = ModuleManager()
            manager.discover_modules()
            modules = list(manager.available_modules.keys())
            if modules:
                selected_module = st.selectbox(
                    "Module √† ex√©cuter",
                    modules,
                    key="module_select"
                )
    
    with col2:
        st.markdown("<br>", unsafe_allow_html=True)  # Espacement
        search_clicked = st.button(
            "üîç Rechercher",
            key="search-button",
            use_container_width=True,
            type="primary"
        )
    
    # Suggestions rapides
    st.markdown("**Suggestions rapides :**")
    col1, col2, col3, col4 = st.columns(4)
    
    suggestions = [
        ("üìù Conclusions", "R√©diger des conclusions de d√©fense"),
        ("‚öñÔ∏è Jurisprudence", "Rechercher jurisprudence Cass. civ."),
        ("üìä Analyse", "Analyser les risques juridiques"),
        ("üë• Plaidoirie", "Pr√©parer une plaidoirie de 30 min")
    ]
    
    for i, (col, (icon_text, suggestion)) in enumerate(zip([col1, col2, col3, col4], suggestions)):
        with col:
            if st.button(icon_text, key=f"quick_{i}", use_container_width=True):
                st.session_state.main_search = suggestion
                st.rerun()
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Injecter le JavaScript
    components.html(search_js, height=0)
    
    return query, search_clicked, search_mode, selected_models, merge_option, selected_module

def create_modern_sidebar():
    """Cr√©e une sidebar moderne avec navigation intuitive"""
    
    with st.sidebar:
        # Logo et titre
        st.markdown("""
        <div style="text-align: center; padding: 20px 0;">
            <h1 style="color: #1a73e8; margin: 0;">‚öñÔ∏è IA Juridique</h1>
            <p style="color: #5f6368; margin: 5px 0;">Assistant Juridique Intelligent</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("---")
        
        # Navigation principale avec ic√¥nes
        st.markdown("### üß≠ Navigation")
        
        menu_items = {
            "üè† Accueil": "home",
            "üìù R√©daction": "redaction",
            "üîç Recherche": "recherche",
            "üìä Analyse": "analyse",
            "üìÅ Documents": "documents",
            "‚öôÔ∏è Param√®tres": "settings"
        }
        
        for label, key in menu_items.items():
            if st.button(label, key=f"nav_{key}", use_container_width=True):
                st.session_state.current_page = key
                st.rerun()
        
        st.markdown("---")
        
        # Actions rapides
        st.markdown("### ‚ö° Actions rapides")
        
        if st.button("‚ûï Nouveau document", use_container_width=True):
            st.session_state.show_new_doc = True
            
        if st.button("üì§ Importer fichiers", use_container_width=True):
            st.session_state.show_import = True
            
        if st.button("üíæ Sauvegarder session", use_container_width=True):
            save_session()
        
        st.markdown("---")
        
        # Statistiques
        st.markdown("### üìà Statistiques du jour")
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Documents", "12", "+3")
        with col2:
            st.metric("Recherches", "24", "+5")
        
        # Mode d'affichage
        st.markdown("---")
        st.markdown("### üé® Pr√©f√©rences")
        
        dark_mode = st.toggle("Mode sombre", key="dark_mode")
        compact_view = st.toggle("Vue compacte", key="compact_view")
        
        # Footer
        st.markdown("---")
        st.markdown(
            """
            <div style="text-align: center; color: #5f6368; font-size: 12px;">
                v2.0 | Derni√®re mise √† jour<br>
                {0}
            </div>
            """.format(datetime.now().strftime("%d/%m/%Y")),
            unsafe_allow_html=True
        )

def create_main_dashboard():
    """Cr√©e le tableau de bord principal avec des cards modernes"""
    
    # Header principal
    st.markdown("""
    <div class="main-header animate-in">
        <h1 style="margin: 0; font-size: 2.5em;">Bienvenue dans votre espace juridique</h1>
        <p style="margin: 10px 0; opacity: 0.9; font-size: 1.2em;">
            Tous vos outils juridiques intelligents en un seul endroit
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # M√©triques principales
    col1, col2, col3, col4 = st.columns(4)
    
    metrics = [
        ("üìÑ Documents actifs", "156", "+12 cette semaine"),
        ("‚öñÔ∏è Affaires en cours", "23", "+2 nouvelles"),
        ("üéØ T√¢ches du jour", "8", "3 urgentes"),
        ("‚è±Ô∏è Temps √©conomis√©", "42h", "ce mois")
    ]
    
    for col, (label, value, delta) in zip([col1, col2, col3, col4], metrics):
        with col:
            st.markdown(f"""
            <div class="metric-container animate-in">
                <h4 style="margin: 0; color: #5f6368;">{label}</h4>
                <h2 style="margin: 5px 0; color: #1a73e8;">{value}</h2>
                <p style="margin: 0; color: #34a853; font-size: 0.9em;">{delta}</p>
            </div>
            """, unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Fonctionnalit√©s principales en cards
    st.markdown("### üöÄ Fonctionnalit√©s principales")
    
    col1, col2, col3 = st.columns(3)
    
    features = [
        {
            "col": col1,
            "icon": "üìù",
            "title": "R√©daction intelligente",
            "desc": "G√©n√©rez des documents juridiques en quelques clics",
            "features": ["Conclusions", "Assignations", "Plaidoiries", "M√©moires"],
            "action": "redaction"
        },
        {
            "col": col2,
            "icon": "üîç",
            "title": "Recherche avanc√©e",
            "desc": "Trouvez instantan√©ment jurisprudences et doctrines",
            "features": ["Judilibre", "L√©gifrance", "Base interne", "IA g√©n√©rative"],
            "action": "recherche"
        },
        {
            "col": col3,
            "icon": "üìä",
            "title": "Analyse & Insights",
            "desc": "Comprenez vos dossiers avec l'IA",
            "features": ["Risques", "Timeline", "Mapping", "Synth√®se"],
            "action": "analyse"
        }
    ]
    
    for feature in features:
        with feature["col"]:
            if st.button(
                "",
                key=f"feature_{feature['action']}",
                use_container_width=True,
                help=f"Acc√©der √† {feature['title']}"
            ):
                st.session_state.current_page = feature["action"]
                st.rerun()
            
            # Contenu de la card (en HTML pour le style)
            st.markdown(f"""
            <div class="feature-card">
                <h2 style="margin: 0; color: #1a73e8;">{feature['icon']} {feature['title']}</h2>
                <p style="color: #5f6368; margin: 10px 0;">{feature['desc']}</p>
                <div style="margin-top: 15px;">
                    {''.join([f'<span class="quick-action">{f}</span>' for f in feature['features']])}
                </div>
            </div>
            """, unsafe_allow_html=True)
    
    # Section activit√© r√©cente
    st.markdown("<br>", unsafe_allow_html=True)
    st.markdown("### üìÖ Activit√© r√©cente")
    
    tab1, tab2, tab3 = st.tabs(["üìÑ Documents r√©cents", "üîç Recherches", "üìù Brouillons"])
    
    with tab1:
        recent_docs = [
            ("Conclusions d√©fense - Affaire Martin", "Il y a 2 heures", "En cours"),
            ("Assignation SARL Tech", "Hier", "Finalis√©"),
            ("Plaidoirie audience 15/03", "Il y a 3 jours", "√Ä r√©viser")
        ]
        
        for doc, time, status in recent_docs:
            col1, col2, col3 = st.columns([3, 1, 1])
            with col1:
                st.markdown(f"**{doc}**")
            with col2:
                st.caption(time)
            with col3:
                if status == "En cours":
                    st.markdown("üü° " + status)
                elif status == "Finalis√©":
                    st.markdown("üü¢ " + status)
                else:
                    st.markdown("üîµ " + status)
    
    with tab2:
        st.info("Vos derni√®res recherches appara√Ætront ici")
    
    with tab3:
        st.info("Vos brouillons en cours appara√Ætront ici")

def create_floating_help():
    """Cr√©e un bouton d'aide flottant"""
    
    st.markdown("""
    <div style="position: fixed; bottom: 20px; right: 20px; z-index: 1000;">
        <button style="
            background: #1a73e8;
            color: white;
            border: none;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            font-size: 24px;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
        " onclick="alert('Aide : Utilisez la barre de recherche pour d√©crire votre besoin. Appuyez sur Entr√©e pour lancer la recherche.')">
            ?
        </button>
    </div>
    """, unsafe_allow_html=True)

def save_session():
    """Sauvegarde la session actuelle"""
    st.toast("‚úÖ Session sauvegard√©e avec succ√®s!", icon="‚úÖ")

# Fonction principale pour int√©grer dans votre app.py
def enhanced_main_interface():
    """Interface principale am√©lior√©e"""
    
    # Charger le CSS personnalis√©
    load_custom_css()
    
    # Cr√©er la sidebar moderne
    create_modern_sidebar()
    
    # Interface principale
    if st.session_state.get('current_page', 'home') == 'home':
        # Barre de recherche am√©lior√©e
        query, search_clicked, search_mode, models, merge_option, module_name = create_search_interface()
        
        # Traiter la recherche
        if search_clicked or (query and st.session_state.get('last_query', '') != query):
            st.session_state.last_query = query
            with st.spinner("üîç Traitement en cours..."):
                if search_mode == "Recherche multi-IA" and models:
                    llm_manager = MultiLLMManager()
                    responses = llm_manager.query_multiple_llms(models, query)
                    fusion_prompt = None
                    if merge_option == "exhaustive":
                        fusion_prompt = "Fournis une r√©ponse d√©taill√©e en combinant toutes les informations."
                    result = llm_manager.fusion_responses(responses, fusion_prompt)
                    st.session_state.multi_ai_result = result
                elif search_mode == "Ex√©cuter un module" and module_name:
                    manager = ModuleManager()
                    manager.discover_modules()
                    if module_name in manager.available_modules:
                        manager.run_module(module_name)
                st.success("‚úÖ Traitement termin√©")
        
        # Dashboard principal
        create_main_dashboard()

        if st.session_state.get('multi_ai_result'):
            st.markdown("## R√©sultat consolid√©")
            st.markdown(st.session_state.multi_ai_result)
    
    elif st.session_state.get('current_page') == 'redaction':
        st.title("üìù Module de r√©daction")
        # Votre code de r√©daction ici
        
    elif st.session_state.get('current_page') == 'recherche':
        st.title("üîç Module de recherche")
        # Votre code de recherche ici
        
    # Bouton d'aide flottant
    create_floating_help()

# Pour tester
if __name__ == "__main__":
    if 'current_page' not in st.session_state:
        st.session_state.current_page = 'home'
    
    enhanced_main_interface()

