"""Script pour cr√©er l'index Azure Search pour les documents juridiques"""

import os
from azure.search.documents.indexes import SearchIndexClient
from azure.search.documents.indexes.models import (
    SearchIndex,
    SimpleField,
    SearchableField,
    SearchField,
    SearchFieldDataType
)
from azure.core.credentials import AzureKeyCredential

def create_juridique_index():
    """Cr√©e l'index pour les documents juridiques"""
    
    # Configuration
    endpoint = os.getenv('AZURE_SEARCH_ENDPOINT')
    key = os.getenv('AZURE_SEARCH_KEY')
    index_name = "juridique-documents"
    
    if not endpoint or not key:
        print("‚ùå Configuration Azure Search manquante")
        print("D√©finissez AZURE_SEARCH_ENDPOINT et AZURE_SEARCH_KEY")
        return False
    
    try:
        # Cr√©er le client
        credential = AzureKeyCredential(key)
        index_client = SearchIndexClient(endpoint=endpoint, credential=credential)
        
        # D√©finir les champs de l'index
        fields = [
            SimpleField(
                name="id",
                type=SearchFieldDataType.String,
                key=True,
                sortable=True,
                filterable=True,
                facetable=True
            ),
            SearchableField(
                name="title",
                type=SearchFieldDataType.String,
                searchable=True,
                filterable=True,
                sortable=True
            ),
            SearchableField(
                name="content",
                type=SearchFieldDataType.String,
                searchable=True,
                analyzer_name="fr.lucene"  # Analyseur fran√ßais
            ),
            SimpleField(
                name="container",
                type=SearchFieldDataType.String,
                filterable=True,
                facetable=True,
                sortable=True
            ),
            SimpleField(
                name="blob_name",
                type=SearchFieldDataType.String,
                filterable=True,
                sortable=True
            ),
            SimpleField(
                name="document_type",
                type=SearchFieldDataType.String,
                filterable=True,
                facetable=True
            ),
            SimpleField(
                name="last_modified",
                type=SearchFieldDataType.DateTimeOffset,
                filterable=True,
                sortable=True
            ),
            SimpleField(
                name="size",
                type=SearchFieldDataType.Int64,
                filterable=True,
                sortable=True
            ),
            SearchableField(
                name="tags",
                type=SearchFieldDataType.Collection(SearchFieldDataType.String),
                searchable=True,
                filterable=True,
                facetable=True
            ),
            SearchableField(
                name="metadata",
                type=SearchFieldDataType.String,
                searchable=True
            )
        ]
        
        # Cr√©er l'index
        index = SearchIndex(
            name=index_name,
            fields=fields,
            cors_options={
                "allowed_origins": ["*"],
                "max_age_in_seconds": 300
            }
        )
        
        # V√©rifier si l'index existe d√©j√†
        try:
            existing_index = index_client.get_index(index_name)
            print(f"‚ö†Ô∏è L'index '{index_name}' existe d√©j√†")
            
            response = input("Voulez-vous le recr√©er ? (o/n): ")
            if response.lower() == 'o':
                index_client.delete_index(index_name)
                print("üóëÔ∏è Index supprim√©")
            else:
                print("‚ùå Op√©ration annul√©e")
                return False
        except:
            pass
        
        # Cr√©er le nouvel index
        result = index_client.create_index(index)
        print(f"‚úÖ Index '{result.name}' cr√©√© avec succ√®s")
        print(f"   - {len(result.fields)} champs d√©finis")
        print(f"   - Analyseur fran√ßais activ√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de l'index: {e}")
        return False

def main():
    print("üîç Cr√©ation de l'index Azure Search pour documents juridiques")
    print("-" * 60)
    
    # V√©rifier les imports
    try:
        import azure.search.documents
        print("‚úÖ Module azure-search-documents install√©")
    except ImportError:
        print("‚ùå Module azure-search-documents non install√©")
        print("Ex√©cutez: pip install azure-search-documents")
        return
    
    # Cr√©er l'index
    if create_juridique_index():
        print("\n‚úÖ Configuration termin√©e!")
        print("\nProchaines √©tapes:")
        print("1. Lancer l'application principale")
        print("2. Les documents seront index√©s automatiquement")
        print("3. La recherche avanc√©e sera disponible")
    else:
        print("\n‚ùå √âchec de la cr√©ation de l'index")

if __name__ == "__main__":
    main()