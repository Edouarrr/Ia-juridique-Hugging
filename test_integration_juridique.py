"""Script de test pour v√©rifier l'int√©gration du module juridique"""

import streamlit as st
import sys
import os

# Ajouter le r√©pertoire parent au path si n√©cessaire
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_imports():
    """Teste que tous les imports fonctionnent"""
    st.header("üß™ Test des imports")
    
    imports_status = {}
    
    # Test du cahier des charges
    try:
        from config.cahier_des_charges import (
            CABINET_INFO, 
            STRUCTURES_ACTES,
            validate_acte
        )
        imports_status['config.cahier_des_charges'] = "‚úÖ OK"
    except ImportError as e:
        imports_status['config.cahier_des_charges'] = f"‚ùå Erreur: {str(e)}"
    
    # Test du module de g√©n√©ration
    try:
        from modules.generation_juridique import (
            GenerateurActesJuridiques,
            ActeJuridique
        )
        imports_status['modules.generation_juridique'] = "‚úÖ OK"
    except ImportError as e:
        imports_status['modules.generation_juridique'] = f"‚ùå Erreur: {str(e)}"
    
    # Test du module d'int√©gration
    try:
        from modules.integration_juridique import (
            AnalyseurRequeteJuridique,
            enhance_search_with_generation
        )
        imports_status['modules.integration_juridique'] = "‚úÖ OK"
    except ImportError as e:
        imports_status['modules.integration_juridique'] = f"‚ùå Erreur: {str(e)}"
    
    # Afficher les r√©sultats
    for module, status in imports_status.items():
        st.write(f"**{module}:** {status}")
    
    return all("‚úÖ" in status for status in imports_status.values())

def test_analyseur():
    """Teste l'analyseur de requ√™tes juridiques"""
    st.header("üîç Test de l'analyseur juridique")
    
    try:
        from modules.integration_juridique import AnalyseurRequeteJuridique
        
        analyseur = AnalyseurRequeteJuridique()
        
        # Cas de test
        test_cases = [
            "r√©diger plainte contre Vinci pour abus de biens sociaux",
            "cr√©er conclusions de nullit√© @affaire_martin",
            "g√©n√©rer plainte avec constitution de partie civile contre A, B et C",
            "√©crire observations article 175 CPP",
            "simple recherche sans g√©n√©ration"
        ]
        
        for query in test_cases:
            st.write(f"\n**Requ√™te:** `{query}`")
            
            analyse = analyseur.analyser_requete(query)
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.write("**G√©n√©ration d√©tect√©e:**", "‚úÖ" if analyse['is_generation'] else "‚ùå")
                st.write("**Type d'acte:**", analyse['type_acte'] or "Non d√©tect√©")
            
            with col2:
                st.write("**Parties:**")
                if analyse['parties']['defendeurs']:
                    st.write("- D√©fendeurs:", ', '.join(analyse['parties']['defendeurs']))
                else:
                    st.write("- Aucune partie d√©tect√©e")
            
            with col3:
                st.write("**Infractions:**")
                if analyse['infractions']:
                    st.write("- ", ', '.join(analyse['infractions']))
                else:
                    st.write("- Aucune infraction d√©tect√©e")
            
            st.markdown("---")
        
        return True
        
    except Exception as e:
        st.error(f"Erreur lors du test de l'analyseur: {str(e)}")
        return False

def test_generation_simple():
    """Teste la g√©n√©ration d'un acte simple"""
    st.header("üìù Test de g√©n√©ration d'acte")
    
    try:
        from modules.generation_juridique import GenerateurActesJuridiques
        
        generateur = GenerateurActesJuridiques()
        
        # Param√®tres de test
        params_test = {
            'parties': {
                'demandeurs': ['M. Test'],
                'defendeurs': ['Soci√©t√© Example SAS']
            },
            'infractions': ['Abus de biens sociaux'],
            'contexte': 'Test de g√©n√©ration',
            'pieces': [
                {'titre': 'Pi√®ce test 1', 'date': '01/01/2024'},
                {'titre': 'Pi√®ce test 2', 'date': '02/01/2024'}
            ]
        }
        
        with st.spinner("G√©n√©ration en cours..."):
            # G√©n√©rer une plainte simple
            acte = generateur.generer_acte('plainte_simple', params_test)
            
            st.success("‚úÖ Acte g√©n√©r√© avec succ√®s !")
            
            # Afficher les m√©tadonn√©es
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Type", acte.type_acte)
            with col2:
                st.metric("Mots", f"{acte.metadata['longueur_mots']:,}")
            with col3:
                st.metric("Pi√®ces", len(acte.pieces))
            
            # Afficher un extrait
            st.text_area(
                "Extrait de l'acte g√©n√©r√©",
                value=acte.contenu[:500] + "...",
                height=200
            )
            
            return True
            
    except Exception as e:
        st.error(f"Erreur lors de la g√©n√©ration: {str(e)}")
        import traceback
        st.code(traceback.format_exc())
        return False

def test_validation():
    """Teste la validation selon le cahier des charges"""
    st.header("‚úÖ Test de validation CDC")
    
    try:
        from config.cahier_des_charges import validate_acte
        
        # Cr√©er un contenu test
        contenu_test = "Test " * 500  # 500 mots
        
        # Tester la validation
        validation = validate_acte(contenu_test, 'plainte_simple')
        
        if validation['valid']:
            st.success("‚úÖ Document valide selon le CDC")
        else:
            st.warning("‚ö†Ô∏è Document non conforme")
            
        st.write("**Nombre de mots:**", validation['word_count'])
        
        if validation['errors']:
            st.write("**Erreurs:**")
            for error in validation['errors']:
                st.error(f"- {error}")
                
        if validation['warnings']:
            st.write("**Avertissements:**")
            for warning in validation['warnings']:
                st.warning(f"- {warning}")
        
        return True
        
    except Exception as e:
        st.error(f"Erreur lors de la validation: {str(e)}")
        return False

def main():
    """Fonction principale de test"""
    st.set_page_config(
        page_title="Test Int√©gration Juridique",
        page_icon="üß™",
        layout="wide"
    )
    
    st.title("üß™ Test d'int√©gration du module juridique")
    
    st.info("""
    Ce script teste l'int√©gration du cahier des charges juridique dans votre application.
    Il v√©rifie que tous les modules sont correctement install√©s et fonctionnent.
    """)
    
    # Tests
    all_tests_passed = True
    
    # Test 1 : Imports
    if test_imports():
        st.success("‚úÖ Tous les imports fonctionnent")
    else:
        st.error("‚ùå Certains imports ont √©chou√©")
        all_tests_passed = False
        st.stop()
    
    st.markdown("---")
    
    # Test 2 : Analyseur
    if test_analyseur():
        st.success("‚úÖ L'analyseur juridique fonctionne")
    else:
        st.error("‚ùå L'analyseur juridique a √©chou√©")
        all_tests_passed = False
    
    st.markdown("---")
    
    # Test 3 : G√©n√©ration
    if test_generation_simple():
        st.success("‚úÖ La g√©n√©ration d'actes fonctionne")
    else:
        st.error("‚ùå La g√©n√©ration a √©chou√©")
        all_tests_passed = False
    
    st.markdown("---")
    
    # Test 4 : Validation
    if test_validation():
        st.success("‚úÖ La validation CDC fonctionne")
    else:
        st.error("‚ùå La validation a √©chou√©")
        all_tests_passed = False
    
    # R√©sultat final
    st.markdown("---")
    st.header("üìä R√©sultat des tests")
    
    if all_tests_passed:
        st.balloons()
        st.success("""
        üéâ **Tous les tests sont pass√©s !**
        
        Votre int√©gration est fonctionnelle. Vous pouvez maintenant :
        - Utiliser la commande `r√©diger plainte contre X pour Y` dans la recherche
        - Cliquer sur le bouton "‚öñÔ∏è Actes juridiques" 
        - G√©n√©rer tous types d'actes juridiques conformes au cahier des charges
        """)
    else:
        st.error("""
        ‚ùå **Certains tests ont √©chou√©**
        
        V√©rifiez :
        1. Que tous les fichiers sont cr√©√©s aux bons endroits
        2. Que les imports sont corrects
        3. Les messages d'erreur ci-dessus pour plus de d√©tails
        """)
    
    # Test interactif
    st.markdown("---")
    st.header("üéÆ Test interactif")
    
    query = st.text_input(
        "Testez une requ√™te juridique",
        value="r√©diger plainte contre Soci√©t√© ABC pour corruption",
        help="Exemples : r√©diger plainte, cr√©er conclusions, g√©n√©rer assignation..."
    )
    
    if st.button("Analyser la requ√™te"):
        try:
            from modules.integration_juridique import AnalyseurRequeteJuridique
            
            analyseur = AnalyseurRequeteJuridique()
            analyse = analyseur.analyser_requete(query)
            
            st.json(analyse)
            
        except Exception as e:
            st.error(f"Erreur: {str(e)}")

if __name__ == "__main__":
    main()