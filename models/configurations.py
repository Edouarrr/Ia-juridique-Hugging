# models/configurations.py
"""Configurations pour les templates de g√©n√©ration de documents"""

from typing import Dict, List, Any
import json
from modules.dataclasses import StyleConfig

# ========== CONFIGURATIONS DE STYLE PAR D√âFAUT ==========

DEFAULT_STYLE_CONFIGS = {
    "formel": StyleConfig(
        name="Formel traditionnel",
        formality_level="tres_formel",
        sentence_length_target=25,
        paragraph_length_target=150,
        use_numbering=True,
        numbering_style="numeric",
        common_phrases=[
            "Il convient de relever que",
            "Il r√©sulte de ce qui pr√©c√®de que",
            "Force est de constater que",
            "Il appara√Æt que",
            "Il en d√©coule que",
            "Au surplus",
            "En tout √©tat de cause",
            "Attendu que",
            "Consid√©rant que",
            "Il √©chet de pr√©ciser que"
        ],
        transition_words=[
            "toutefois", "cependant", "n√©anmoins", "par ailleurs",
            "en outre", "de plus", "ainsi", "donc", "par cons√©quent",
            "d√®s lors", "en effet", "or", "mais", "enfin",
            "d'une part", "d'autre part", "au demeurant", "partant"
        ],
        preferred_conjunctions=[
            "toutefois", "n√©anmoins", "cependant", "or", "partant"
        ],
        technical_terms_density="high",
        active_voice_preference=0.3,
        citation_style="detailed"
    ),
    
    "moderne": StyleConfig(
        name="Moderne simplifi√©",
        formality_level="moderne",
        sentence_length_target=15,
        paragraph_length_target=80,
        use_numbering=True,
        numbering_style="dash",
        common_phrases=[
            "Il faut noter que",
            "On constate que",
            "Il est √©tabli que",
            "Les faits montrent que",
            "L'analyse r√©v√®le que"
        ],
        transition_words=[
            "de plus", "√©galement", "ensuite", "par ailleurs",
            "cependant", "toutefois", "n√©anmoins", "ainsi"
        ],
        preferred_conjunctions=[
            "mais", "donc", "car", "ainsi", "cependant"
        ],
        technical_terms_density="medium",
        active_voice_preference=0.6,
        citation_style="standard"
    ),
    
    "persuasif": StyleConfig(
        name="Persuasif argument√©",
        formality_level="formel",
        sentence_length_target=20,
        paragraph_length_target=120,
        use_numbering=True,
        numbering_style="numeric",
        common_phrases=[
            "Il est manifeste que",
            "√Ä l'√©vidence",
            "Sans conteste",
            "Il ne fait aucun doute que",
            "Force est d'admettre que",
            "Il est ind√©niable que"
        ],
        transition_words=[
            "qui plus est", "au surplus", "mieux encore",
            "√† cet √©gard", "dans ces conditions", "partant",
            "en cons√©quence", "d√®s lors", "au demeurant"
        ],
        preferred_conjunctions=[
            "d√®s lors", "partant", "ainsi", "en cons√©quence"
        ],
        technical_terms_density="medium",
        active_voice_preference=0.5,
        citation_style="detailed"
    ),
    
    "synthetique": StyleConfig(
        name="Synth√©tique efficace",
        formality_level="moderne",
        sentence_length_target=12,
        paragraph_length_target=60,
        use_numbering=True,
        numbering_style="bullet",
        common_phrases=[
            "En r√©sum√©",
            "Les points cl√©s sont",
            "Il ressort que",
            "L'essentiel est"
        ],
        transition_words=[
            "ensuite", "puis", "enfin", "d'abord",
            "premi√®rement", "deuxi√®mement", "en conclusion"
        ],
        preferred_conjunctions=[
            "et", "ou", "donc", "ainsi"
        ],
        technical_terms_density="low",
        active_voice_preference=0.8,
        citation_style="minimal"
    )
}

# ========== CLASSE DE CONFIGURATION PRINCIPALE ==========

class DocumentConfigurations:
    """Gestionnaire des configurations de templates"""
    
    # Configuration pour les plaintes
    PLAINTE_CONFIG = {
        'sections': [
            {
                'id': 'en_tete',
                'title': 'En-t√™te',
                'required': True,
                'fields': [
                    {'name': 'tribunal', 'type': 'text', 'label': 'Tribunal comp√©tent'},
                    {'name': 'date', 'type': 'date', 'label': 'Date'},
                    {'name': 'reference', 'type': 'text', 'label': 'R√©f√©rence'}
                ]
            },
            {
                'id': 'parties',
                'title': 'Identification des parties',
                'required': True,
                'fields': [
                    {'name': 'plaignant', 'type': 'party', 'label': 'Plaignant'},
                    {'name': 'mis_en_cause', 'type': 'party', 'label': 'Mis en cause'}
                ]
            },
            {
                'id': 'faits',
                'title': 'Expos√© des faits',
                'required': True,
                'content_type': 'narrative',
                'min_length': 500
            },
            {
                'id': 'infractions',
                'title': 'Qualification juridique',
                'required': True,
                'fields': [
                    {'name': 'infractions', 'type': 'multi_select', 'label': 'Infractions'}
                ]
            },
            {
                'id': 'prejudice',
                'title': 'Pr√©judice subi',
                'required': True,
                'fields': [
                    {'name': 'montant', 'type': 'currency', 'label': 'Montant du pr√©judice'},
                    {'name': 'description', 'type': 'textarea', 'label': 'Description'}
                ]
            },
            {
                'id': 'demandes',
                'title': 'Demandes',
                'required': True,
                'content_type': 'list'
            }
        ],
        'style': {
            'format': 'formal',
            'tone': 'juridique',
            'references': 'codes_penaux'
        }
    }
    
    # Configuration pour les conclusions
    CONCLUSIONS_CONFIG = {
        'sections': [
            {
                'id': 'rappel_procedure',
                'title': 'Rappel de la proc√©dure',
                'required': True,
                'auto_generate': True
            },
            {
                'id': 'faits_procedure',
                'title': 'Faits et proc√©dure',
                'required': True,
                'subsections': [
                    'chronologie',
                    'actes_procedure',
                    'incidents'
                ]
            },
            {
                'id': 'discussion',
                'title': 'Discussion',
                'required': True,
                'subsections': [
                    'moyens_fond',
                    'moyens_forme',
                    'reponse_adverse'
                ]
            },
            {
                'id': 'dispositif',
                'title': 'Dispositif',
                'required': True,
                'format': 'numbered_list'
            }
        ],
        'numbering': {
            'style': 'decimal',
            'levels': 3,
            'format': '1. / 1.1. / 1.1.1.'
        }
    }
    
    # Configuration pour les courriers
    COURRIER_CONFIG = {
        'types': {
            'mise_en_demeure': {
                'tone': 'ferme',
                'structure': [
                    'objet',
                    'rappel_faits',
                    'obligations',
                    'delai',
                    'consequences'
                ]
            },
            'reponse_contradictoire': {
                'tone': 'courtois',
                'structure': [
                    'accus√©_reception',
                    'analyse_demandes',
                    'position_client',
                    'propositions'
                ]
            },
            'notification': {
                'tone': 'neutre',
                'structure': [
                    'objet',
                    'information',
                    'modalites',
                    'contact'
                ]
            }
        }
    }
    
    # Configuration pour l'analyse
    ANALYSE_CONFIG = {
        'criteres': [
            {
                'id': 'forces',
                'title': 'Points forts',
                'icon': '‚úÖ',
                'weight': 1.0
            },
            {
                'id': 'faiblesses',
                'title': 'Points faibles',
                'icon': '‚ö†Ô∏è',
                'weight': 1.0
            },
            {
                'id': 'opportunites',
                'title': 'Opportunit√©s',
                'icon': 'üí°',
                'weight': 0.8
            },
            {
                'id': 'risques',
                'title': 'Risques',
                'icon': 'üö®',
                'weight': 1.2
            }
        ],
        'scoring': {
            'methode': 'pond√©r√©e',
            'echelle': [1, 10],
            'seuils': {
                'favorable': 7,
                'neutre': 5,
                'defavorable': 3
            }
        }
    }
    
    # Templates de phrases juridiques
    PHRASES_JURIDIQUES = {
        'introduction': {
            'plainte': [
                "J'ai l'honneur de porter plainte contre {partie} pour les faits suivants :",
                "Par la pr√©sente, je souhaite porter √† votre connaissance les agissements d√©lictueux de {partie}",
                "Je soussign√©(e), {plaignant}, porte plainte pour les faits ci-apr√®s expos√©s"
            ],
            'conclusions': [
                "Pour les motifs ci-apr√®s d√©velopp√©s, le {demandeur} a l'honneur d'exposer ce qui suit :",
                "Il sera d√©montr√© dans les pr√©sentes conclusions que {these_principale}",
                "Les d√©veloppements qui suivent √©tabliront que {objectif}"
            ],
            'assignation': [
                "L'an {annee} et le {date}, √† la requ√™te de {demandeur}",
                "Nous, {huissier}, huissier de justice, avons donn√© assignation √† {defendeur}",
                "Par exploit de notre minist√®re, assignation est donn√©e √† {partie}"
            ]
        },
        'transition': {
            'moreover': [
                "En outre,",
                "Par ailleurs,",
                "De surcro√Æt,",
                "Qui plus est,"
            ],
            'consequence': [
                "En cons√©quence,",
                "Par cons√©quent,",
                "Il s'ensuit que",
                "Partant,"
            ],
            'opposition': [
                "Cependant,",
                "N√©anmoins,",
                "Pour autant,",
                "Toutefois,"
            ]
        },
        'conclusion': {
            'plainte': [
                "C'est dans ces conditions que je sollicite l'ouverture d'une enqu√™te",
                "Au vu de ces √©l√©ments, je demande que des poursuites soient engag√©es",
                "Je me constitue partie civile et demande r√©paration de mon pr√©judice"
            ],
            'conclusions': [
                "PAR CES MOTIFS, plaise au Tribunal de :",
                "C'est pourquoi il est demand√© au Tribunal de :",
                "En cons√©quence de tout ce qui pr√©c√®de, le Tribunal est pri√© de :"
            ]
        }
    }
    
    # Formules de politesse
    FORMULES_POLITESSE = {
        'courrier': {
            'debut': {
                'formel': [
                    "Monsieur le Pr√©sident,",
                    "Madame, Monsieur,",
                    "Ma√Ætre,"
                ],
                'neutre': [
                    "Madame, Monsieur,",
                    "Cher Confr√®re,",
                    "Ch√®re Cons≈ìur,"
                ]
            },
            'fin': {
                'formel': [
                    "Je vous prie d'agr√©er, Monsieur le Pr√©sident, l'expression de ma haute consid√©ration.",
                    "Veuillez agr√©er, Madame, Monsieur, l'expression de mes salutations distingu√©es.",
                    "Je vous prie de croire, Ma√Ætre, en l'assurance de mes sentiments respectueux."
                ],
                'neutre': [
                    "Cordialement,",
                    "Bien √† vous,",
                    "Sinc√®res salutations,"
                ]
            }
        }
    }
    
    # Configuration des pi√®ces
    PIECES_CONFIG = {
        'categories': [
            {
                'id': 'contrats',
                'title': 'Contrats et conventions',
                'types': ['contrat', 'avenant', 'convention', 'protocole']
            },
            {
                'id': 'correspondances',
                'title': 'Correspondances',
                'types': ['courrier', 'email', 'mise_en_demeure', 'notification']
            },
            {
                'id': 'expertises',
                'title': 'Expertises et rapports',
                'types': ['expertise', 'rapport', 'constat', 'audit']
            },
            {
                'id': 'comptables',
                'title': 'Documents comptables',
                'types': ['facture', 'devis', 'bon_commande', 'releve']
            },
            {
                'id': 'judiciaires',
                'title': 'Actes judiciaires',
                'types': ['assignation', 'conclusions', 'jugement', 'ordonnance']
            }
        ],
        'numerotation': {
            'format': 'Pi√®ce n¬∞{numero}',
            'groupement': 'par_categorie',
            'tri': 'chronologique'
        }
    }
    
    # Styles de r√©daction
    STYLES_REDACTION = {
        'formel': {
            'vocabulaire': 'soutenu',
            'phrases': 'complexes',
            'ton': 'distant',
            'connecteurs': ['nonobstant', 'attendu que', 'consid√©rant']
        },
        'moderne': {
            'vocabulaire': 'accessible',
            'phrases': 'courtes',
            'ton': 'direct',
            'connecteurs': ['en effet', 'par ailleurs', 'donc']
        },
        'persuasif': {
            'vocabulaire': 'imag√©',
            'phrases': 'rythm√©es',
            'ton': 'convaincant',
            'connecteurs': ['manifestement', 'indubitablement', '√† l\'√©vidence']
        }
    }
    
    # Configuration des timelines
    TIMELINE_CONFIG = {
        'elements': [
            {
                'type': 'evenement',
                'icon': 'üìÖ',
                'couleur': '#3498db'
            },
            {
                'type': 'document',
                'icon': 'üìÑ',
                'couleur': '#2ecc71'
            },
            {
                'type': 'procedure',
                'icon': '‚öñÔ∏è',
                'couleur': '#e74c3c'
            },
            {
                'type': 'expertise',
                'icon': 'üîç',
                'couleur': '#f39c12'
            }
        ],
        'affichage': {
            'orientation': 'verticale',
            'groupement': 'par_mois',
            'details': 'au_survol'
        }
    }
    
    # Mapping des infractions
    INFRACTIONS_MAPPING = {
        'escroquerie': {
            'article': '313-1',
            'code': 'p√©nal',
            'peine_max': '5 ans et 375 000 ‚Ç¨',
            'elements': ['man≈ìuvres frauduleuses', 'tromperie', 'remise de biens']
        },
        'abus_de_confiance': {
            'article': '314-1',
            'code': 'p√©nal',
            'peine_max': '3 ans et 375 000 ‚Ç¨',
            'elements': ['d√©tournement', 'pr√©judice', 'remise volontaire']
        },
        'abus_de_biens_sociaux': {
            'article': 'L241-3',
            'code': 'commerce',
            'peine_max': '5 ans et 375 000 ‚Ç¨',
            'elements': ['usage contraire', 'int√©r√™t personnel', 'mauvaise foi']
        },
        'faux': {
            'article': '441-1',
            'code': 'p√©nal',
            'peine_max': '3 ans et 45 000 ‚Ç¨',
            'elements': ['alt√©ration', 'v√©rit√©', 'pr√©judice']
        }
    }
    
    # Configuration des validations
    VALIDATION_RULES = {
        'plainte': {
            'min_sections': 4,
            'required_fields': ['plaignant', 'mis_en_cause', 'faits', 'infractions'],
            'min_words': 500
        },
        'conclusions': {
            'min_sections': 3,
            'required_fields': ['parties', 'faits', 'dispositif'],
            'min_words': 1000
        },
        'assignation': {
            'min_sections': 5,
            'required_fields': ['demandeur', 'defendeur', 'tribunal', 'date_audience'],
            'min_words': 800
        }
    }
    
    # Templates d'emails
    EMAIL_TEMPLATES = {
        'envoi_pieces': {
            'objet': 'Transmission de pi√®ces - Dossier {reference}',
            'corps': """Ma√Ætre,
Suite √† notre entretien de ce jour, je vous prie de bien vouloir trouver ci-joint les pi√®ces suivantes :
{liste_pieces}
Ces documents viennent compl√©ter le dossier r√©f√©renc√© {reference}.
Je reste √† votre disposition pour tout compl√©ment d'information.
Bien cordialement,
{expediteur}"""
        },
        'demande_informations': {
            'objet': "Demande d'informations compl√©mentaires - {dossier}",
            'corps': """Cher Confr√®re,
Dans le cadre du dossier {dossier}, j'aurais besoin des informations suivantes :
{liste_questions}
Je vous serais reconnaissant de bien vouloir me faire parvenir ces √©l√©ments dans les meilleurs d√©lais.
Bien confraternellement,
{expediteur}"""
        }
    }
    
    # Configuration des exports
    EXPORT_CONFIG = {
        'formats': {
            'word': {
                'extension': '.docx',
                'template': 'cabinet_template.docx',
                'styles': True
            },
            'pdf': {
                'extension': '.pdf',
                'compression': True,
                'protection': False
            },
            'bundle': {
                'extension': '.zip',
                'inclure_pieces': True,
                'structure': 'hierarchique'
            }
        },
        'naming': {
            'pattern': '{date}_{type}_{reference}_{version}',
            'date_format': 'YYYYMMDD',
            'version_format': 'v{numero}'
        }
    }
    
    # Actions rapides
    QUICK_ACTIONS = {
        'redaction': [
            {'id': 'plainte', 'label': 'Nouvelle plainte', 'icon': 'üìù'},
            {'id': 'conclusions', 'label': 'Conclusions', 'icon': 'üìã'},
            {'id': 'assignation', 'label': 'Assignation', 'icon': 'üì®'},
            {'id': 'courrier', 'label': 'Courrier', 'icon': '‚úâÔ∏è'}
        ],
        'analyse': [
            {'id': 'forces_faiblesses', 'label': 'Analyse SWOT', 'icon': 'üìä'},
            {'id': 'chronologie', 'label': 'Timeline', 'icon': 'üìÖ'},
            {'id': 'pieces', 'label': 'Inventaire pi√®ces', 'icon': 'üìÅ'},
            {'id': 'synthese', 'label': 'Synth√®se', 'icon': 'üìù'}
        ],
        'gestion': [
            {'id': 'import', 'label': 'Importer', 'icon': 'üì•'},
            {'id': 'export', 'label': 'Exporter', 'icon': 'üì§'},
            {'id': 'email', 'label': 'Envoyer', 'icon': 'üìß'},
            {'id': 'planning', 'label': "Plan d'action", 'icon': 'üéØ'}
        ]
    }
    
    # M√©thodes de classe
    @classmethod
    def get_template_config(cls, template_type: str) -> Dict[str, Any]:
        """R√©cup√®re la configuration d'un template"""
        configs = {
            'plainte': cls.PLAINTE_CONFIG,
            'conclusions': cls.CONCLUSIONS_CONFIG,
            'courrier': cls.COURRIER_CONFIG,
            'analyse': cls.ANALYSE_CONFIG
        }
        return configs.get(template_type, {})
    
    @classmethod
    def get_phrases(cls, category: str, subcategory: str = None) -> List[str]:
        """R√©cup√®re des phrases types"""
        if subcategory:
            return cls.PHRASES_JURIDIQUES.get(category, {}).get(subcategory, [])
        return cls.PHRASES_JURIDIQUES.get(category, {})
    
    @classmethod
    def get_validation_rules(cls, doc_type: str) -> Dict[str, Any]:
        """R√©cup√®re les r√®gles de validation"""
        return cls.VALIDATION_RULES.get(doc_type, {})
    
    @classmethod
    def get_infraction_details(cls, infraction: str) -> Dict[str, Any]:
        """R√©cup√®re les d√©tails d'une infraction"""
        # Normaliser la cl√©
        key = infraction.lower().replace(' ', '_').replace("'", "")
        return cls.INFRACTIONS_MAPPING.get(key, {})
    
    @classmethod
    def get_export_format(cls, format_name: str) -> Dict[str, Any]:
        """R√©cup√®re la configuration d'export"""
        return cls.EXPORT_CONFIG['formats'].get(format_name, {})
    
    @classmethod
    def get_quick_actions(cls, category: str = None) -> List[Dict[str, str]]:
        """R√©cup√®re les actions rapides"""
        if category:
            return cls.QUICK_ACTIONS.get(category, [])
        
        # Retourner toutes les actions
        all_actions = []
        for actions in cls.QUICK_ACTIONS.values():
            all_actions.extend(actions)
        return all_actions
    
    @classmethod
    def validate_document(cls, doc_type: str, document: Dict[str, Any]) -> Dict[str, Any]:
        """Valide un document selon les r√®gles"""
        rules = cls.get_validation_rules(doc_type)
        validation_result = {
            'valid': True,
            'errors': [],
            'warnings': []
        }
        
        # V√©rifier les champs requis
        for field in rules.get('required_fields', []):
            if field not in document or not document[field]:
                validation_result['valid'] = False
                validation_result['errors'].append(f"Champ requis manquant : {field}")
        
        # V√©rifier le nombre de mots
        content = document.get('content', '')
        word_count = len(content.split())
        min_words = rules.get('min_words', 0)
        
        if word_count < min_words:
            validation_result['warnings'].append(
                f"Document trop court : {word_count} mots (minimum recommand√© : {min_words})"
            )
        
        return validation_result
    
    @classmethod
    def format_piece_number(cls, numero: int, categorie: str = None) -> str:
        """Formate un num√©ro de pi√®ce"""
        pattern = cls.PIECES_CONFIG['numerotation']['format']
        return pattern.format(numero=numero)
    
    @classmethod
    def get_style_config(cls, style_name: str) -> Dict[str, Any]:
        """R√©cup√®re la configuration d'un style"""
        return cls.STYLES_REDACTION.get(style_name, cls.STYLES_REDACTION['moderne'])