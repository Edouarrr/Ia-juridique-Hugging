# pages/assistant.py
"""Page d'assistant interactif - Chatbot juridique expert"""

import streamlit as st
import asyncio
from datetime import datetime
import json
from typing import Dict, List, Optional

from config.app_config import TYPES_INFRACTIONS
from managers import LLMManager, display_model_selector, display_model_params
from utils import load_custom_css, create_alert_box, format_date, sanitize_text

def show():
    """Affiche la page d'assistant interactif"""
    load_custom_css()
    
    st.title("üí¨ Assistant juridique interactif")
    st.markdown("Posez vos questions juridiques et obtenez des r√©ponses d'expert instantan√©es")
    
    # Initialiser le gestionnaire LLM et l'historique
    if 'llm_manager' not in st.session_state:
        st.session_state.llm_manager = LLMManager()
    
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    
    if 'chat_sessions' not in st.session_state:
        st.session_state.chat_sessions = {}
    
    if 'current_session_id' not in st.session_state:
        st.session_state.current_session_id = generate_session_id()
    
    # Layout en colonnes
    col1, col2 = st.columns([3, 1])
    
    with col1:
        # Zone de chat principale
        show_chat_interface()
    
    with col2:
        # Panneau de configuration
        show_config_panel()

def show_chat_interface():
    """Interface de chat principale"""
    # Conteneur pour l'historique des messages
    chat_container = st.container()
    
    with chat_container:
        # Afficher l'historique
        for message in st.session_state.chat_history:
            display_message(message)
    
    # S√©parateur
    st.markdown("---")
    
    # Zone de saisie avec colonnes
    col1, col2 = st.columns([5, 1])
    
    with col1:
        user_input = st.text_area(
            "Votre question juridique",
            height=100,
            placeholder="""Exemples de questions :
- Quels sont les √©l√©ments constitutifs de l'abus de biens sociaux ?
- Quelle est la jurisprudence r√©cente sur la corruption ?
- Comment prouver l'√©l√©ment intentionnel dans une escroquerie ?
- Quelles sont les sanctions encourues pour du blanchiment ?""",
            key="user_input"
        )
    
    with col2:
        # Boutons d'action empil√©s
        send_button = st.button(
            "üì§ Envoyer",
            type="primary",
            use_container_width=True,
            disabled=not user_input
        )
        
        clear_button = st.button(
            "üóëÔ∏è Effacer",
            use_container_width=True
        )
        
        if st.session_state.chat_history:
            export_button = st.button(
                "üíæ Exporter",
                use_container_width=True
            )
        else:
            export_button = False
    
    # Actions
    if send_button and user_input:
        handle_user_input(user_input)
    
    if clear_button:
        if st.session_state.chat_history:
            # Sauvegarder la session avant d'effacer
            save_current_session()
        st.session_state.chat_history = []
        st.rerun()
    
    if export_button:
        export_chat_history()
    
    # Suggestions de questions
    show_question_suggestions()

def show_config_panel():
    """Panneau de configuration du chat"""
    st.markdown("### ‚öôÔ∏è Configuration")
    
    # S√©lection du mod√®le
    with st.expander("Mod√®le IA", expanded=True):
        provider, model = display_model_selector()
        
        # Bouton pour appliquer
        if st.button("Appliquer", key="apply_model"):
            try:
                st.session_state.llm_manager.set_current_model(provider, model)
                st.success(f"Mod√®le {provider}/{model} activ√©")
            except Exception as e:
                st.error(f"Erreur : {str(e)}")
    
    # Param√®tres avanc√©s
    with st.expander("Param√®tres avanc√©s"):
        params = display_model_params()
        st.session_state['chat_params'] = params
    
    # Mode de r√©ponse
    with st.expander("Mode de r√©ponse"):
        response_mode = st.radio(
            "Style de r√©ponse",
            ["Concis", "D√©taill√©", "P√©dagogique"],
            index=1
        )
        
        include_sources = st.checkbox(
            "Inclure les sources",
            value=True
        )
        
        verify_jurisprudence = st.checkbox(
            "V√©rifier les jurisprudences",
            value=True
        )
        
        st.session_state['response_config'] = {
            'mode': response_mode,
            'include_sources': include_sources,
            'verify_jurisprudence': verify_jurisprudence
        }
    
    # Contexte sp√©cialis√©
    with st.expander("Contexte"):
        specialization = st.selectbox(
            "Sp√©cialisation",
            ["G√©n√©ral"] + TYPES_INFRACTIONS
        )
        
        expertise_level = st.select_slider(
            "Niveau d'expertise",
            ["D√©butant", "Interm√©diaire", "Expert"],
            value="Interm√©diaire"
        )
        
        st.session_state['context_config'] = {
            'specialization': specialization,
            'expertise_level': expertise_level
        }
    
    # Historique des sessions
    with st.expander("Sessions sauvegard√©es"):
        show_saved_sessions()

def handle_user_input(user_input: str):
    """Traite l'entr√©e utilisateur et g√©n√®re une r√©ponse"""
    # Nettoyer l'entr√©e
    clean_input = sanitize_text(user_input)
    
    # Ajouter le message utilisateur
    user_message = {
        'role': 'user',
        'content': clean_input,
        'timestamp': datetime.now()
    }
    st.session_state.chat_history.append(user_message)
    
    # Afficher le message utilisateur imm√©diatement
    display_message(user_message)
    
    # G√©n√©rer la r√©ponse
    with st.spinner("L'assistant r√©fl√©chit..."):
        try:
            # Pr√©parer le contexte
            system_prompt = create_system_prompt()
            
            # Obtenir les param√®tres
            params = st.session_state.get('chat_params', {})
            
            # G√©n√©rer la r√©ponse de mani√®re asynchrone
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            response = loop.run_until_complete(
                st.session_state.llm_manager.generate_response(
                    clean_input,
                    system_prompt=system_prompt,
                    **params
                )
            )
            
            # Ajouter la r√©ponse √† l'historique
            assistant_message = {
                'role': 'assistant',
                'content': response,
                'timestamp': datetime.now(),
                'model': f"{st.session_state.llm_manager.current_provider}/{st.session_state.llm_manager.current_model}"
            }
            st.session_state.chat_history.append(assistant_message)
            
            # Afficher la r√©ponse
            display_message(assistant_message)
            
            # V√©rifier les jurisprudences si demand√©
            if st.session_state.get('response_config', {}).get('verify_jurisprudence'):
                check_jurisprudences_in_response(response)
            
            # Incr√©menter le compteur de messages
            st.session_state['messages_count'] = st.session_state.get('messages_count', 0) + 1
            
        except Exception as e:
            st.error(f"Erreur lors de la g√©n√©ration de la r√©ponse : {str(e)}")
            error_message = {
                'role': 'system',
                'content': f"Erreur : {str(e)}",
                'timestamp': datetime.now()
            }
            st.session_state.chat_history.append(error_message)

def display_message(message: Dict):
    """Affiche un message dans le chat"""
    role = message['role']
    content = message['content']
    timestamp = message.get('timestamp', datetime.now())
    
    if role == 'user':
        with st.chat_message("user", avatar="üë§"):
            st.markdown(content)
            st.caption(format_date(timestamp, "%H:%M"))
    
    elif role == 'assistant':
        with st.chat_message("assistant", avatar="‚öñÔ∏è"):
            st.markdown(content)
            
            # Afficher le mod√®le utilis√©
            if 'model' in message:
                st.caption(f"{format_date(timestamp, '%H:%M')} ‚Ä¢ {message['model']}")
            else:
                st.caption(format_date(timestamp, "%H:%M"))
    
    elif role == 'system':
        with st.chat_message("system", avatar="‚ÑπÔ∏è"):
            st.info(content)
            st.caption(format_date(timestamp, "%H:%M"))

def create_system_prompt() -> str:
    """Cr√©e le prompt syst√®me bas√© sur la configuration"""
    config = st.session_state.get('response_config', {})
    context = st.session_state.get('context_config', {})
    
    base_prompt = """Tu es un expert en droit p√©nal des affaires fran√ßais avec 20 ans d'exp√©rience.
Tu fournis des conseils juridiques pr√©cis et fiables.
Tu cites toujours les sources l√©gales et jurisprudentielles exactes."""
    
    # Adapter selon le mode
    if config.get('mode') == 'Concis':
        base_prompt += "\nR√©ponds de mani√®re concise et directe, en allant √† l'essentiel."
    elif config.get('mode') == 'P√©dagogique':
        base_prompt += "\nExplique de mani√®re p√©dagogique, avec des exemples concrets."
    else:
        base_prompt += "\nFournis des r√©ponses d√©taill√©es et structur√©es."
    
    # Sp√©cialisation
    if context.get('specialization') != 'G√©n√©ral':
        base_prompt += f"\nTu es sp√©cialis√© en {context['specialization']}."
    
    # Niveau d'expertise
    if context.get('expertise_level') == 'D√©butant':
        base_prompt += "\nAdapte tes r√©ponses pour un public d√©butant, √©vite le jargon complexe."
    elif context.get('expertise_level') == 'Expert':
        base_prompt += "\nUtilise un niveau technique √©lev√© appropri√© pour des juristes exp√©riment√©s."
    
    # Sources
    if config.get('include_sources'):
        base_prompt += "\nCite syst√©matiquement les articles de loi et jurisprudences pertinentes."
    
    return base_prompt

def show_question_suggestions():
    """Affiche des suggestions de questions"""
    st.markdown("### üí° Suggestions de questions")
    
    suggestions = [
        "Quelle est la diff√©rence entre corruption active et passive ?",
        "Comment prouver la mauvaise foi dans l'abus de biens sociaux ?",
        "Quelles sont les obligations de d√©claration TRACFIN ?",
        "Quelle est la prescription pour le d√©lit d'initi√© ?",
        "Comment fonctionne la CJIP (Convention Judiciaire d'Int√©r√™t Public) ?"
    ]
    
    cols = st.columns(2)
    for i, suggestion in enumerate(suggestions):
        with cols[i % 2]:
            if st.button(f"‚ùì {suggestion}", key=f"sugg_{i}", use_container_width=True):
                st.session_state.user_input = suggestion
                st.rerun()

def check_jurisprudences_in_response(response: str):
    """V√©rifie les jurisprudences mentionn√©es dans la r√©ponse"""
    if 'jurisprudence_verifier' in st.session_state:
        verifier = st.session_state.jurisprudence_verifier
        references = verifier.extract_references_from_text(response)
        
        if references:
            with st.expander("üîç V√©rification des jurisprudences cit√©es", expanded=False):
                st.info(f"{len(references)} r√©f√©rences d√©tect√©es. V√©rification en cours...")
                
                # Ici, on pourrait lancer la v√©rification async
                # Pour l'instant, on affiche juste les r√©f√©rences
                for ref in references:
                    st.caption(f"- {ref.to_citation()}")

def export_chat_history():
    """Exporte l'historique du chat"""
    if not st.session_state.chat_history:
        st.warning("Aucun historique √† exporter")
        return
    
    # Pr√©parer les donn√©es
    export_data = {
        'session_id': st.session_state.current_session_id,
        'date': datetime.now().isoformat(),
        'messages': []
    }
    
    for msg in st.session_state.chat_history:
        export_data['messages'].append({
            'role': msg['role'],
            'content': msg['content'],
            'timestamp': msg['timestamp'].isoformat() if isinstance(msg['timestamp'], datetime) else msg['timestamp'],
            'model': msg.get('model', 'N/A')
        })
    
    # Cr√©er le fichier
    json_str = json.dumps(export_data, ensure_ascii=False, indent=2)
    
    # Bouton de t√©l√©chargement
    st.download_button(
        label="üì• T√©l√©charger l'historique",
        data=json_str,
        file_name=f"chat_juridique_{st.session_state.current_session_id}.json",
        mime="application/json"
    )

def save_current_session():
    """Sauvegarde la session actuelle"""
    if st.session_state.chat_history:
        session_data = {
            'id': st.session_state.current_session_id,
            'date': datetime.now(),
            'messages': st.session_state.chat_history,
            'message_count': len(st.session_state.chat_history)
        }
        
        st.session_state.chat_sessions[st.session_state.current_session_id] = session_data
        
        # Limiter √† 10 sessions sauvegard√©es
        if len(st.session_state.chat_sessions) > 10:
            oldest_id = min(st.session_state.chat_sessions.keys())
            del st.session_state.chat_sessions[oldest_id]
        
        # G√©n√©rer un nouvel ID de session
        st.session_state.current_session_id = generate_session_id()

def show_saved_sessions():
    """Affiche les sessions sauvegard√©es"""
    if not st.session_state.chat_sessions:
        st.info("Aucune session sauvegard√©e")
        return
    
    for session_id, session_data in st.session_state.chat_sessions.items():
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.caption(f"**{format_date(session_data['date'])}**")
            st.caption(f"{session_data['message_count']} messages")
        
        with col2:
            if st.button("üìÇ", key=f"load_{session_id}", help="Charger"):
                load_session(session_id)

def load_session(session_id: str):
    """Charge une session sauvegard√©e"""
    if session_id in st.session_state.chat_sessions:
        # Sauvegarder la session actuelle si elle contient des messages
        if st.session_state.chat_history:
            save_current_session()
        
        # Charger la session
        session_data = st.session_state.chat_sessions[session_id]
        st.session_state.chat_history = session_data['messages']
        st.session_state.current_session_id = session_id
        st.rerun()

def generate_session_id() -> str:
    """G√©n√®re un ID de session unique"""
    return f"session_{datetime.now().strftime('%Y%m%d_%H%M%S')}"

# Exemples de r√©ponses pr√©d√©finies pour d√©mo
DEMO_RESPONSES = {
    "abus de biens sociaux": """L'abus de biens sociaux (ABS) est d√©fini aux articles L. 241-3 (SARL) et L. 242-6 (SA) du Code de commerce.

**√âl√©ments constitutifs :**
1. **Usage des biens ou du cr√©dit** de la soci√©t√©
2. **Contraire √† l'int√©r√™t social**
3. **√Ä des fins personnelles** ou pour favoriser une autre soci√©t√©
4. **Mauvaise foi** du dirigeant

**Jurisprudence constante :**
- Cass. crim., 27 octobre 2021, n¬∞ 20-86.531 : la mauvaise foi est caract√©ris√©e d√®s lors que le dirigeant savait que l'acte √©tait contraire √† l'int√©r√™t social
- Cass. crim., 8 septembre 2021, n¬∞ 20-83.098 : l'int√©r√™t du groupe ne justifie pas syst√©matiquement l'usage des biens sociaux

**Sanctions :** 5 ans d'emprisonnement et 375 000 ‚Ç¨ d'amende.""",

    "corruption": """La corruption est r√©prim√©e par plusieurs articles du Code p√©nal selon les acteurs :

**Corruption active :**
- Article 433-1 CP : corruption d'agent public fran√ßais
- Article 435-3 CP : corruption d'agent public √©tranger
- Article 445-1 CP : corruption priv√©e

**Corruption passive :**
- Article 432-11 CP : pour les personnes d√©positaires de l'autorit√© publique
- Article 435-1 CP : agents publics √©trangers
- Article 445-2 CP : corruption priv√©e

**√âl√©ments essentiels :**
1. **Pacte de corruption** (accord pr√©alable)
2. **Sollicitation ou agr√©ment** d'offres ou promesses
3. **Contrepartie** : accomplir ou s'abstenir d'accomplir un acte
4. **Ant√©riorit√©** du pacte par rapport √† l'acte

**Jurisprudence :** Cass. crim., 16 d√©cembre 2020, n¬∞ 18-86.855"""
}

# Point d'entr√©e
if __name__ == "__main__":
    show()