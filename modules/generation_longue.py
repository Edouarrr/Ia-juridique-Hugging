"""Module de g√©n√©ration pour documents juridiques longs (25-50+ pages)"""

import streamlit as st
from datetime import datetime
from typing import Dict, List, Optional, Any
import asyncio
import time

# Import des configurations
from config.cahier_des_charges import (
    STRUCTURES_ACTES, 
    PROMPTS_GENERATION,
    INFRACTIONS_PENALES,
    FORMULES_JURIDIQUES
)

# Import du gestionnaire LLM
try:
    from managers.llm_manager import get_llm_manager
    LLM_AVAILABLE = True
except ImportError:
    LLM_AVAILABLE = False

# ========================= G√âN√âRATEUR DOCUMENTS LONGS =========================

class GenerateurDocumentsLongs:
    """G√©n√©rateur sp√©cialis√© pour documents juridiques de 25-50+ pages"""
    
    def __init__(self):
        self.llm_manager = get_llm_manager() if LLM_AVAILABLE else None
        self.max_tokens_per_section = 4000  # Limite par section pour √©viter les coupures
        
    async def generer_document_long(self, type_acte: str, params: Dict) -> Dict[str, Any]:
        """
        G√©n√®re un document long par sections pour atteindre 25-50+ pages
        
        Returns:
            Dict avec le document complet et les m√©tadonn√©es
        """
        
        # R√©cup√©rer la structure et les cibles
        structure = STRUCTURES_ACTES.get(type_acte, {})
        longueur_cible = structure.get('longueur_cible', 20000)
        longueur_min = structure.get('longueur_min', 15000)
        longueur_max = structure.get('longueur_max', 30000)
        
        st.info(f"""
        üìã G√©n√©ration d'un document complexe en cours...
        - Type : {type_acte.replace('_', ' ').title()}
        - Longueur cible : {longueur_cible:,} mots (~{longueur_cible//500} pages)
        - Plage : {longueur_min:,} √† {longueur_max:,} mots
        """)
        
        # Initialiser le document
        document = {
            'type': type_acte,
            'sections': {},
            'contenu_complet': '',
            'metadata': {
                'longueur_mots': 0,
                'nb_pages_estimees': 0,
                'temps_generation': 0,
                'sections_generees': 0
            }
        }
        
        # Progress bar
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        # Timer
        start_time = time.time()
        
        # G√©n√©rer section par section
        sections = structure.get('sections', [])
        total_sections = len(sections)
        
        for idx, section in enumerate(sections):
            status_text.text(f"‚è≥ G√©n√©ration de la section : {section.replace('_', ' ').title()}...")
            
            # Calculer la longueur cible pour cette section
            section_weight = self._get_section_weight(section, type_acte)
            section_target = int(longueur_cible * section_weight)
            
            # G√©n√©rer la section
            section_content = await self._generer_section_longue(
                section=section,
                type_acte=type_acte,
                params=params,
                target_length=section_target,
                context=document['sections']  # Passer les sections pr√©c√©dentes pour coh√©rence
            )
            
            # Stocker la section
            document['sections'][section] = section_content
            
            # Mettre √† jour les m√©triques
            section_words = len(section_content.split())
            document['metadata']['longueur_mots'] += section_words
            document['metadata']['sections_generees'] += 1
            
            # Mettre √† jour la progress bar
            progress = (idx + 1) / total_sections
            progress_bar.progress(progress)
            
            # Afficher les stats interm√©diaires
            status_text.text(
                f"‚úÖ Section '{section}' g√©n√©r√©e : {section_words:,} mots | "
                f"Total : {document['metadata']['longueur_mots']:,} mots"
            )
            
            # Pause pour √©viter la surcharge
            await asyncio.sleep(0.5)
        
        # Assembler le document complet
        status_text.text("üîÑ Assemblage du document final...")
        document['contenu_complet'] = self._assembler_document_long(
            sections=document['sections'],
            type_acte=type_acte,
            params=params
        )
        
        # V√©rifier et ajuster la longueur si n√©cessaire
        mots_actuels = len(document['contenu_complet'].split())
        
        if mots_actuels < longueur_min:
            status_text.text("üìù Enrichissement du document pour atteindre la longueur minimale...")
            document = await self._enrichir_document(document, longueur_min, params)
        
        # Finaliser les m√©tadonn√©es
        document['metadata']['longueur_mots'] = len(document['contenu_complet'].split())
        document['metadata']['nb_pages_estimees'] = document['metadata']['longueur_mots'] // 500
        document['metadata']['temps_generation'] = time.time() - start_time
        
        # Affichage final
        progress_bar.progress(1.0)
        status_text.text(
            f"‚úÖ Document g√©n√©r√© : {document['metadata']['longueur_mots']:,} mots "
            f"(~{document['metadata']['nb_pages_estimees']} pages) "
            f"en {document['metadata']['temps_generation']:.1f} secondes"
        )
        
        return document
    
    def _get_section_weight(self, section: str, type_acte: str) -> float:
        """D√©termine le poids relatif d'une section dans le document"""
        
        # Poids par d√©faut selon le type de section
        weights = {
            # Sections majeures (40-50% du document)
            'faits': 0.35,
            'faits_detailles': 0.40,
            'faits_procedure': 0.35,
            'expose_faits': 0.35,
            
            # Discussion juridique (30-40% du document)
            'discussion': 0.30,
            'discussion_juridique': 0.35,
            'discussion_par_qualification': 0.35,
            'qualification_approfondie': 0.35,
            'critique_motifs_droit': 0.25,
            'critique_motifs_fait': 0.25,
            
            # Parties techniques (10-15%)
            'nullite_copj': 0.15,
            'application_espece': 0.10,
            'grief': 0.10,
            'evolution_accusations': 0.15,
            
            # Pr√©judices et demandes (10-15%)
            'prejudice_demandes': 0.15,
            'prejudices': 0.10,
            'volet_civil': 0.10,
            
            # Parties formelles (5-10%)
            'en_tete': 0.05,
            'identite_complete': 0.05,
            'parties': 0.05,
            'dispositif': 0.05,
            'par_ces_motifs': 0.05,
            'demandes': 0.05,
            
            # Autres
            'pieces': 0.03,
            'election_domicile': 0.02,
            'consignation': 0.02
        }
        
        # Ajustements selon le type d'acte
        if type_acte == 'plainte_cpc' and section == 'faits_detailles':
            return 0.45  # Les faits sont cruciaux dans une plainte
        elif type_acte == 'conclusions_fond' and section == 'discussion_par_qualification':
            return 0.40  # La discussion est centrale
        elif type_acte == 'conclusions_nullite' and section in ['nullite_copj', 'grief']:
            return 0.20  # Plus de poids sur les nullit√©s
        
        return weights.get(section, 0.10)
    
    async def _generer_section_longue(self, section: str, type_acte: str, 
                                     params: Dict, target_length: int,
                                     context: Dict) -> str:
        """G√©n√®re une section longue et d√©taill√©e"""
        
        # Cr√©er un prompt sp√©cifique pour la section
        prompt = self._creer_prompt_section_longue(
            section, type_acte, params, target_length, context
        )
        
        if not self.llm_manager:
            # Fallback sans LLM
            return self._generer_section_template_longue(
                section, type_acte, params, target_length
            )
        
        # Pour les sections tr√®s longues, g√©n√©rer en plusieurs passes
        if target_length > 3000:
            return await self._generer_section_multi_passes(
                prompt, target_length, section
            )
        else:
            # G√©n√©ration simple pour sections courtes
            response = self.llm_manager.query_single_llm(
                provider="anthropic",
                query=prompt,
                system_prompt=PROMPTS_GENERATION['style_instruction'],
                max_tokens=self.max_tokens_per_section
            )
            
            if response['success']:
                return response['response']
            else:
                return self._generer_section_template_longue(
                    section, type_acte, params, target_length
                )
    
    async def _generer_section_multi_passes(self, base_prompt: str, 
                                          target_length: int, 
                                          section_name: str) -> str:
        """G√©n√®re une section en plusieurs passes pour atteindre la longueur cible"""
        
        content_parts = []
        current_length = 0
        max_passes = 5  # Maximum 5 passes pour √©viter les boucles infinies
        
        for pass_num in range(max_passes):
            remaining_words = target_length - current_length
            
            if remaining_words <= 0:
                break
            
            # Adapter le prompt pour la passe courante
            if pass_num == 0:
                prompt = base_prompt
            else:
                prompt = f"""{base_prompt}
IMPORTANT : Ceci est la SUITE de la section (partie {pass_num + 1}).
Reprends l√† o√π tu t'es arr√™t√© et continue le d√©veloppement.
Il reste environ {remaining_words} mots √† g√©n√©rer pour cette section.
NE PAS r√©p√©ter ce qui a d√©j√† √©t√© dit, mais CONTINUER et APPROFONDIR."""
            
            # G√©n√©rer
            response = self.llm_manager.query_single_llm(
                provider="anthropic",
                query=prompt,
                system_prompt=PROMPTS_GENERATION['style_instruction'],
                max_tokens=self.max_tokens_per_section
            )
            
            if response['success']:
                part_content = response['response']
                content_parts.append(part_content)
                current_length += len(part_content.split())
                
                # Progress pour cette section
                progress = min(current_length / target_length, 1.0)
                st.progress(progress, f"Section '{section_name}' : {current_length:,}/{target_length:,} mots")
            else:
                break
        
        # Assembler les parties
        return '\n\n'.join(content_parts)
    
    def _creer_prompt_section_longue(self, section: str, type_acte: str,
                                    params: Dict, target_length: int,
                                    context: Dict) -> str:
        """Cr√©e un prompt d√©taill√© pour g√©n√©rer une section longue"""
        
        parties = params.get('parties', {})
        infractions = params.get('infractions', [])
        contexte_affaire = params.get('contexte', '')
        
        # Prompts sp√©cialis√©s par section
        prompts_sections = {
            'faits_detailles': f"""
R√©dige un EXPOS√â EXHAUSTIF DES FAITS pour une {type_acte}.
Longueur IMP√âRATIVE : {target_length} mots MINIMUM.
PARTIES CONCERN√âES :
- Demandeurs : {', '.join(parties.get('demandeurs', []))}
- D√©fendeurs : {', '.join(parties.get('defendeurs', []))}
CONTEXTE : {contexte_affaire}
STRUCTURE OBLIGATOIRE :
I. PR√âSENTATION G√âN√âRALE DE L'AFFAIRE (20% du texte)
   A. Les acteurs en pr√©sence
      - Pr√©sentation d√©taill√©e de chaque partie
      - Historique des relations
      - Contexte √©conomique et social
   
   B. L'environnement de l'affaire
      - Secteur d'activit√©
      - Enjeux financiers
      - Contexte r√©glementaire
II. GEN√àSE DES FAITS (25% du texte)
    A. Les origines du litige
       - Premiers contacts
       - N√©gociations initiales
       - √âvolution des relations
    
    B. Les premiers signes de difficult√©s
       - Indices avant-coureurs
       - Premi√®res irr√©gularit√©s constat√©es
       - R√©actions des parties
III. CHRONOLOGIE D√âTAILL√âE DES FAITS (35% du texte)
     Pour CHAQUE √©v√©nement significatif :
     - Date pr√©cise
     - Acteurs impliqu√©s
     - Description d√©taill√©e de l'√©v√©nement
     - Documents associ√©s (avec cote pr√©cise)
     - Cons√©quences imm√©diates
     - Analyse de la pertinence
IV. ANALYSE DES M√âCANISMES FRAUDULEUX (20% du texte)
    A. Sch√©mas mis en place
       - Description technique
       - Acteurs et r√¥les
       - Flux financiers
    
    B. Modes op√©ratoires
       - Techniques utilis√©es
       - Dissimulations
       - Complicit√©s
CONSIGNES IMP√âRATIVES :
- NE JAMAIS r√©sumer ou synth√©tiser
- D√©velopper CHAQUE point en profondeur
- Utiliser des phrases longues et complexes
- Multiplier les d√©tails factuels
- Citer syst√©matiquement les pi√®ces
- Inclure des verbatim de documents importants
- Analyser les motivations des acteurs
- D√©crire l'ambiance, le contexte
- Utiliser un vocabulaire riche et vari√©
""",

            'discussion_par_qualification': f"""
R√©dige une DISCUSSION JURIDIQUE EXHAUSTIVE pour une {type_acte}.
Longueur IMP√âRATIVE : {target_length} mots MINIMUM.
INFRACTIONS √Ä ANALYSER : {', '.join(infractions)}
STRUCTURE PAR INFRACTION (r√©p√©ter pour chaque) :
I. {infractions[0] if infractions else '[INFRACTION]'} (3000-4000 mots par infraction)
   
   A. CADRE L√âGAL EXHAUSTIF (1000+ mots)
      1. Textes d'incrimination
         - Citation int√©grale des articles
         - Analyse grammaticale et s√©mantique
         - Port√©e de chaque terme
      
      2. √âvolution l√©gislative
         - Historique des modifications
         - Travaux pr√©paratoires
         - Intentions du l√©gislateur
      
      3. Doctrine autoris√©e
         - Principaux auteurs (citations longues)
         - D√©bats doctrinaux
         - Positions divergentes
   B. √âL√âMENTS CONSTITUTIFS D√âTAILL√âS (1500+ mots)
      1. √âl√©ment mat√©riel
         a) Comportement incrimin√©
            - Nature exacte de l'acte
            - Modalit√©s de commission
            - Circonstances aggravantes
         
         b) Conditions pr√©alables
            - Qualit√© de l'auteur
            - Contexte de commission
            - √âl√©ments objectifs
         
         c) R√©sultat
            - Pr√©judice requis
            - Lien de causalit√©
            - √âtendue du dommage
      
      2. √âl√©ment moral
         a) Intention g√©n√©rale
            - Conscience de l'ill√©galit√©
            - Volont√© de l'acte
         
         b) Dol sp√©cial (si requis)
            - Intention particuli√®re
            - Mobile (pertinence)
         
         c) Preuves de l'intention
            - Indices mat√©riels
            - Comportements r√©v√©lateurs
            - D√©clarations
   C. APPLICATION MINUTIEUSE AUX FAITS (1500+ mots)
      1. Correspondance avec l'√©l√©ment mat√©riel
         - Chaque acte reproch√©
         - Chaque condition v√©rifi√©e
         - Preuves documentaires (PI√àCES n¬∞...)
      
      2. D√©monstration de l'√©l√©ment moral
         - Indices de l'intention
         - Faisceau de preuves
         - R√©futation des justifications
      
      3. Caract√©risation compl√®te
         - Synth√®se probatoire
         - Force de la d√©monstration
   D. JURISPRUDENCE EXHAUSTIVE (1000+ mots)
      Pour CHAQUE arr√™t cit√© (minimum 10 arr√™ts) :
      - R√©f√©rence compl√®te
      - Faits de l'esp√®ce
      - Solution retenue
      - Principe d√©gag√©
      - Application au cas pr√©sent
      - Distinction √©ventuelle
CONSIGNES :
- D√©velopper CHAQUE point sans exception
- Ne JAMAIS dire "il convient de noter" mais d√©velopper
- Multiplier les citations de doctrine
- Analyser en profondeur chaque jurisprudence
- Anticiper TOUTES les objections
- Proposer des interpr√©tations alternatives
- Conclure chaque partie par une synth√®se partielle
""",

            'prejudice_demandes': f"""
R√©dige une section PR√âJUDICES ET DEMANDES exhaustive.
Longueur IMP√âRATIVE : {target_length} mots MINIMUM.
STRUCTURE D√âTAILL√âE :
I. ANALYSE EXHAUSTIVE DES PR√âJUDICES (70% du texte)
   
   A. PR√âJUDICES PATRIMONIAUX DIRECTS
      1. D√©tournements et pertes s√®ches
         - Inventaire exhaustif
         - Montants pr√©cis avec calculs
         - R√©f√©rences aux pi√®ces comptables
         - M√©thodes d'√©valuation
      
      2. Surco√ªts et d√©penses induites
         - Frais d'expertise
         - Honoraires suppl√©mentaires
         - Co√ªts de restructuration
         - Mesures correctives
      
      3. √âvaluation consolid√©e
         - Tableau r√©capitulatif d√©taill√©
         - Actualisations et int√©r√™ts
         - Projections
   B. PR√âJUDICES PATRIMONIAUX INDIRECTS
      1. Pertes d'exploitation
         - Analyse sur 3-5 ans
         - Comparaison avec pr√©visions
         - Impact sur la tr√©sorerie
         - Calculs d√©taill√©s
      
      2. Perte de chance et manque √† gagner
         - Opportunit√©s manqu√©es
         - Contrats perdus
         - D√©veloppements avort√©s
         - Quantification argument√©e
      
      3. D√©pr√©ciation d'actifs
         - Valeur de l'entreprise
         - Goodwill
         - Brevets et marques
   C. PR√âJUDICES EXTRA-PATRIMONIAUX
      1. Pr√©judice moral
         - Souffrance psychologique
         - Stress et anxi√©t√©
         - Impact sur la sant√©
         - Jurisprudence sur quantum
      
      2. Pr√©judice d'image et r√©putation
         - Analyse m√©diatique
         - Impact commercial
         - Perte de confiance
         - Co√ªt de reconstruction
      
      3. Pr√©judice social
         - Relations professionnelles
         - Statut social
         - Carri√®re
II. DEMANDES CIRCONSTANCI√âES (30% du texte)
    
    A. DEMANDES PRINCIPALES
       1. Au p√©nal
          - D√©claration de culpabilit√©
          - Peines requises (argumentation)
          - Peines compl√©mentaires
       
       2. Au civil
          - Dommages-int√©r√™ts (d√©tail par poste)
          - Int√©r√™ts l√©gaux
          - Capitalisation
          - Article 475-1 CPP
    
    B. DEMANDES SUBSIDIAIRES
       - Expertises compl√©mentaires
       - Mesures d'instruction
       - Provisions
    
    C. DEMANDES ACCESSOIRES
       - Publication jugement
       - Ex√©cution provisoire
       - Contrainte judiciaire
D√©velopper CHAQUE poste de pr√©judice sur 200-300 mots minimum.
Justifier CHAQUE montant par des calculs d√©taill√©s.
Citer la jurisprudence sur l'√©valuation des pr√©judices.
"""
        }
        
        # Prompt par d√©faut si section non d√©finie
        default_prompt = f"""
R√©dige la section '{section}' pour une {type_acte}.
Longueur IMP√âRATIVE : {target_length} mots MINIMUM.
Contexte de l'affaire : {contexte_affaire}
Parties : {parties}
Infractions : {infractions}
CONSIGNES ABSOLUES :
1. D√©velopper de mani√®re EXHAUSTIVE sans jamais r√©sumer
2. Utiliser un style juridique √©labor√© avec phrases complexes
3. Multiplier les sous-parties et d√©veloppements
4. Inclure de nombreuses r√©f√©rences (doctrine, jurisprudence)
5. Analyser chaque point en profondeur
6. Ne JAMAIS utiliser de formules creuses ("il convient de", "force est de constater")
7. TOUJOURS d√©velopper, expliquer, analyser, approfondir
8. Minimum 30-40 lignes par paragraphe
9. Minimum 5-6 paragraphes par sous-partie
10. Utiliser un vocabulaire juridique riche et vari√©
Le texte doit √™tre dense, technique et exhaustif.
"""
        
        return prompts_sections.get(section, default_prompt)
    
    def _generer_section_template_longue(self, section: str, type_acte: str,
                                       params: Dict, target_length: int) -> str:
        """G√©n√®re un template long pour une section (fallback)"""
        
        # Templates √©tendus pour chaque section
        # Ici on pourrait avoir des templates tr√®s d√©taill√©s
        # Pour l'instant, on g√©n√®re un texte indicatif
        
        lines = [f"\n[SECTION : {section.upper().replace('_', ' ')}]\n"]
        lines.append(f"[Cette section doit contenir environ {target_length} mots]\n")
        
        # G√©n√©rer des sous-sections selon le type
        if 'faits' in section:
            lines.extend([
                "I. CONTEXTE G√âN√âRAL DE L'AFFAIRE\n",
                "[D√©veloppement sur 500-800 mots : pr√©sentation des parties, historique...]\n",
                "II. CHRONOLOGIE D√âTAILL√âE DES FAITS\n",
                "[D√©veloppement sur 1500-2000 mots : chaque √©v√©nement dat√© et d√©taill√©...]\n",
                "III. ANALYSE DES M√âCANISMES MIS EN ≈íUVRE\n",
                "[D√©veloppement sur 800-1000 mots : sch√©mas frauduleux, montages...]\n"
            ])
        elif 'discussion' in section or 'qualification' in section:
            for inf in params.get('infractions', ['[INFRACTION]']):
                lines.extend([
                    f"\nI. SUR L'{inf.upper()}\n",
                    "A. Rappel du cadre l√©gal\n[500-700 mots]\n",
                    "B. √âl√©ments constitutifs\n[700-1000 mots]\n",
                    "C. Application aux faits\n[800-1000 mots]\n",
                    "D. Jurisprudence\n[500-700 mots]\n"
                ])
        
        lines.append(f"\n[Fin de section - Total vis√© : {target_length} mots]\n")
        
        return '\n'.join(lines)
    
    def _assembler_document_long(self, sections: Dict[str, str], 
                                type_acte: str, params: Dict) -> str:
        """Assemble toutes les sections en un document coh√©rent"""
        
        # En-t√™te du document
        document_parts = []
        
        # Titre et en-t√™te selon le type
        if type_acte == 'plainte_cpc':
            document_parts.append("""
PLAINTE AVEC CONSTITUTION DE PARTIE CIVILE
√Ä L'ATTENTION DE MONSIEUR LE DOYEN DES JUGES D'INSTRUCTION
TRIBUNAL JUDICIAIRE DE [VILLE]
""")
        elif 'conclusions' in type_acte:
            document_parts.append("""
CONCLUSIONS
POUR : [CLIENT]
CONTRE : [PARTIES ADVERSES]
""")
        
        # Ajouter chaque section avec sa num√©rotation
        section_number = 1
        for section_key, section_content in sections.items():
            # Titre de section
            section_title = section_key.upper().replace('_', ' ')
            
            # Num√©rotation romaine pour les grandes sections
            roman_num = self._to_roman(section_number)
            document_parts.append(f"\n\n{roman_num}. {section_title}\n\n")
            
            # Contenu de la section
            document_parts.append(section_content)
            
            section_number += 1
        
        # Conclusion et signature
        document_parts.append(self._generer_conclusion_longue(type_acte, params))
        
        return ''.join(document_parts)
    
    def _to_roman(self, num: int) -> str:
        """Convertit un nombre en chiffre romain"""
        val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
        syms = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']
        roman_num = ''
        i = 0
        while num > 0:
            for _ in range(num // val[i]):
                roman_num += syms[i]
                num -= val[i]
            i += 1
        return roman_num
    
    def _generer_conclusion_longue(self, type_acte: str, params: Dict) -> str:
        """G√©n√®re une conclusion d√©velopp√©e pour le document"""
        
        if type_acte == 'plainte_cpc':
            return """
PAR CES MOTIFS
Il est demand√© √† Monsieur le Doyen des Juges d'Instruction de bien vouloir :
- RECEVOIR la pr√©sente plainte avec constitution de partie civile ;
- CONSTATER la recevabilit√© et le bien-fond√© de la constitution de partie civile ;
- ORDONNER l'ouverture d'une information judiciaire des chefs de :
  * [LISTE DES INFRACTIONS]
  
- PROC√âDER ou faire proc√©der √† tous actes d'information utiles √† la manifestation de la v√©rit√© ;
- ORDONNER toutes expertises n√©cessaires ;
- TRANSMETTRE le dossier au Parquet pour r√©quisitions ;
- RENVOYER les mis en cause devant la juridiction de jugement ;
Et en tout √©tat de cause,
- CONDAMNER les responsables √† r√©parer l'int√©gralit√© du pr√©judice subi ;
- DIRE que la pr√©sente d√©cision sera ex√©cutoire par provision ;
- CONDAMNER les d√©fendeurs aux entiers d√©pens.
SOUS TOUTES R√âSERVES
Fait √† [VILLE], le """ + datetime.now().strftime('%d/%m/%Y') + """
[SIGNATURE]
BORDEREAU DE PI√àCES COMMUNIQU√âES
[Liste des pi√®ces]
"""
        else:
            return """
PAR CES MOTIFS
[DEMANDES SP√âCIFIQUES AU TYPE D'ACTE]
SOUS TOUTES R√âSERVES
[SIGNATURE ET DATE]
"""
    
    async def _enrichir_document(self, document: Dict, longueur_min: int, 
                               params: Dict) -> Dict:
        """Enrichit un document pour atteindre la longueur minimale"""
        
        mots_actuels = document['metadata']['longueur_mots']
        mots_manquants = longueur_min - mots_actuels
        
        if mots_manquants <= 0:
            return document
        
        # Identifier les sections √† enrichir (les plus importantes)
        sections_a_enrichir = []
        for section, content in document['sections'].items():
            if 'faits' in section or 'discussion' in section:
                sections_a_enrichir.append(section)
        
        if not sections_a_enrichir:
            sections_a_enrichir = list(document['sections'].keys())
        
        # R√©partir les mots manquants
        mots_par_section = mots_manquants // len(sections_a_enrichir)
        
        for section in sections_a_enrichir:
            # G√©n√©rer du contenu suppl√©mentaire
            prompt_enrichissement = f"""
La section '{section}' doit √™tre ENRICHIE avec {mots_par_section} mots suppl√©mentaires.
Contenu actuel √† enrichir :
{document['sections'][section][-1000:]}  # Derniers 1000 caract√®res
CONSIGNES :
- Ajouter des d√©veloppements compl√©mentaires
- Approfondir l'analyse
- Ajouter des exemples jurisprudentiels
- D√©velopper des arguments subsidiaires
- NE PAS r√©p√©ter ce qui a d√©j√† √©t√© dit
- CONTINUER et APPROFONDIR le raisonnement
"""
            
            if self.llm_manager:
                response = self.llm_manager.query_single_llm(
                    provider="anthropic",
                    query=prompt_enrichissement,
                    system_prompt=PROMPTS_GENERATION['style_instruction']
                )
                
                if response['success']:
                    # Ajouter le contenu enrichi
                    document['sections'][section] += "\n\n" + response['response']
        
        # Reconstruire le document complet
        document['contenu_complet'] = self._assembler_document_long(
            document['sections'],
            document['type'],
            params
        )
        
        # Mettre √† jour les m√©tadonn√©es
        document['metadata']['longueur_mots'] = len(document['contenu_complet'].split())
        document['metadata']['nb_pages_estimees'] = document['metadata']['longueur_mots'] // 500
        
        return document

# ========================= INTERFACE STREAMLIT =========================

def show_generation_longue_interface():
    """Interface pour la g√©n√©ration de documents longs"""
    
    st.header("üìú G√©n√©ration de documents juridiques longs (25-50+ pages)")
    
    st.info("""
    üéØ **Module sp√©cialis√© pour documents complexes**
    
    Ce module g√©n√®re des actes juridiques exhaustifs de 25 √† 50+ pages, 
    adapt√©s aux dossiers complexes de droit p√©nal des affaires.
    
    **Caract√©ristiques :**
    - D√©veloppements approfondis de chaque point
    - Analyse exhaustive des faits et du droit
    - Citations doctrinales et jurisprudentielles nombreuses
    - Structure rigoureuse et hi√©rarchis√©e
    """)
    
    # Initialiser le g√©n√©rateur
    if 'generateur_long' not in st.session_state:
        st.session_state.generateur_long = GenerateurDocumentsLongs()
    
    generateur = st.session_state.generateur_long
    
    # Configuration
    col1, col2 = st.columns(2)
    
    with col1:
        type_acte = st.selectbox(
            "Type de document",
            [
                'plainte_cpc',
                'conclusions_fond',
                'conclusions_nullite',
                'conclusions_appel',
                'observations_175',
                'plainte_simple',
                'citation_directe'
            ],
            format_func=lambda x: {
                'plainte_cpc': 'Plainte avec CPC (50+ pages)',
                'conclusions_fond': 'Conclusions au fond (40-50 pages)',
                'conclusions_nullite': 'Conclusions de nullit√© (30-35 pages)',
                'conclusions_appel': 'Conclusions d\'appel (40-45 pages)',
                'observations_175': 'Observations art. 175 (40-45 pages)',
                'plainte_simple': 'Plainte simple (25-30 pages)',
                'citation_directe': 'Citation directe (20-25 pages)'
            }.get(x, x)
        )
    
    with col2:
        # Afficher la longueur cible
        structure = STRUCTURES_ACTES.get(type_acte, {})
        st.metric(
            "Longueur cible",
            f"{structure.get('longueur_cible', 20000):,} mots",
            f"~{structure.get('longueur_cible', 20000)//500} pages"
        )
    
    # Parties
    st.subheader("üë• Configuration des parties")
    
    col1, col2 = st.columns(2)
    
    with col1:
        demandeurs = st.text_area(
            "Demandeurs / Plaignants",
            height=100,
            placeholder="Un par ligne\nEx: SCI PATRIMOINE\nM. DUPONT Jean"
        )
    
    with col2:
        defendeurs = st.text_area(
            "D√©fendeurs / Mis en cause",
            height=100,
            placeholder="Un par ligne\nEx: SA CONSTRUCTION\nM. MARTIN Pierre"
        )
    
    # Infractions et contexte
    st.subheader("üö® Infractions et contexte")
    
    infractions = st.multiselect(
        "Infractions",
        [
            "Abus de biens sociaux",
            "Corruption",
            "Escroquerie",
            "Abus de confiance",
            "Blanchiment",
            "Faux et usage de faux",
            "D√©tournement de fonds publics",
            "Favoritisme",
            "Prise ill√©gale d'int√©r√™ts",
            "Trafic d'influence"
        ]
    )
    
    contexte = st.text_area(
        "Contexte d√©taill√© de l'affaire",
        height=150,
        placeholder="D√©crivez l'affaire, les montants en jeu, la p√©riode des faits..."
    )
    
    # Options avanc√©es
    with st.expander("‚öôÔ∏è Options avanc√©es"):
        col1, col2 = st.columns(2)
        
        with col1:
            enrichissement_auto = st.checkbox(
                "Enrichissement automatique si trop court",
                value=True,
                help="Ajoute automatiquement du contenu si la longueur minimale n'est pas atteinte"
            )
        
        with col2:
            parallel_generation = st.checkbox(
                "G√©n√©ration parall√®le (plus rapide)",
                value=False,
                help="G√©n√®re plusieurs sections simultan√©ment (exp√©rimental)"
            )
    
    # Bouton de g√©n√©ration
    if st.button("üöÄ G√©n√©rer le document long", type="primary", use_container_width=True):
        
        # Validation
        if not (demandeurs.strip() or defendeurs.strip()):
            st.error("Veuillez renseigner au moins une partie")
            return
        
        if not infractions:
            st.error("Veuillez s√©lectionner au moins une infraction")
            return
        
        # Pr√©parer les param√®tres
        params = {
            'parties': {
                'demandeurs': [d.strip() for d in demandeurs.split('\n') if d.strip()],
                'defendeurs': [d.strip() for d in defendeurs.split('\n') if d.strip()]
            },
            'infractions': infractions,
            'contexte': contexte,
            'options': {
                'enrichissement_auto': enrichissement_auto,
                'parallel': parallel_generation
            }
        }
        
        # G√©n√©rer
        asyncio.run(generer_document_interface(generateur, type_acte, params))

async def generer_document_interface(generateur, type_acte, params):
    """Interface de g√©n√©ration avec gestion asynchrone"""
    
    try:
        # G√©n√©rer le document
        document = await generateur.generer_document_long(type_acte, params)
        
        # Stocker le r√©sultat
        st.session_state.document_long_genere = document
        
        # Afficher les r√©sultats
        st.success(f"""
        ‚úÖ **Document g√©n√©r√© avec succ√®s !**
        
        - **Longueur :** {document['metadata']['longueur_mots']:,} mots
        - **Pages estim√©es :** ~{document['metadata']['nb_pages_estimees']} pages
        - **Temps de g√©n√©ration :** {document['metadata']['temps_generation']:.1f} secondes
        - **Sections g√©n√©r√©es :** {document['metadata']['sections_generees']}
        """)
        
        # Aper√ßu du document
        with st.expander("üìÑ Aper√ßu du document", expanded=True):
            # Afficher les premi√®res lignes
            preview_lines = document['contenu_complet'].split('\n')[:50]
            st.text('\n'.join(preview_lines))
            st.info(f"... (document complet : {document['metadata']['longueur_mots']:,} mots)")
        
        # Actions
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.download_button(
                "üì• T√©l√©charger (TXT)",
                document['contenu_complet'].encode('utf-8'),
                file_name=f"{type_acte}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                mime="text/plain"
            )
        
        with col2:
            if st.button("üìä Voir les statistiques d√©taill√©es"):
                show_document_statistics_detailed(document)
        
        with col3:
            if st.button("‚úèÔ∏è √âditer le document"):
                st.session_state.edit_mode = True
                st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la g√©n√©ration : {str(e)}")
        import traceback
        with st.expander("D√©tails de l'erreur"):
            st.code(traceback.format_exc())

def show_document_statistics_detailed(document: Dict):
    """Affiche des statistiques d√©taill√©es sur le document g√©n√©r√©"""
    
    with st.expander("üìä Statistiques d√©taill√©es", expanded=True):
        
        # M√©triques g√©n√©rales
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Mots totaux", f"{document['metadata']['longueur_mots']:,}")
        with col2:
            st.metric("Pages", f"~{document['metadata']['nb_pages_estimees']}")
        with col3:
            st.metric("Sections", document['metadata']['sections_generees'])
        with col4:
            st.metric("Temps", f"{document['metadata']['temps_generation']:.1f}s")
        
        # R√©partition par section
        st.subheader("üìë R√©partition par section")
        
        section_stats = []
        for section, content in document['sections'].items():
            words = len(content.split())
            percentage = (words / document['metadata']['longueur_mots']) * 100
            section_stats.append({
                'Section': section.replace('_', ' ').title(),
                'Mots': words,
                'Pourcentage': f"{percentage:.1f}%",
                'Pages': f"~{words//500}"
            })
        
        import pandas as pd
        df = pd.DataFrame(section_stats)
        st.dataframe(df, use_container_width=True)
        
        # Graphique de r√©partition
        st.subheader("üìä Visualisation")
        chart_data = pd.DataFrame({
            'Section': [s['Section'] for s in section_stats],
            'Mots': [s['Mots'] for s in section_stats]
        })
        st.bar_chart(chart_data.set_index('Section'))

# ========================= INT√âGRATION =========================

def integrate_with_main_module():
    """Int√®gre ce module avec le module principal de g√©n√©ration"""
    
    # Cette fonction peut √™tre appel√©e depuis generation_juridique.py
    # pour ajouter l'option de g√©n√©ration longue
    pass

if __name__ == "__main__":
    # Test du module
    st.set_page_config(page_title="G√©n√©ration Documents Longs", page_icon="üìú", layout="wide")
    show_generation_longue_interface()