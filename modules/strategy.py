"""Module de strat√©gie juridique avec IA"""

import streamlit as st
from datetime import datetime
from typing import List, Dict, Any, Optional
import logging

logger = logging.getLogger(__name__)

class StrategyModule:
    """Module de g√©n√©ration de strat√©gies juridiques"""
    
    def __init__(self):
        self.name = "Strat√©gie juridique"
        self.description = "D√©veloppez des strat√©gies de d√©fense intelligentes avec l'aide de l'IA"
        self.icon = "‚öñÔ∏è"
        self.available = True
        
        # Templates de strat√©gies
        self.strategy_templates = {
            'penal': {
                'name': 'D√©fense p√©nale',
                'axes': ['Contestation proc√©dure', 'Absence d\'intention', 'L√©gitime d√©fense', 'Prescription'],
                'focus': 'innocence et respect de la proc√©dure'
            },
            'commercial': {
                'name': 'Litige commercial',
                'axes': ['Inex√©cution contractuelle', 'Force majeure', 'Vice cach√©', 'Bonne foi'],
                'focus': 'respect des obligations contractuelles'
            },
            'civil': {
                'name': 'Affaire civile',
                'axes': ['Responsabilit√©', 'Pr√©judice', 'Causalit√©', 'R√©paration'],
                'focus': '√©tablissement du pr√©judice et de la responsabilit√©'
            },
            'administratif': {
                'name': 'Contentieux administratif',
                'axes': ['Exc√®s de pouvoir', 'Ill√©galit√©', 'D√©tournement', 'Incomp√©tence'],
                'focus': 'l√©galit√© des d√©cisions administratives'
            }
        }
    
    def render(self):
        """Interface principale du module"""
        st.markdown(f"### {self.icon} {self.name}")
        st.markdown(f"*{self.description}*")
        
        # Tabs
        tab1, tab2, tab3, tab4 = st.tabs([
            "üéØ Nouvelle strat√©gie",
            "üìö Biblioth√®que",
            "üîÑ Comparaison",
            "‚ùì Aide"
        ])
        
        with tab1:
            self._render_new_strategy()
        
        with tab2:
            self._render_strategy_library()
        
        with tab3:
            self._render_strategy_comparison()
        
        with tab4:
            self._render_help()
    
    def _render_new_strategy(self):
        """Interface de cr√©ation de strat√©gie"""
        
        # Type d'affaire
        col1, col2 = st.columns(2)
        
        with col1:
            case_type = st.selectbox(
                "Type d'affaire",
                list(self.strategy_templates.keys()),
                format_func=lambda x: self.strategy_templates[x]['name']
            )
            
            urgency = st.select_slider(
                "Urgence",
                ["Faible", "Mod√©r√©e", "√âlev√©e", "Critique"],
                value="Mod√©r√©e"
            )
        
        with col2:
            complexity = st.select_slider(
                "Complexit√©",
                ["Simple", "Mod√©r√©e", "Complexe", "Tr√®s complexe"],
                value="Mod√©r√©e"
            )
            
            budget = st.selectbox(
                "Budget",
                ["Limit√©", "Standard", "Confortable", "Illimit√©"],
                help="Impact sur la profondeur de la strat√©gie"
            )
        
        # Contexte de l'affaire
        st.markdown("#### üìã Contexte de l'affaire")
        
        context = st.text_area(
            "Description du cas",
            placeholder="D√©crivez bri√®vement les faits, les parties impliqu√©es, et les enjeux...",
            height=150
        )
        
        # Points cl√©s
        col1, col2 = st.columns(2)
        
        with col1:
            strengths = st.text_area(
                "üí™ Points forts",
                placeholder="- Preuves favorables\n- T√©moignages\n- Pr√©c√©dents",
                height=100
            )
        
        with col2:
            weaknesses = st.text_area(
                "‚ö†Ô∏è Points faibles",
                placeholder="- √âl√©ments d√©favorables\n- Contradictions\n- Risques",
                height=100
            )
        
        # Objectifs
        st.markdown("#### üéØ Objectifs")
        
        objectives = st.multiselect(
            "Objectifs prioritaires",
            [
                "Acquittement/Relaxe",
                "R√©duction des charges",
                "N√©gociation amiable",
                "Minimisation des dommages",
                "Gain de temps",
                "Pr√©c√©dent juridique",
                "Protection r√©putation"
            ],
            default=["Acquittement/Relaxe"]
        )
        
        # Configuration avanc√©e
        with st.expander("‚öôÔ∏è Configuration avanc√©e", expanded=False):
            include_jurisprudence = st.checkbox("Inclure recherche jurisprudence", value=True)
            include_scenarios = st.checkbox("G√©n√©rer sc√©narios alternatifs", value=True)
            include_timeline = st.checkbox("Cr√©er planning d'actions", value=True)
            risk_assessment = st.checkbox("Analyse des risques d√©taill√©e", value=True)
        
        # G√©n√©ration
        if st.button("üöÄ G√©n√©rer la strat√©gie", type="primary", use_container_width=True):
            if context:
                config = {
                    'case_type': case_type,
                    'urgency': urgency,
                    'complexity': complexity,
                    'budget': budget,
                    'context': context,
                    'strengths': strengths,
                    'weaknesses': weaknesses,
                    'objectives': objectives,
                    'include_jurisprudence': include_jurisprudence,
                    'include_scenarios': include_scenarios,
                    'include_timeline': include_timeline,
                    'risk_assessment': risk_assessment
                }
                
                self._generate_strategy(config)
            else:
                st.warning("Veuillez d√©crire le contexte de l'affaire")
    
    def _generate_strategy(self, config: Dict[str, Any]):
        """G√©n√®re une strat√©gie juridique"""
        
        with st.spinner("G√©n√©ration de la strat√©gie en cours..."):
            # Simuler la g√©n√©ration
            strategy = {
                'id': f"strategy_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                'created_at': datetime.now(),
                'config': config,
                'main_approach': self._generate_main_approach(config),
                'action_plan': self._generate_action_plan(config),
                'arguments': self._generate_arguments(config),
                'risks': self._assess_risks(config) if config['risk_assessment'] else None,
                'scenarios': self._generate_scenarios(config) if config['include_scenarios'] else None,
                'timeline': self._generate_timeline(config) if config['include_timeline'] else None,
                'resources': self._estimate_resources(config)
            }
            
            # Sauvegarder
            if 'strategy_history' not in st.session_state:
                st.session_state.strategy_history = []
            st.session_state.strategy_history.append(strategy)
            
            # Afficher
            self._display_strategy(strategy)
    
    def _generate_main_approach(self, config: Dict[str, Any]) -> Dict[str, Any]:
        """G√©n√®re l'approche principale"""
        template = self.strategy_templates[config['case_type']]
        
        # S√©lectionner les axes pertinents
        selected_axes = []
        if "innocence" in config['context'].lower():
            selected_axes.append(template['axes'][1])  # Absence d'intention
        if "proc√©dure" in config['context'].lower():
            selected_axes.append(template['axes'][0])  # Contestation proc√©dure
        
        # Si aucun axe sp√©cifique, prendre les 2 premiers
        if not selected_axes:
            selected_axes = template['axes'][:2]
        
        return {
            'title': f"Strat√©gie de {template['name']}",
            'focus': template['focus'],
            'primary_axes': selected_axes,
            'narrative': f"La d√©fense s'articulera autour de {len(selected_axes)} axes principaux, "
                        f"en mettant l'accent sur {template['focus']}. "
                        f"Cette approche vise √† {config['objectives'][0].lower()}.",
            'key_message': "Notre client a agi de bonne foi dans le respect de ses obligations."
        }
    
    def _generate_action_plan(self, config: Dict[str, Any]) -> List[Dict[str, Any]]:
        """G√©n√®re le plan d'action"""
        actions = []
        
        # Actions selon l'urgence
        if config['urgency'] in ['√âlev√©e', 'Critique']:
            actions.append({
                'phase': 'Imm√©diat (0-7 jours)',
                'priority': 'Critique',
                'tasks': [
                    'Constituer l\'√©quipe de d√©fense',
                    'S√©curiser et analyser toutes les preuves',
                    'Identifier et contacter les t√©moins cl√©s',
                    'Pr√©parer les premi√®res r√©ponses proc√©durales'
                ]
            })
        
        actions.append({
            'phase': 'Court terme (1-4 semaines)',
            'priority': '√âlev√©e',
            'tasks': [
                'Analyse approfondie du dossier',
                'Recherche de jurisprudence favorable',
                'Pr√©paration des arguments principaux',
                '√âvaluation des options de n√©gociation'
            ]
        })
        
        actions.append({
            'phase': 'Moyen terme (1-3 mois)',
            'priority': 'Normale',
            'tasks': [
                'D√©veloppement de la strat√©gie compl√®te',
                'Pr√©paration des t√©moins',
                'Constitution du dossier de plaidoirie',
                'Anticipation des contre-arguments'
            ]
        })
        
        if config['complexity'] in ['Complexe', 'Tr√®s complexe']:
            actions.append({
                'phase': 'Long terme (3+ mois)',
                'priority': 'Strat√©gique',
                'tasks': [
                    'Expertise technique si n√©cessaire',
                    'Strat√©gie m√©diatique (si applicable)',
                    'Pr√©paration aux appels √©ventuels',
                    'Plans de contingence'
                ]
            })
        
        return actions
    
    def _generate_arguments(self, config: Dict[str, Any]) -> Dict[str, List[str]]:
        """G√©n√®re les arguments juridiques"""
        arguments = {
            'principaux': [],
            'subsidiaires': [],
            'contra': []
        }
        
        # Arguments selon le type d'affaire
        case_type = config['case_type']
        
        if case_type == 'penal':
            arguments['principaux'] = [
                "Absence d'√©l√©ment intentionnel caract√©ris√©",
                "Violation des droits de la d√©fense dans la proc√©dure",
                "Insuffisance de preuves mat√©rielles"
            ]
            arguments['subsidiaires'] = [
                "Contrainte morale exerc√©e sur le client",
                "Erreur de fait excusable",
                "Prescription de l'action publique"
            ]
        elif case_type == 'commercial':
            arguments['principaux'] = [
                "Respect int√©gral des obligations contractuelles",
                "Force majeure emp√™chant l'ex√©cution",
                "Inex√©cution imputable √† la partie adverse"
            ]
            arguments['subsidiaires'] = [
                "D√©s√©quilibre contractuel manifeste",
                "Vice du consentement",
                "Enrichissement sans cause"
            ]
        
        # Contre-arguments anticip√©s
        arguments['contra'] = [
            "La partie adverse pourrait invoquer...",
            "Il sera n√©cessaire de r√©futer...",
            "Nous devons anticiper l'argument selon lequel..."
        ]
        
        return arguments
    
    def _assess_risks(self, config: Dict[str, Any]) -> Dict[str, Any]:
        """√âvalue les risques de la strat√©gie"""
        risks = {
            'level': 'Mod√©r√©',
            'factors': [],
            'mitigation': []
        }
        
        # Facteurs de risque
        if config['weaknesses']:
            risks['factors'].append({
                'type': 'Points faibles identifi√©s',
                'severity': '√âlev√©e',
                'description': 'Les faiblesses du dossier pourraient √™tre exploit√©es'
            })
        
        if config['urgency'] == 'Critique':
            risks['factors'].append({
                'type': 'Contrainte temporelle',
                'severity': '√âlev√©e',
                'description': 'Le temps limit√© r√©duit les options strat√©giques'
            })
        
        if config['budget'] == 'Limit√©':
            risks['factors'].append({
                'type': 'Ressources limit√©es',
                'severity': 'Mod√©r√©e',
                'description': 'Budget insuffisant pour toutes les actions souhait√©es'
            })
        
        # Strat√©gies de mitigation
        for factor in risks['factors']:
            if factor['type'] == 'Points faibles identifi√©s':
                risks['mitigation'].append(
                    "Pr√©parer des contre-arguments solides pour chaque faiblesse"
                )
            elif factor['type'] == 'Contrainte temporelle':
                risks['mitigation'].append(
                    "Prioriser les actions √† fort impact et mobiliser l'√©quipe"
                )
            elif factor['type'] == 'Ressources limit√©es':
                risks['mitigation'].append(
                    "Optimiser l'allocation des ressources sur les axes prioritaires"
                )
        
        # Calcul du niveau global
        high_risks = sum(1 for f in risks['factors'] if f['severity'] == '√âlev√©e')
        if high_risks >= 2:
            risks['level'] = '√âlev√©'
        elif high_risks == 1:
            risks['level'] = 'Mod√©r√©'
        else:
            risks['level'] = 'Faible'
        
        return risks
    
    def _generate_scenarios(self, config: Dict[str, Any]) -> List[Dict[str, Any]]:
        """G√©n√®re des sc√©narios alternatifs"""
        scenarios = []
        
        # Sc√©nario optimiste
        scenarios.append({
            'name': 'Sc√©nario favorable',
            'probability': '30%',
            'description': 'Tous les arguments sont accept√©s, proc√©dure rapide',
            'outcome': config['objectives'][0],
            'conditions': [
                'Jurisprudence favorable appliqu√©e',
                'T√©moins cr√©dibles et coh√©rents',
                'Faiblesses de la partie adverse exploit√©es'
            ]
        })
        
        # Sc√©nario r√©aliste
        scenarios.append({
            'name': 'Sc√©nario probable',
            'probability': '50%',
            'description': 'Succ√®s partiel avec compromis n√©cessaires',
            'outcome': 'R√©solution n√©goci√©e ou victoire partielle',
            'conditions': [
                'Arguments principaux reconnus',
                'Quelques concessions n√©cessaires',
                'D√©lais respect√©s'
            ]
        })
        
        # Sc√©nario pessimiste
        scenarios.append({
            'name': 'Sc√©nario d√©favorable',
            'probability': '20%',
            'description': 'Difficult√©s majeures n√©cessitant adaptation',
            'outcome': 'N√©cessit√© d\'appel ou n√©gociation d√©fensive',
            'conditions': [
                'Arguments rejet√©s en premi√®re instance',
                'Nouvelles preuves d√©favorables',
                'Complications proc√©durales'
            ],
            'contingency': 'Pr√©parer imm√©diatement la strat√©gie d\'appel'
        })
        
        return scenarios
    
    def _generate_timeline(self, config: Dict[str, Any]) -> List[Dict[str, Any]]:
        """G√©n√®re un planning d√©taill√©"""
        timeline = []
        
        # Calculer les dates selon l'urgence
        start_date = datetime.now()
        
        milestones = [
            ('Analyse initiale compl√®te', 7),
            ('Arguments principaux finalis√©s', 21),
            ('Dossier de preuves constitu√©', 30),
            ('Pr√©paration des t√©moins termin√©e', 45),
            ('Strat√©gie de plaidoirie finalis√©e', 60),
            ('Pr√™t pour l\'audience', 75)
        ]
        
        # Ajuster selon l'urgence
        if config['urgency'] == 'Critique':
            factor = 0.5
        elif config['urgency'] == '√âlev√©e':
            factor = 0.75
        else:
            factor = 1.0
        
        for milestone, days in milestones:
            timeline.append({
                'milestone': milestone,
                'target_date': start_date + timedelta(days=int(days * factor)),
                'status': '√Ä venir',
                'responsible': '√âquipe juridique',
                'deliverables': [
                    'Document de synth√®se',
                    'Validation client',
                    'Archivage s√©curis√©'
                ]
            })
        
        return timeline
    
    def _estimate_resources(self, config: Dict[str, Any]) -> Dict[str, Any]:
        """Estime les ressources n√©cessaires"""
        resources = {
            'team': [],
            'time_estimate': '',
            'budget_estimate': '',
            'external_needs': []
        }
        
        # √âquipe selon la complexit√©
        if config['complexity'] in ['Simple', 'Mod√©r√©e']:
            resources['team'] = [
                'Avocat principal',
                'Assistant juridique'
            ]
            resources['time_estimate'] = '50-100 heures'
        else:
            resources['team'] = [
                'Avocat principal senior',
                'Avocat collaborateur',
                '2 Assistants juridiques',
                'Stagiaire'
            ]
            resources['time_estimate'] = '200-500 heures'
        
        # Budget
        budget_multiplier = {
            'Limit√©': 0.5,
            'Standard': 1.0,
            'Confortable': 1.5,
            'Illimit√©': 2.0
        }[config['budget']]
        
        base_cost = 10000 if config['complexity'] in ['Simple', 'Mod√©r√©e'] else 25000
        resources['budget_estimate'] = f"{int(base_cost * budget_multiplier):,} - {int(base_cost * budget_multiplier * 1.5):,} ‚Ç¨"
        
        # Besoins externes
        if config['include_jurisprudence']:
            resources['external_needs'].append('Acc√®s bases de donn√©es juridiques')
        if config['complexity'] in ['Complexe', 'Tr√®s complexe']:
            resources['external_needs'].append('Expert technique')
        if 'financier' in config['case_type']:
            resources['external_needs'].append('Expert-comptable')
        
        return resources
    
    def _display_strategy(self, strategy: Dict[str, Any]):
        """Affiche la strat√©gie g√©n√©r√©e"""
        st.success("‚úÖ Strat√©gie g√©n√©r√©e avec succ√®s")
        
        # En-t√™te
        st.markdown(f"## üìã {strategy['main_approach']['title']}")
        st.markdown(f"*G√©n√©r√©e le {strategy['created_at'].strftime('%d/%m/%Y √† %H:%M')}*")
        
        # M√©triques principales
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            urgency_colors = {
                'Faible': 'üü¢',
                'Mod√©r√©e': 'üü°',
                '√âlev√©e': 'üü†',
                'Critique': 'üî¥'
            }
            st.metric(
                "Urgence",
                strategy['config']['urgency'],
                delta=urgency_colors.get(strategy['config']['urgency'], '‚ö™')
            )
        
        with col2:
            if strategy.get('risks'):
                risk_colors = {
                    'Faible': 'üü¢',
                    'Mod√©r√©': 'üü°',
                    '√âlev√©': 'üî¥'
                }
                st.metric(
                    "Niveau de risque",
                    strategy['risks']['level'],
                    delta=risk_colors.get(strategy['risks']['level'], '‚ö™')
                )
        
        with col3:
            st.metric(
                "Phases d'action",
                len(strategy['action_plan'])
            )
        
        with col4:
            st.metric(
                "Budget estim√©",
                strategy['resources']['budget_estimate'].split('-')[0].strip()
            )
        
        # Tabs de contenu
        tabs = st.tabs([
            "üéØ Approche",
            "üìã Plan d'action",
            "üí≠ Arguments",
            "‚ö†Ô∏è Risques",
            "üîÑ Sc√©narios",
            "üìÖ Planning",
            "üë• Ressources",
            "üíæ Export"
        ])
        
        with tabs[0]:
            self._display_approach_tab(strategy)
        
        with tabs[1]:
            self._display_action_plan_tab(strategy)
        
        with tabs[2]:
            self._display_arguments_tab(strategy)
        
        with tabs[3]:
            self._display_risks_tab(strategy)
        
        with tabs[4]:
            self._display_scenarios_tab(strategy)
        
        with tabs[5]:
            self._display_timeline_tab(strategy)
        
        with tabs[6]:
            self._display_resources_tab(strategy)
        
        with tabs[7]:
            self._display_export_tab(strategy)
    
    def _display_approach_tab(self, strategy: Dict[str, Any]):
        """Affiche l'approche strat√©gique"""
        approach = strategy['main_approach']
        
        st.markdown("### üéØ Approche strat√©gique principale")
        
        st.info(approach['narrative'])
        
        st.markdown("#### üìç Axes prioritaires")
        for i, axis in enumerate(approach['primary_axes'], 1):
            st.markdown(f"{i}. **{axis}**")
        
        st.markdown("#### üí¨ Message cl√©")
        st.success(f'"{approach["key_message"]}"')
        
        st.markdown("#### üéØ Objectifs vis√©s")
        objectives = strategy['config']['objectives']
        
        cols = st.columns(min(len(objectives), 3))
        for i, obj in enumerate(objectives):
            with cols[i % len(cols)]:
                st.markdown(f"‚úì {obj}")
    
    def _display_action_plan_tab(self, strategy: Dict[str, Any]):
        """Affiche le plan d'action"""
        st.markdown("### üìã Plan d'action d√©taill√©")
        
        for phase in strategy['action_plan']:
            priority_colors = {
                'Critique': 'red',
                '√âlev√©e': 'orange',
                'Normale': 'blue',
                'Strat√©gique': 'green'
            }
            
            with st.expander(f"**{phase['phase']}** - Priorit√© {phase['priority']}", expanded=True):
                for task in phase['tasks']:
                    st.markdown(f"- [ ] {task}")
                
                # Bouton pour copier les t√¢ches
                task_list = '\n'.join([f"- [ ] {task}" for task in phase['tasks']])
                st.code(task_list)
    
    def _display_arguments_tab(self, strategy: Dict[str, Any]):
        """Affiche les arguments juridiques"""
        st.markdown("### üí≠ Arguments juridiques")
        
        arguments = strategy['arguments']
        
        # Arguments principaux
        st.markdown("#### ‚öñÔ∏è Arguments principaux")
        for i, arg in enumerate(arguments['principaux'], 1):
            st.success(f"**{i}.** {arg}")
        
        # Arguments subsidiaires
        if arguments['subsidiaires']:
            st.markdown("#### üîÑ Arguments subsidiaires")
            for i, arg in enumerate(arguments['subsidiaires'], 1):
                st.info(f"**{i}.** {arg}")
        
        # Contre-arguments
        if arguments['contra']:
            st.markdown("#### üõ°Ô∏è Anticipation des contre-arguments")
            for arg in arguments['contra']:
                st.warning(f"‚ö†Ô∏è {arg}")
    
    def _display_risks_tab(self, strategy: Dict[str, Any]):
        """Affiche l'analyse des risques"""
        if not strategy.get('risks'):
            st.info("Analyse des risques non demand√©e")
            return
        
        risks = strategy['risks']
        
        st.markdown("### ‚ö†Ô∏è Analyse des risques")
        
        # Niveau global
        level_colors = {
            'Faible': 'green',
            'Mod√©r√©': 'orange',
            '√âlev√©': 'red'
        }
        
        st.markdown(
            f"<h4 style='color: {level_colors.get(risks['level'], 'gray')}'>Niveau de risque global : {risks['level']}</h4>",
            unsafe_allow_html=True
        )
        
        # Facteurs de risque
        st.markdown("#### üìä Facteurs de risque identifi√©s")
        
        for factor in risks['factors']:
            severity_icon = 'üî¥' if factor['severity'] == '√âlev√©e' else 'üü°'
            
            with st.expander(f"{severity_icon} {factor['type']}", expanded=True):
                st.write(f"**S√©v√©rit√© :** {factor['severity']}")
                st.write(f"**Description :** {factor['description']}")
        
        # Strat√©gies de mitigation
        st.markdown("#### üõ°Ô∏è Strat√©gies de mitigation")
        
        for i, mitigation in enumerate(risks['mitigation'], 1):
            st.markdown(f"{i}. {mitigation}")
    
    def _display_scenarios_tab(self, strategy: Dict[str, Any]):
        """Affiche les sc√©narios"""
        if not strategy.get('scenarios'):
            st.info("G√©n√©ration de sc√©narios non demand√©e")
            return
        
        st.markdown("### üîÑ Sc√©narios possibles")
        
        for scenario in strategy['scenarios']:
            # Couleur selon la probabilit√©
            prob_value = int(scenario['probability'].rstrip('%'))
            if prob_value >= 50:
                color = 'green'
            elif prob_value >= 30:
                color = 'orange'
            else:
                color = 'red'
            
            with st.expander(
                f"**{scenario['name']}** - Probabilit√© : {scenario['probability']}",
                expanded=scenario['name'] == 'Sc√©nario probable'
            ):
                st.write(f"**Description :** {scenario['description']}")
                st.write(f"**R√©sultat attendu :** {scenario['outcome']}")
                
                st.write("**Conditions :**")
                for condition in scenario['conditions']:
                    st.write(f"- {condition}")
                
                if scenario.get('contingency'):
                    st.warning(f"**Plan B :** {scenario['contingency']}")
    
    def _display_timeline_tab(self, strategy: Dict[str, Any]):
        """Affiche le planning"""
        if not strategy.get('timeline'):
            st.info("Planning non demand√©")
            return
        
        st.markdown("### üìÖ Planning pr√©visionnel")
        
        # Timeline sous forme de tableau
        for milestone in strategy['timeline']:
            col1, col2, col3 = st.columns([3, 2, 1])
            
            with col1:
                st.write(f"**{milestone['milestone']}**")
                
                # Livrables
                with st.expander("Livrables"):
                    for deliverable in milestone['deliverables']:
                        st.write(f"- {deliverable}")
            
            with col2:
                st.write(f"üìÖ {milestone['target_date'].strftime('%d/%m/%Y')}")
                st.write(f"üë§ {milestone['responsible']}")
            
            with col3:
                if milestone['status'] == '√Ä venir':
                    st.write("‚è≥ √Ä venir")
                elif milestone['status'] == 'En cours':
                    st.write("üîÑ En cours")
                else:
                    st.write("‚úÖ Termin√©")
    
    def _display_resources_tab(self, strategy: Dict[str, Any]):
        """Affiche les ressources n√©cessaires"""
        resources = strategy['resources']
        
        st.markdown("### üë• Ressources n√©cessaires")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üë®‚Äç‚öñÔ∏è √âquipe juridique")
            for member in resources['team']:
                st.write(f"‚Ä¢ {member}")
            
            st.markdown("#### ‚è±Ô∏è Temps estim√©")
            st.info(resources['time_estimate'])
        
        with col2:
            st.markdown("#### üí∞ Budget estim√©")
            st.success(resources['budget_estimate'])
            
            if resources['external_needs']:
                st.markdown("#### üîó Besoins externes")
                for need in resources['external_needs']:
                    st.write(f"‚Ä¢ {need}")
    
    def _display_export_tab(self, strategy: Dict[str, Any]):
        """Options d'export de la strat√©gie"""
        st.markdown("### üíæ Export de la strat√©gie")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Export PDF (simul√©)
            if st.button("üìÑ G√©n√©rer PDF", use_container_width=True):
                st.info("G√©n√©ration du PDF en cours...")
                # Ici, int√©grer une vraie g√©n√©ration PDF
            
            # Export Word (texte)
            doc_content = self._generate_strategy_document(strategy)
            st.download_button(
                "üìù T√©l√©charger Word",
                data=doc_content,
                file_name=f"strategie_{strategy['id']}.txt",
                mime="text/plain"
            )
        
        with col2:
            # Export JSON
            import json
            json_str = json.dumps(strategy, default=str, ensure_ascii=False, indent=2)
            
            st.download_button(
                "üíæ T√©l√©charger JSON",
                data=json_str,
                file_name=f"strategie_{strategy['id']}.json",
                mime="application/json"
            )
            
            # Partage
            if st.button("üìß Envoyer par email", use_container_width=True):
                st.info("Fonctionnalit√© d'envoi par email √† venir")
    
    def _generate_strategy_document(self, strategy: Dict[str, Any]) -> str:
        """G√©n√®re un document de strat√©gie format√©"""
        lines = []
        
        # En-t√™te
        lines.append("DOCUMENT DE STRAT√âGIE JURIDIQUE")
        lines.append("=" * 50)
        lines.append(f"G√©n√©r√© le : {strategy['created_at'].strftime('%d/%m/%Y %H:%M')}")
        lines.append(f"Type d'affaire : {self.strategy_templates[strategy['config']['case_type']]['name']}")
        lines.append(f"Urgence : {strategy['config']['urgency']}")
        lines.append(f"Complexit√© : {strategy['config']['complexity']}")
        lines.append("")
        
        # Contexte
        lines.append("CONTEXTE DE L'AFFAIRE")
        lines.append("-" * 30)
        lines.append(strategy['config']['context'])
        lines.append("")
        
        # Approche
        lines.append("APPROCHE STRAT√âGIQUE")
        lines.append("-" * 30)
        lines.append(strategy['main_approach']['narrative'])
        lines.append(f"\nMessage cl√© : {strategy['main_approach']['key_message']}")
        lines.append("\nAxes prioritaires :")
        for i, axis in enumerate(strategy['main_approach']['primary_axes'], 1):
            lines.append(f"  {i}. {axis}")
        lines.append("")
        
        # Plan d'action
        lines.append("PLAN D'ACTION")
        lines.append("-" * 30)
        for phase in strategy['action_plan']:
            lines.append(f"\n{phase['phase']} (Priorit√© : {phase['priority']})")
            for task in phase['tasks']:
                lines.append(f"  - {task}")
        lines.append("")
        
        # Arguments
        lines.append("ARGUMENTS JURIDIQUES")
        lines.append("-" * 30)
        lines.append("\nArguments principaux :")
        for i, arg in enumerate(strategy['arguments']['principaux'], 1):
            lines.append(f"  {i}. {arg}")
        
        if strategy['arguments']['subsidiaires']:
            lines.append("\nArguments subsidiaires :")
            for i, arg in enumerate(strategy['arguments']['subsidiaires'], 1):
                lines.append(f"  {i}. {arg}")
        lines.append("")
        
        # Ressources
        lines.append("RESSOURCES N√âCESSAIRES")
        lines.append("-" * 30)
        lines.append(f"Budget estim√© : {strategy['resources']['budget_estimate']}")
        lines.append(f"Temps estim√© : {strategy['resources']['time_estimate']}")
        lines.append("\n√âquipe :")
        for member in strategy['resources']['team']:
            lines.append(f"  - {member}")
        
        return "\n".join(lines)
    
    def _render_strategy_library(self):
        """Biblioth√®que de strat√©gies sauvegard√©es"""
        st.markdown("#### üìö Biblioth√®que de strat√©gies")
        
        if 'strategy_history' not in st.session_state or not st.session_state.strategy_history:
            st.info("Aucune strat√©gie sauvegard√©e. Cr√©ez votre premi√®re strat√©gie pour commencer.")
            return
        
        # Filtres
        col1, col2, col3 = st.columns(3)
        
        with col1:
            filter_type = st.selectbox(
                "Type d'affaire",
                ["Tous"] + list(self.strategy_templates.keys()),
                format_func=lambda x: "Tous" if x == "Tous" else self.strategy_templates[x]['name']
            )
        
        with col2:
            filter_urgency = st.selectbox(
                "Urgence",
                ["Tous", "Faible", "Mod√©r√©e", "√âlev√©e", "Critique"]
            )
        
        with col3:
            search = st.text_input("Rechercher", placeholder="Mots-cl√©s...")
        
        # Filtrer les strat√©gies
        filtered_strategies = st.session_state.strategy_history
        
        if filter_type != "Tous":
            filtered_strategies = [
                s for s in filtered_strategies 
                if s['config']['case_type'] == filter_type
            ]
        
        if filter_urgency != "Tous":
            filtered_strategies = [
                s for s in filtered_strategies 
                if s['config']['urgency'] == filter_urgency
            ]
        
        if search:
            filtered_strategies = [
                s for s in filtered_strategies 
                if search.lower() in s['config']['context'].lower()
            ]
        
        # Afficher les strat√©gies
        for strategy in filtered_strategies:
            with st.expander(
                f"{self.strategy_templates[strategy['config']['case_type']]['name']} - "
                f"{strategy['created_at'].strftime('%d/%m/%Y')}",
                expanded=False
            ):
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.write(f"**Urgence :** {strategy['config']['urgency']}")
                    st.write(f"**Complexit√© :** {strategy['config']['complexity']}")
                    st.write(f"**Contexte :** {strategy['config']['context'][:200]}...")
                
                with col2:
                    if st.button("üìÇ Charger", key=f"load_{strategy['id']}"):
                        self._display_strategy(strategy)
                    
                    if st.button("üóëÔ∏è Supprimer", key=f"delete_{strategy['id']}"):
                        st.session_state.strategy_history.remove(strategy)
                        st.rerun()
    
    def _render_strategy_comparison(self):
        """Compare plusieurs strat√©gies"""
        st.markdown("#### üîÑ Comparaison de strat√©gies")
        
        if 'strategy_history' not in st.session_state or len(st.session_state.strategy_history) < 2:
            st.info("Au moins 2 strat√©gies sont n√©cessaires pour effectuer une comparaison.")
            return
        
        # S√©lection des strat√©gies √† comparer
        strategies_options = [
            f"{s['id']} - {s['created_at'].strftime('%d/%m/%Y')}"
            for s in st.session_state.strategy_history
        ]
        
        selected_indices = st.multiselect(
            "S√©lectionner 2 √† 4 strat√©gies",
            range(len(strategies_options)),
            format_func=lambda x: strategies_options[x],
            max_selections=4
        )
        
        if len(selected_indices) >= 2:
            if st.button("üîç Comparer", type="primary"):
                selected_strategies = [
                    st.session_state.strategy_history[i] 
                    for i in selected_indices
                ]
                
                self._display_strategy_comparison(selected_strategies)
    
    def _display_strategy_comparison(self, strategies: List[Dict[str, Any]]):
        """Affiche la comparaison de strat√©gies"""
        st.markdown("### üìä Comparaison des strat√©gies")
        
        # Tableau comparatif
        comparison_data = []
        
        for strategy in strategies:
            comparison_data.append({
                'ID': strategy['id'][-8:],
                'Type': self.strategy_templates[strategy['config']['case_type']]['name'],
                'Urgence': strategy['config']['urgency'],
                'Complexit√©': strategy['config']['complexity'],
                'Budget': strategy['config']['budget'],
                'Axes': len(strategy['main_approach']['primary_axes']),
                'Actions': sum(len(phase['tasks']) for phase in strategy['action_plan']),
                'Risque': strategy.get('risks', {}).get('level', 'N/A')
            })
        
        # Afficher sous forme de colonnes
        cols = st.columns(len(strategies))
        
        for i, (col, data) in enumerate(zip(cols, comparison_data)):
            with col:
                st.markdown(f"**Strat√©gie {i+1}**")
                for key, value in data.items():
                    st.write(f"**{key}:** {value}")
        
        # Points de divergence
        st.markdown("#### üîÄ Points de divergence")
        
        # Identifier les diff√©rences majeures
        divergences = []
        
        # Comparer les urgences
        urgencies = set(s['config']['urgency'] for s in strategies)
        if len(urgencies) > 1:
            divergences.append(f"**Urgence variable :** {', '.join(urgencies)}")
        
        # Comparer les approches
        approaches = set(tuple(s['main_approach']['primary_axes']) for s in strategies)
        if len(approaches) > 1:
            divergences.append("**Approches strat√©giques diff√©rentes**")
        
        # Comparer les budgets
        budgets = set(s['config']['budget'] for s in strategies)
        if len(budgets) > 1:
            divergences.append(f"**Budgets diff√©rents :** {', '.join(budgets)}")
        
        for divergence in divergences:
            st.warning(divergence)
        
        # Recommandation
        st.markdown("#### üí° Recommandation")
        
        # Strat√©gie optimale (simplifi√©e)
        optimal_idx = 0
        for i, strategy in enumerate(strategies):
            if strategy.get('risks', {}).get('level') == 'Faible':
                optimal_idx = i
                break
        
        st.success(
            f"La strat√©gie {optimal_idx + 1} semble la plus √©quilibr√©e "
            f"compte tenu du rapport risque/b√©n√©fice."
        )
    
    def _render_help(self):
        """Affiche l'aide du module"""
        st.markdown("""
        #### ‚ùì Guide d'utilisation du module Strat√©gie
        
        ##### üéØ Objectif
        Ce module vous aide √† d√©velopper des strat√©gies juridiques compl√®tes et adapt√©es √† votre affaire.
        
        ##### üìã Fonctionnalit√©s principales
        
        1. **G√©n√©ration de strat√©gie**
           - Analyse du contexte et des enjeux
           - Identification des axes de d√©fense
           - Plan d'action d√©taill√©
           - Arguments juridiques structur√©s
        
        2. **Analyse des risques**
           - Identification des points faibles
           - Strat√©gies de mitigation
           - Sc√©narios alternatifs
        
        3. **Planning et ressources**
           - Timeline avec jalons cl√©s
           - Estimation budg√©taire
           - Constitution de l'√©quipe
        
        ##### üí° Conseils d'utilisation
        
        - **Contexte d√©taill√©** : Plus vous fournissez d'informations, plus la strat√©gie sera pertinente
        - **Points faibles** : N'h√©sitez pas √† mentionner les difficult√©s, cela am√©liore l'analyse
        - **Objectifs clairs** : Hi√©rarchisez vos objectifs pour une strat√©gie focalis√©e
        - **R√©vision r√©guli√®re** : Adaptez la strat√©gie selon l'√©volution de l'affaire
        
        ##### üîß Param√®tres avanc√©s
        
        - **Jurisprudence** : Active la recherche de pr√©c√©dents
        - **Sc√©narios** : G√©n√®re des hypoth√®ses optimiste/r√©aliste/pessimiste
        - **Timeline** : Cr√©e un planning d√©taill√© avec livrables
        - **Analyse des risques** : √âvalue et propose des mitigations
        
        ##### üìä Interpr√©tation des r√©sultats
        
        - **Niveau de risque** : Faible (vert) ‚Üí √âlev√© (rouge)
        - **Priorit√©s** : Critique ‚Üí Strat√©gique
        - **Probabilit√©s** : Bas√©es sur l'exp√©rience et les pr√©c√©dents
        - **Budget** : Fourchette estimative √† affiner
        
        ##### ‚ú® Astuces
        
        - Utilisez la **comparaison** pour √©valuer plusieurs approches
        - Exportez en **PDF** pour partager avec votre √©quipe
        - La **biblioth√®que** conserve toutes vos strat√©gies
        - Adaptez les **templates** √† vos besoins sp√©cifiques
        """)


# Point d'entr√©e pour tests
if __name__ == "__main__":
    module = StrategyModule()
    module.render()