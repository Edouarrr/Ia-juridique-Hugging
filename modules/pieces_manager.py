# modules/pieces_manager.py
"""Module unifi√© de gestion des pi√®ces et bordereaux
Version am√©lior√©e avec lazy loading et multi-LLM
"""

import json
import os
import sys
import time
import traceback
import uuid
from dataclasses import dataclass, field
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple

import pandas as pd
import streamlit as st

# Ajouter le chemin parent pour les imports

from managers.azure_search_manager import AzureSearchManager
from managers.export_manager import ExportManager
# Import des gestionnaires
from managers.multi_llm_manager import MultiLLMManager
# Import des mod√®les
from models.dataclasses import (Document, ElementProcedure, ForceProbante,
                                NaturePiece, PieceProcedurale,
                                PieceSelectionnee)
# Import des utilitaires
from utils.file_utils import sanitize_filename, format_file_size
from utils.text_processing import extract_key_phrases
try:
    from utils.helpers import clean_key, truncate_text
    from utils.date_time import format_legal_date
except Exception:  # pragma: no cover - fallback for standalone use
    from utils.fallback import clean_key, format_legal_date, truncate_text
    from utils.file_utils import format_file_size
from utils.decorators import decorate_public_functions

# Enregistrement automatique des fonctions publiques pour le module
decorate_public_functions(sys.modules[__name__])

# ==================================================
# FONCTION PRINCIPALE (POINT D'ENTR√âE LAZY LOADING)
# ==================================================

def run():
    """Point d'entr√©e principal pour le lazy loading"""
    
    # Style CSS personnalis√©
    st.markdown("""
    <style>
    /* Animations */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .fade-in {
        animation: fadeIn 0.5s ease-out;
    }
    
    /* Cards am√©lior√©es */
    .piece-card {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 12px;
        padding: 1.5rem;
        margin: 0.5rem 0;
        border: 1px solid #dee2e6;
        transition: all 0.3s ease;
    }
    
    .piece-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        border-color: #007bff;
    }
    
    /* Badges */
    .category-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
        margin: 0.25rem;
    }
    
    .badge-contrat { background: #e3f2fd; color: #1565c0; }
    .badge-facture { background: #f3e5f5; color: #6a1b9a; }
    .badge-correspondance { background: #e8f5e9; color: #2e7d32; }
    .badge-procedure { background: #ffe6e6; color: #c62828; }
    .badge-expertise { background: #fff3e0; color: #e65100; }
    
    /* Progress indicators */
    .progress-step {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: #e9ecef;
        color: #6c757d;
        font-weight: bold;
        transition: all 0.3s;
    }
    
    .progress-step.active {
        background: #007bff;
        color: white;
        transform: scale(1.1);
    }
    
    .progress-step.completed {
        background: #28a745;
        color: white;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Header avec animation
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.markdown('<div class="fade-in">', unsafe_allow_html=True)
        st.title("üìé Gestion Intelligente des Pi√®ces")
        st.markdown("*S√©lection, analyse et g√©n√©ration de bordereaux avec IA*")
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Initialisation
    init_pieces_manager()
    gestionnaire = st.session_state.gestionnaire_pieces
    
    # Barre de progression visuelle
    display_progress_bar()
    
    # Interface principale avec onglets am√©lior√©s
    display_enhanced_interface(gestionnaire)

# ==================================================
# CLASSE PRINCIPALE UNIFI√âE (CONSERV√âE)
# ==================================================

class GestionnairePiecesUnifie:
    """Gestionnaire unifi√© pour pi√®ces et bordereaux"""
    
    def __init__(self):
        self.pieces_disponibles: Dict[str, PieceSelectionnee] = {}
        self.pieces_selectionnees: List[PieceSelectionnee] = []
        self.categories_pieces = {
            "Contrats": ["contrat", "convention", "accord", "pacte", "bail"],
            "Factures": ["facture", "devis", "bon de commande", "avoir"],
            "Correspondances": ["email", "courrier", "lettre", "mail", "message"],
            "Documents comptables": ["bilan", "compte", "comptable", "fiscal", "d√©claration"],
            "Proc√©dure": ["assignation", "jugement", "ordonnance", "arr√™t", "citation"],
            "Expertises": ["rapport", "expertise", "constat", "proc√®s-verbal"],
            "Preuves": ["attestation", "t√©moignage", "certificat", "justificatif"],
            "Administratif": ["statuts", "kbis", "pouvoir", "d√©l√©gation"]
        }
        self.llm_manager = None
        self.search_manager = None
        self.export_manager = None
        self._init_managers()
    
    def _init_managers(self):
        """Initialise les gestionnaires"""
        try:
            self.llm_manager = MultiLLMManager()
        except:
            pass
        
        try:
            self.search_manager = st.session_state.get('azure_search_manager')
        except:
            pass
        
        try:
            self.export_manager = ExportManager()
        except:
            pass
    
    # ==================================================
    # GESTION DES PI√àCES (TOUTES LES M√âTHODES CONSERV√âES)
    # ==================================================
    
    def ajouter_piece_disponible(self, piece: PieceSelectionnee) -> bool:
        """Ajoute une pi√®ce aux pi√®ces disponibles"""
        try:
            # G√©n√©rer un ID unique si n√©cessaire
            if not hasattr(piece, 'id'):
                piece.id = f"piece_{uuid.uuid4().hex[:8]}"
            
            # Cat√©goriser automatiquement
            if not piece.categorie or piece.categorie == "Autre":
                piece.categorie = self.categoriser_piece(piece)
            
            # Ajouter aux disponibles
            self.pieces_disponibles[piece.id] = piece
            return True
            
        except Exception as e:
            st.error(f"Erreur ajout pi√®ce : {str(e)}")
            return False
    
    def selectionner_piece(self, piece_id: str) -> bool:
        """S√©lectionne une pi√®ce pour le bordereau"""
        if piece_id in self.pieces_disponibles:
            piece = self.pieces_disponibles[piece_id]
            
            # V√©rifier si d√©j√† s√©lectionn√©e
            if not any(p.id == piece_id for p in self.pieces_selectionnees):
                # Attribuer un num√©ro
                piece.numero = len(self.pieces_selectionnees) + 1
                self.pieces_selectionnees.append(piece)
                return True
        return False
    
    def deselectionner_piece(self, piece_id: str) -> bool:
        """Retire une pi√®ce de la s√©lection"""
        self.pieces_selectionnees = [
            p for p in self.pieces_selectionnees if p.id != piece_id
        ]
        # Renum√©roter
        for i, piece in enumerate(self.pieces_selectionnees):
            piece.numero = i + 1
        return True
    
    def categoriser_piece(self, piece: PieceSelectionnee) -> str:
        """Cat√©gorise automatiquement une pi√®ce"""
        titre_lower = piece.titre.lower()
        contenu_lower = (piece.description or "").lower()
        
        for categorie, mots_cles in self.categories_pieces.items():
            for mot in mots_cles:
                if mot in titre_lower or mot in contenu_lower:
                    return categorie
        
        return "Autre"
    
    def rechercher_pieces(self, query: str) -> List[PieceSelectionnee]:
        """Recherche des pi√®ces dans les documents"""
        pieces = []
        
        # Recherche dans les documents import√©s
        if 'imported_documents' in st.session_state:
            for doc_id, doc in st.session_state.imported_documents.items():
                if self._match_document(doc, query):
                    piece = self._document_to_piece(doc, len(pieces) + 1)
                    pieces.append(piece)
        
        # Recherche Azure si disponible
        if self.search_manager and st.session_state.get('azure_documents'):
            results = self.search_manager.search_documents(query, top=20)
            for result in results:
                piece = self._search_result_to_piece(result, len(pieces) + 1)
                pieces.append(piece)
        
        return pieces
    
    def _match_document(self, doc: Document, query: str) -> bool:
        """V√©rifie si un document correspond √† la recherche"""
        query_lower = query.lower()
        return (
            query_lower in doc.title.lower() or
            query_lower in doc.content.lower() or
            (doc.metadata and query_lower in str(doc.metadata).lower())
        )
    
    def _document_to_piece(self, doc: Document, numero: int) -> PieceSelectionnee:
        """Convertit un document en pi√®ce"""
        return PieceSelectionnee(
            numero=numero,
            titre=doc.title,
            description=truncate_text(doc.content, 200),
            categorie=self.categoriser_piece(PieceSelectionnee(
                numero=numero,
                titre=doc.title,
                description=doc.content
            )),
            date=doc.metadata.get('date') if doc.metadata else None,
            source=doc.source,
            pertinence=0.8,
            document_source=doc
        )
    
    def _search_result_to_piece(self, result: dict, numero: int) -> PieceSelectionnee:
        """Convertit un r√©sultat de recherche en pi√®ce"""
        return PieceSelectionnee(
            numero=numero,
            titre=result.get('title', 'Sans titre'),
            description=result.get('content', '')[:200],
            categorie="R√©sultat de recherche",
            source="Azure Search",
            pertinence=result.get('@search.score', 0.5)
        )
    
    # ==================================================
    # G√âN√âRATION DE BORDEREAUX (TOUTES LES M√âTHODES CONSERV√âES)
    # ==================================================
    
    def generer_bordereau(
        self,
        pieces: List[PieceSelectionnee],
        type_bordereau: str = "communication",
        metadata: Optional[Dict] = None
    ) -> Dict[str, Any]:
        """G√©n√®re un bordereau de pi√®ces"""
        
        if not pieces:
            return {"error": "Aucune pi√®ce s√©lectionn√©e"}
        
        # Pr√©parer les m√©tadonn√©es
        meta = metadata or {}
        meta.update({
            'date_generation': datetime.now(),
            'nombre_pieces': len(pieces),
            'type': type_bordereau
        })
        
        # G√©n√©rer le contenu selon le type
        if type_bordereau == "communication":
            contenu = self._generer_bordereau_communication(pieces, meta)
        elif type_bordereau == "inventaire":
            contenu = self._generer_bordereau_inventaire(pieces, meta)
        elif type_bordereau == "contradictoire":
            contenu = self._generer_bordereau_contradictoire(pieces, meta)
        else:
            contenu = self._generer_bordereau_simple(pieces, meta)
        
        return {
            'type': type_bordereau,
            'contenu': contenu,
            'pieces': pieces,
            'metadata': meta,
            'stats': self._calculer_stats_pieces(pieces)
        }
    
    def _generer_bordereau_communication(
        self,
        pieces: List[PieceSelectionnee],
        metadata: Dict
    ) -> str:
        """G√©n√®re un bordereau de communication de pi√®ces"""
        
        # En-t√™te
        date_str = datetime.now().strftime('%d/%m/%Y')
        avocat_name = metadata.get('avocat', '[Nom de l\'avocat]')
        barreau_ville = metadata.get('barreau', '[Ville]')
        
        contenu = f"""BORDEREAU DE COMMUNICATION DE PI√àCES
R√©f√©rence : {metadata.get('reference', 'N/A')}
Date : {date_str}
{metadata.get('destinataire', 'TRIBUNAL JUDICIAIRE')}
Affaire : {metadata.get('client', '')} c/ {metadata.get('adversaire', '')}
{metadata.get('juridiction', '')}
Ma√Ætre {avocat_name}
Avocat au Barreau de {barreau_ville}
COMMUNIQUE LES PI√àCES SUIVANTES :
"""
        
        # Liste des pi√®ces par cat√©gorie
        categories = self._grouper_par_categorie(pieces)
        
        for categorie, pieces_cat in categories.items():
            if len(categories) > 1:
                contenu += f"\n{categorie.upper()}\n\n"
            
            for piece in pieces_cat:
                contenu += f"Pi√®ce n¬∞ {piece.numero} : {piece.titre}"
                
                if piece.date:
                    date_piece_str = piece.date.strftime('%d/%m/%Y')
                    contenu += f" ({date_piece_str})"
                
                if piece.description:
                    contenu += f"\n              {truncate_text(piece.description, 100)}"
                
                contenu += "\n"
        
        # Total et signature
        date_jour = datetime.now().strftime('%d/%m/%Y')
        ville_str = metadata.get('ville', '[Ville]')
        avocat_str = metadata.get('avocat', '[Nom de l\'avocat]')
        
        contenu += f"""
TOTAL : {len(pieces)} pi√®ce{'s' if len(pieces) > 1 else ''}
Fait √† {ville_str}, le {date_jour}
Ma√Ætre {avocat_str}
"""
        
        return contenu
    
    def _generer_bordereau_inventaire(
        self,
        pieces: List[PieceSelectionnee],
        metadata: Dict
    ) -> str:
        """G√©n√®re un inventaire d√©taill√© des pi√®ces"""
        
        date_str = datetime.now().strftime('%d/%m/%Y')
        contenu = f"""INVENTAIRE DES PI√àCES
Date : {date_str}
R√©f√©rence : {metadata.get('reference', 'N/A')}
Nombre total de pi√®ces : {len(pieces)}
"""
        
        # Tableau d√©taill√©
        for piece in pieces:
            date_piece = piece.date.strftime('%d/%m/%Y') if piece.date else 'Non dat√©e'
            nature_value = piece.nature.value if hasattr(piece, 'nature') else 'Copie'
            force_probante_value = piece.force_probante.value if hasattr(piece, 'force_probante') else 'Normale'
            
            contenu += f"""
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
PI√àCE N¬∞ {piece.numero}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Titre : {piece.titre}
Cat√©gorie : {piece.categorie}
Date : {date_piece}
Source : {piece.source}
Cote : {piece.cote or f'P-{piece.numero:03d}'}
Description :
{piece.description or 'Aucune description'}
Nature : {nature_value}
Communicable : {'Oui' if piece.communicable else 'Non'}
Confidentiel : {'Oui' if piece.confidentiel else 'Non'}
Force probante : {force_probante_value}
"""
        
        return contenu
    
    def _generer_bordereau_contradictoire(
        self,
        pieces: List[PieceSelectionnee],
        metadata: Dict
    ) -> str:
        """G√©n√®re un bordereau contradictoire avec accus√©"""
        
        contenu = self._generer_bordereau_communication(pieces, metadata)
        
        # Ajouter section accus√© de r√©ception
        contenu += """
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
ACCUS√â DE R√âCEPTION
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Je soussign√©(e), Ma√Ætre ________________________________
Avocat de _____________________________________________
Reconnais avoir re√ßu communication des pi√®ces ci-dessus √©num√©r√©es.
Fait √† _________________, le _____/_____/_______
Signature :
"""
        
        return contenu
    
    def _generer_bordereau_simple(
        self,
        pieces: List[PieceSelectionnee],
        metadata: Dict
    ) -> str:
        """G√©n√®re un bordereau simple"""
        
        contenu = "LISTE DES PI√àCES\n\n"
        
        for piece in pieces:
            contenu += f"{piece.numero}. {piece.titre}\n"
        
        return contenu
    
    def _grouper_par_categorie(
        self,
        pieces: List[PieceSelectionnee]
    ) -> Dict[str, List[PieceSelectionnee]]:
        """Groupe les pi√®ces par cat√©gorie"""
        categories = {}
        
        for piece in pieces:
            cat = piece.categorie or "Autres"
            if cat not in categories:
                categories[cat] = []
            categories[cat].append(piece)
        
        return categories
    
    def _calculer_stats_pieces(self, pieces: List[PieceSelectionnee]) -> Dict:
        """Calcule des statistiques sur les pi√®ces"""
        stats = {
            'total': len(pieces),
            'par_categorie': {},
            'communicables': sum(1 for p in pieces if p.communicable),
            'confidentielles': sum(1 for p in pieces if p.confidentiel),
            'avec_date': sum(1 for p in pieces if p.date),
            'pertinence_moyenne': sum(p.pertinence for p in pieces) / len(pieces) if pieces else 0
        }
        
        # Stats par cat√©gorie
        for piece in pieces:
            cat = piece.categorie or "Autres"
            stats['par_categorie'][cat] = stats['par_categorie'].get(cat, 0) + 1
        
        return stats
    
    # ==================================================
    # ANALYSE INTELLIGENTE MULTI-LLM (AM√âLIOR√âE)
    # ==================================================
    
    def analyser_pertinence_pieces_multi_llm(
        self,
        pieces: List[PieceSelectionnee],
        contexte: str,
        llm_choices: List[str],
        fusion_mode: str = "consensus"
    ) -> Dict[str, Any]:
        """Analyse la pertinence avec plusieurs LLMs"""
        
        if not self.llm_manager:
            return {"error": "IA non disponible"}
        
        # Pr√©parer le prompt
        prompt = f"""Contexte de l'affaire : {contexte}

Pi√®ces √† analyser :
"""
        for piece in pieces[:20]:  # Limiter √† 20 pi√®ces
            prompt += f"\n- Pi√®ce {piece.numero} : {piece.titre}"
            if piece.description:
                prompt += f" - {truncate_text(piece.description, 100)}"
        
        prompt += """

Pour chaque pi√®ce, √©value :
1. Sa pertinence (0-10) par rapport au contexte
2. Son importance strat√©gique (faible/moyenne/√©lev√©e)
3. Les risques potentiels associ√©s
4. Les pi√®ces compl√©mentaires sugg√©r√©es

Format : analyse structur√©e avec recommandations pr√©cises."""
        
        system_prompt = """Tu es un expert en analyse de pi√®ces juridiques sp√©cialis√© en droit p√©nal des affaires.
Tu dois fournir une analyse d√©taill√©e et structur√©e en suivant le format demand√©."""
        
        # Collecter les analyses de chaque LLM
        with st.spinner("ü§ñ Analyse multi-IA en cours..."):
            if fusion_mode == "consensus":
                # Mode consensus : tous les LLMs
                response = self.llm_manager.query_llms_consensus(
                    llm_choices,
                    prompt,
                    system_prompt
                )
            elif fusion_mode == "parallel":
                # Mode parall√®le : analyses individuelles
                response = self.llm_manager.query_llms_parallel(
                    llm_choices,
                    prompt,
                    system_prompt
                )
            else:
                # Mode simple : premier LLM disponible
                response = self.llm_manager.query_single_llm(
                    llm_choices[0],
                    prompt,
                    system_prompt
                )
        
        if response['success']:
            return {
                'analyse': response['response'],
                'mode': fusion_mode,
                'llms_used': llm_choices,
                'pieces_analysees': len(pieces),
                'timestamp': datetime.now(),
                'consensus_score': response.get('consensus_score', 0)
            }
        else:
            return {"error": response.get('error', 'Erreur analyse')}
    
    def suggerer_pieces_manquantes(
        self,
        pieces_existantes: List[PieceSelectionnee],
        type_affaire: str
    ) -> List[str]:
        """Sugg√®re des pi√®ces manquantes selon le type d'affaire"""
        
        # Dictionnaire des pi√®ces types par affaire
        pieces_types = {
            "abus_biens_sociaux": [
                "Statuts de la soci√©t√©",
                "K-bis",
                "Comptes annuels",
                "Rapports du commissaire aux comptes",
                "PV d'assembl√©es g√©n√©rales",
                "Relev√©s bancaires soci√©t√©",
                "Contrats litigieux",
                "Factures suspectes"
            ],
            "escroquerie": [
                "Plainte initiale",
                "Contrats ou promesses",
                "√âchanges de correspondances",
                "Preuves de paiement",
                "Documents publicitaires",
                "T√©moignages",
                "Expertises"
            ],
            "faux_usage_faux": [
                "Document falsifi√©",
                "Document original",
                "Rapport d'expertise en √©criture",
                "Preuves d'utilisation",
                "Pr√©judice subi"
            ],
            "corruption": [
                "Preuves de sollicitation",
                "√âchanges entre parties",
                "Mouvements financiers",
                "Contrats obtenus",
                "T√©moignages"
            ]
        }
        
        # Identifier les pi√®ces manquantes
        pieces_necessaires = pieces_types.get(type_affaire, [])
        titres_existants = [p.titre.lower() for p in pieces_existantes]
        
        manquantes = []
        for piece_type in pieces_necessaires:
            if not any(piece_type.lower() in titre for titre in titres_existants):
                manquantes.append(piece_type)
        
        return manquantes
    
    # ==================================================
    # EXPORT ET FORMATS (TOUTES LES M√âTHODES CONSERV√âES)
    # ==================================================
    
    def exporter_bordereau(
        self,
        bordereau: Dict[str, Any],
        format_export: str = "word"
    ) -> Optional[bytes]:
        """Exporte le bordereau dans le format demand√©"""
        
        if not self.export_manager:
            st.error("Module d'export non disponible")
            return None
        
        try:
            if format_export == "word":
                return self.export_manager.export_to_word(
                    bordereau['contenu'],
                    title=f"Bordereau_{bordereau['type']}",
                    metadata=bordereau['metadata']
                )
            elif format_export == "pdf":
                return self.export_manager.export_to_pdf(
                    bordereau['contenu'],
                    title=f"Bordereau_{bordereau['type']}"
                )
            elif format_export == "excel":
                # Convertir en DataFrame
                df_data = []
                for piece in bordereau['pieces']:
                    date_str = piece.date.strftime('%d/%m/%Y') if piece.date else ''
                    df_data.append({
                        'N¬∞': piece.numero,
                        'Titre': piece.titre,
                        'Cat√©gorie': piece.categorie,
                        'Date': date_str,
                        'Description': piece.description,
                        'Source': piece.source,
                        'Cote': piece.cote or f'P-{piece.numero:03d}'
                    })
                df = pd.DataFrame(df_data)
                return self.export_manager.export_to_excel(
                    {'Bordereau': df},
                    title=f"Bordereau_{bordereau['type']}"
                )
            else:
                return bordereau['contenu'].encode('utf-8')
                
        except Exception as e:
            st.error(f"Erreur export : {str(e)}")
            return None

# ==================================================
# FONCTIONS D'INTERFACE STREAMLIT AM√âLIOR√âES
# ==================================================

def init_pieces_manager():
    """Initialise le gestionnaire de pi√®ces dans session_state"""
    if 'gestionnaire_pieces' not in st.session_state:
        st.session_state.gestionnaire_pieces = GestionnairePiecesUnifie()
    
    # Initialiser les autres √©tats
    if 'pieces_selectionnees' not in st.session_state:
        st.session_state.pieces_selectionnees = {}
    
    if 'current_bordereau' not in st.session_state:
        st.session_state.current_bordereau = None
    
    if 'piece_analysis' not in st.session_state:
        st.session_state.piece_analysis = {}
    
    if 'current_step' not in st.session_state:
        st.session_state.current_step = 1

def display_progress_bar():
    """Affiche une barre de progression visuelle"""
    steps = [
        {"num": 1, "name": "S√©lection", "icon": "üìã"},
        {"num": 2, "name": "Analyse", "icon": "üîç"},
        {"num": 3, "name": "Bordereau", "icon": "üìù"},
        {"num": 4, "name": "Export", "icon": "üì§"}
    ]
    
    col1, col2, col3, col4, col5, col6, col7 = st.columns([1,1,1,1,1,1,1])
    
    current = st.session_state.get('current_step', 1)
    
    for i, (col, step) in enumerate(zip([col1, col3, col5, col7], steps)):
        with col:
            if step['num'] < current:
                st.markdown(f"""
                <div class="progress-step completed">
                    ‚úì
                </div>
                <small>{step['name']}</small>
                """, unsafe_allow_html=True)
            elif step['num'] == current:
                st.markdown(f"""
                <div class="progress-step active">
                    {step['icon']}
                </div>
                <small><b>{step['name']}</b></small>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div class="progress-step">
                    {step['num']}
                </div>
                <small>{step['name']}</small>
                """, unsafe_allow_html=True)
    
    # Lignes de connexion
    for col in [col2, col4, col6]:
        with col:
            st.markdown("‚ûî", unsafe_allow_html=True)

def display_enhanced_interface(gestionnaire: GestionnairePiecesUnifie):
    """Interface principale am√©lior√©e"""
    
    # Onglets avec ic√¥nes et design am√©lior√©
    tab_icons = ["üìã", "üîç", "üìù", "üìä", "‚öôÔ∏è"]
    tab_names = ["S√©lection", "Analyse IA", "Bordereau", "Statistiques", "Configuration"]
    
    tabs = st.tabs([f"{icon} {name}" for icon, name in zip(tab_icons, tab_names)])
    
    with tabs[0]:
        st.session_state.current_step = 1
        display_enhanced_selection_tab(gestionnaire)
    
    with tabs[1]:
        st.session_state.current_step = 2
        display_enhanced_analysis_tab(gestionnaire)
    
    with tabs[2]:
        st.session_state.current_step = 3
        display_enhanced_bordereau_tab(gestionnaire)
    
    with tabs[3]:
        display_enhanced_statistics_tab(gestionnaire)
    
    with tabs[4]:
        display_configuration_tab(gestionnaire)

def display_enhanced_selection_tab(gestionnaire: GestionnairePiecesUnifie):
    """Onglet de s√©lection am√©lior√©"""
    
    # Layout en 2 colonnes principales
    col_main, col_sidebar = st.columns([3, 1])
    
    with col_sidebar:
        # Panel de r√©sum√© flottant
        st.markdown("### üìé S√©lection actuelle")
        
        nb_selected = len(gestionnaire.pieces_selectionnees)
        
        # M√©triques visuelles
        st.metric("Pi√®ces s√©lectionn√©es", nb_selected, 
                  delta=f"+{nb_selected}" if nb_selected > 0 else None)
        
        if nb_selected > 0:
            # Mini liste des pi√®ces
            with st.expander("Voir la s√©lection", expanded=True):
                for piece in gestionnaire.pieces_selectionnees[:5]:
                    st.caption(f"{piece.numero}. {truncate_text(piece.titre, 30)}")
                if nb_selected > 5:
                    st.caption(f"... et {nb_selected - 5} autres")
            
            # Actions rapides
            st.markdown("### üöÄ Actions rapides")
            
            if st.button("üìù Cr√©er bordereau", type="primary", use_container_width=True):
                st.session_state.show_bordereau_creation = True
            
            if st.button("üîç Analyser avec IA", use_container_width=True):
                st.session_state.current_step = 2
                st.rerun()
            
            if st.button("üóëÔ∏è Vider la s√©lection", use_container_width=True):
                gestionnaire.pieces_selectionnees.clear()
                st.rerun()
    
    with col_main:
        # Barre de recherche am√©lior√©e
        st.markdown("### üîç Recherche intelligente")
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            search_query = st.text_input(
                "Rechercher des documents",
                placeholder="Ex: contrat 2024, facture client X, expertise...",
                key="piece_search_enhanced",
                label_visibility="collapsed"
            )
        
        with col2:
            search_clicked = st.button("üîç Rechercher", type="primary", use_container_width=True)
        
        # Filtres avanc√©s
        with st.expander("‚öôÔ∏è Filtres avanc√©s", expanded=False):
            col_a, col_b, col_c = st.columns(3)
            
            with col_a:
                search_category = st.multiselect(
                    "Cat√©gories",
                    list(gestionnaire.categories_pieces.keys()),
                    key="search_categories_multi"
                )
            
            with col_b:
                search_dates = st.date_input(
                    "P√©riode",
                    value=[],
                    key="search_date_range"
                )
            
            with col_c:
                search_source = st.multiselect(
                    "Sources",
                    ["Documents import√©s", "Azure", "Templates"],
                    key="search_sources_multi"
                )
        
        # Effectuer la recherche
        if search_clicked and search_query:
            with st.spinner("üîé Recherche en cours..."):
                time.sleep(0.5)  # Animation
                pieces = gestionnaire.rechercher_pieces(search_query)
                st.session_state.search_results_pieces = pieces
        
        # R√©sultats de recherche
        if 'search_results_pieces' in st.session_state:
            display_enhanced_search_results(gestionnaire, st.session_state.search_results_pieces)
        
        # Sources de documents
        st.markdown("### üìö Sources de documents")
        
        source_tabs = st.tabs([
            "üì• Import√©s", 
            "‚òÅÔ∏è Azure", 
            "üìã Templates", 
            "‚ûï Cr√©er"
        ])
        
        with source_tabs[0]:
            display_enhanced_imported_documents(gestionnaire)
        
        with source_tabs[1]:
            display_enhanced_azure_documents(gestionnaire)
        
        with source_tabs[2]:
            display_enhanced_templates(gestionnaire)
        
        with source_tabs[3]:
            display_enhanced_manual_creation(gestionnaire)

def display_enhanced_search_results(
    gestionnaire: GestionnairePiecesUnifie,
    results: List[PieceSelectionnee]
):
    """Affiche les r√©sultats de recherche avec un design am√©lior√©"""
    
    if not results:
        st.info("üîç Aucun r√©sultat trouv√©. Essayez avec d'autres mots-cl√©s.")
        return
    
    st.success(f"‚úÖ {len(results)} document(s) trouv√©(s)")
    
    # Grille de r√©sultats
    for i, piece in enumerate(results[:20]):
        with st.container():
            st.markdown(f'<div class="piece-card fade-in" style="animation-delay: {i*0.05}s">', 
                       unsafe_allow_html=True)
            
            col1, col2, col3 = st.columns([3, 1.5, 1])
            
            with col1:
                # Titre et description
                st.markdown(f"**{piece.titre}**")
                if piece.description:
                    st.caption(truncate_text(piece.description, 150))
                
                # Tags
                tags_html = f'<span class="category-badge badge-{piece.categorie.lower()}">{piece.categorie}</span>'
                if piece.date:
                    date_str = piece.date.strftime('%d/%m/%Y')
                    tags_html += f' <span class="category-badge">üìÖ {date_str}</span>'
                st.markdown(tags_html, unsafe_allow_html=True)
            
            with col2:
                # Pertinence visuelle
                st.progress(piece.pertinence, text=f"Pertinence: {piece.pertinence:.0%}")
            
            with col3:
                # Actions
                is_selected = any(p.id == piece.id for p in gestionnaire.pieces_selectionnees)
                
                if is_selected:
                    if st.button("‚úÖ S√©lectionn√©e", key=f"remove_{piece.id}", 
                                use_container_width=True):
                        gestionnaire.deselectionner_piece(piece.id)
                        st.rerun()
                else:
                    if st.button("‚ûï S√©lectionner", key=f"add_{piece.id}", 
                                type="primary", use_container_width=True):
                        gestionnaire.ajouter_piece_disponible(piece)
                        gestionnaire.selectionner_piece(piece.id)
                        st.success(f"‚úÖ '{piece.titre}' ajout√©e")
                        time.sleep(0.5)
                        st.rerun()
            
            st.markdown('</div>', unsafe_allow_html=True)

def display_enhanced_imported_documents(gestionnaire: GestionnairePiecesUnifie):
    """Affiche les documents import√©s avec un design am√©lior√©"""
    
    if not st.session_state.get('imported_documents'):
        st.info("üì• Aucun document import√©. Utilisez le module Import/Export pour ajouter des documents.")
        
        if st.button("üöÄ Aller √† l'import", type="primary"):
            st.session_state.selected_module = "import_export"
            st.rerun()
        return
    
    # Grille de documents
    docs = list(st.session_state.imported_documents.items())
    
    # Barre de s√©lection rapide
    col1, col2 = st.columns([3, 1])
    with col1:
        st.info(f"üìö {len(docs)} document(s) disponible(s)")
    with col2:
        if st.button("‚úÖ Tout s√©lectionner", use_container_width=True):
            for doc_id, doc in docs:
                piece = gestionnaire._document_to_piece(doc, len(gestionnaire.pieces_selectionnees) + 1)
                gestionnaire.ajouter_piece_disponible(piece)
                gestionnaire.selectionner_piece(piece.id)
            st.success(f"‚úÖ {len(docs)} documents ajout√©s")
            st.rerun()
    
    # Affichage des documents
    for i, (doc_id, doc) in enumerate(docs):
        display_enhanced_document_card(gestionnaire, doc, doc_id, i)

def display_enhanced_document_card(
    gestionnaire: GestionnairePiecesUnifie,
    doc: Document,
    doc_id: str,
    index: int
):
    """Affiche une carte de document am√©lior√©e"""
    
    with st.container():
        st.markdown(f'<div class="piece-card fade-in" style="animation-delay: {index*0.05}s">', 
                   unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns([3, 1, 1])
        
        with col1:
            st.markdown(f"**{doc.title}**")
            if hasattr(doc, 'content'):
                st.caption(truncate_text(doc.content, 120))
            
            # Cat√©gorie automatique
            piece_temp = PieceSelectionnee(
                numero=0,
                titre=doc.title,
                description=getattr(doc, 'content', '')
            )
            categorie = gestionnaire.categoriser_piece(piece_temp)
            
            tags_html = f'<span class="category-badge badge-{categorie.lower()}">{categorie}</span>'
            if doc.metadata and doc.metadata.get('date'):
                tags_html += f' <span class="category-badge">üìÖ {doc.metadata["date"]}</span>'
            st.markdown(tags_html, unsafe_allow_html=True)
        
        with col2:
            if doc.metadata:
                size = doc.metadata.get('size', 0)
                if size:
                    st.caption(f"üìÑ {format_file_size(size)}")
                source = doc.metadata.get('source', 'Local')
                st.caption(f"üìç {source}")
        
        with col3:
            is_selected = any(
                p.titre == doc.title for p in gestionnaire.pieces_selectionnees
            )
            
            if is_selected:
                if st.button("‚úÖ S√©lectionn√©e", key=f"doc_selected_{doc_id}", 
                            use_container_width=True):
                    piece_id = next(
                        (p.id for p in gestionnaire.pieces_selectionnees if p.titre == doc.title),
                        None
                    )
                    if piece_id:
                        gestionnaire.deselectionner_piece(piece_id)
                        st.rerun()
            else:
                if st.button("‚ûï S√©lectionner", key=f"doc_select_{doc_id}", 
                            type="primary", use_container_width=True):
                    piece = gestionnaire._document_to_piece(
                        doc,
                        len(gestionnaire.pieces_selectionnees) + 1
                    )
                    gestionnaire.ajouter_piece_disponible(piece)
                    gestionnaire.selectionner_piece(piece.id)
                    st.success(f"‚úÖ '{doc.title}' ajout√©e")
                    time.sleep(0.5)
                    st.rerun()
        
        st.markdown('</div>', unsafe_allow_html=True)

def display_enhanced_azure_documents(gestionnaire: GestionnairePiecesUnifie):
    """Affiche les documents Azure avec design am√©lior√©"""
    
    if not st.session_state.get('azure_documents'):
        st.info("‚òÅÔ∏è Aucun document Azure. Configurez Azure Storage dans les param√®tres.")
        
        if st.button("‚öôÔ∏è Configurer Azure", type="primary"):
            st.session_state.selected_module = "configuration"
            st.rerun()
        return
    
    # Affichage similaire aux documents import√©s
    docs = list(st.session_state.azure_documents.items())
    
    st.info(f"‚òÅÔ∏è {len(docs)} document(s) Azure disponible(s)")
    
    for i, (doc_id, doc) in enumerate(docs):
        display_enhanced_document_card(gestionnaire, doc, f"azure_{doc_id}", i)

def display_enhanced_templates(gestionnaire: GestionnairePiecesUnifie):
    """Affiche les templates de pi√®ces avec design am√©lior√©"""
    
    st.markdown("### üìã Mod√®les de pi√®ces par type d'affaire")
    
    # S√©lection du type avec ic√¥nes
    type_icons = {
        "Abus de biens sociaux": "üíº",
        "Escroquerie": "üé≠",
        "Faux et usage de faux": "üìù",
        "Corruption": "üí∞",
        "Blanchiment": "üè¶",
        "Abus de confiance": "ü§ù"
    }
    
    cols = st.columns(3)
    selected_type = None
    
    for i, (type_name, icon) in enumerate(type_icons.items()):
        col_idx = i % 3
        with cols[col_idx]:
            if st.button(f"{icon} {type_name}", key=f"type_{type_name}", 
                        use_container_width=True):
                selected_type = type_name
                st.session_state.selected_template_type = type_name
    
    # Afficher les pi√®ces sugg√©r√©es
    if st.session_state.get('selected_template_type'):
        type_affaire = st.session_state.selected_template_type
        type_key = type_affaire.lower().replace(" ", "_").replace("'", "")
        
        pieces_suggerees = gestionnaire.suggerer_pieces_manquantes(
            gestionnaire.pieces_selectionnees,
            type_key
        )
        
        if pieces_suggerees:
            st.warning(f"üí° {len(pieces_suggerees)} pi√®ce(s) sugg√©r√©e(s) pour {type_affaire}")
            
            # Grille de suggestions
            for i, piece_nom in enumerate(pieces_suggerees):
                with st.container():
                    col1, col2 = st.columns([4, 1])
                    
                    with col1:
                        st.markdown(f"‚Ä¢ **{piece_nom}**")
                        st.caption("Pi√®ce recommand√©e pour ce type d'affaire")
                    
                    with col2:
                        if st.button("‚ûï Cr√©er", key=f"create_template_{i}", 
                                    type="primary", use_container_width=True):
                            piece = PieceSelectionnee(
                                numero=len(gestionnaire.pieces_selectionnees) + 1,
                                titre=piece_nom,
                                description=f"[√Ä compl√©ter - {piece_nom}]",
                                categorie="Template",
                                source="Mod√®le"
                            )
                            gestionnaire.ajouter_piece_disponible(piece)
                            gestionnaire.selectionner_piece(piece.id)
                            st.success(f"‚úÖ Template '{piece_nom}' cr√©√©")
                            time.sleep(0.5)
                            st.rerun()
        else:
            st.success(f"‚úÖ Toutes les pi√®ces types pour {type_affaire} sont pr√©sentes")

def display_enhanced_manual_creation(gestionnaire: GestionnairePiecesUnifie):
    """Interface de cr√©ation manuelle am√©lior√©e"""
    
    st.markdown("### ‚ûï Cr√©er une pi√®ce manuellement")
    
    with st.form("create_piece_enhanced_form", clear_on_submit=True):
        col1, col2 = st.columns(2)
        
        with col1:
            titre = st.text_input("üìù Titre de la pi√®ce *", 
                                 placeholder="Ex: Contrat de prestations")
            
            categorie = st.selectbox(
                "üìÅ Cat√©gorie",
                [""] + list(gestionnaire.categories_pieces.keys()) + ["Autre"]
            )
            
            date = st.date_input("üìÖ Date du document", value=None)
            
            cote = st.text_input("üè∑Ô∏è Cote", placeholder="Ex: C-001")
        
        with col2:
            nature = st.selectbox(
                "üìã Nature",
                ["Original", "Copie", "Copie certifi√©e conforme"]
            )
            
            importance = st.select_slider(
                "‚≠ê Importance",
                options=["Faible", "Moyenne", "√âlev√©e", "Critique"],
                value="Moyenne"
            )
            
            col_a, col_b = st.columns(2)
            with col_a:
                communicable = st.checkbox("‚úÖ Communicable", value=True)
            with col_b:
                confidentiel = st.checkbox("üîí Confidentiel", value=False)
        
        description = st.text_area(
            "üìù Description",
            placeholder="Description d√©taill√©e de la pi√®ce et de son contenu...",
            height=120
        )
        
        # Tags personnalis√©s
        tags = st.text_input(
            "üè∑Ô∏è Tags (s√©par√©s par des virgules)",
            placeholder="Ex: urgent, preuve principale, √† v√©rifier"
        )
        
        submitted = st.form_submit_button(
            "üöÄ Cr√©er la pi√®ce",
            type="primary",
            use_container_width=True
        )
        
        if submitted:
            if titre and categorie:
                # Animation de cr√©ation
                with st.spinner("‚ú® Cr√©ation en cours..."):
                    time.sleep(0.5)
                    
                    # Cr√©er la pi√®ce avec les m√©tadonn√©es enrichies
                    piece = PieceSelectionnee(
                        numero=len(gestionnaire.pieces_selectionnees) + 1,
                        titre=titre,
                        description=description,
                        categorie=categorie,
                        date=date if date else None,
                        cote=cote,
                        nature=NaturePiece.ORIGINAL if nature == "Original" else NaturePiece.COPIE,
                        communicable=communicable,
                        confidentiel=confidentiel,
                        source="Cr√©ation manuelle",
                        metadata={
                            'importance': importance,
                            'tags': [t.strip() for t in tags.split(',')] if tags else []
                        }
                    )
                    
                    # Ajouter et s√©lectionner
                    gestionnaire.ajouter_piece_disponible(piece)
                    gestionnaire.selectionner_piece(piece.id)
                    
                    st.success(f"‚úÖ Pi√®ce '{titre}' cr√©√©e avec succ√®s!")
                    st.balloons()
                    time.sleep(1)
                    st.rerun()
            else:
                st.error("‚ùå Veuillez remplir au moins le titre et la cat√©gorie")

def display_enhanced_analysis_tab(gestionnaire: GestionnairePiecesUnifie):
    """Onglet d'analyse IA am√©lior√© avec multi-LLM"""
    
    st.markdown("### ü§ñ Analyse intelligente des pi√®ces")
    
    if not gestionnaire.pieces_selectionnees:
        st.info("‚ÑπÔ∏è S√©lectionnez d'abord des pi√®ces dans l'onglet 'S√©lection'")
        
        if st.button("üìã Aller √† la s√©lection", type="primary"):
            st.session_state.current_step = 1
            st.rerun()
        return
    
    # Configuration de l'analyse
    col1, col2 = st.columns([2, 1])
    
    with col1:
        contexte = st.text_area(
            "üìù Contexte de l'affaire",
            placeholder="D√©crivez l'affaire pour une analyse pertinente des pi√®ces...",
            height=120,
            value=st.session_state.get('current_analysis', {}).get('request', '')
        )
    
    with col2:
        type_affaire = st.selectbox(
            "‚öñÔ∏è Type d'affaire",
            [
                "Abus de biens sociaux",
                "Escroquerie",
                "Faux et usage de faux",
                "Corruption",
                "Blanchiment",
                "Autre"
            ]
        )
        
        st.markdown("**üìä Pi√®ces √† analyser**")
        st.metric("Total", len(gestionnaire.pieces_selectionnees))
    
    # Configuration Multi-LLM
    st.markdown("### ü§ñ Configuration IA")
    
    col_llm1, col_llm2, col_llm3 = st.columns(3)
    
    with col_llm1:
        # S√©lection des mod√®les
        available_llms = []
        if gestionnaire.llm_manager:
            available_llms = list(gestionnaire.llm_manager.clients.keys())
        
        selected_llms = st.multiselect(
            "ü§ñ Mod√®les IA",
            available_llms,
            default=available_llms[:2] if len(available_llms) >= 2 else available_llms,
            help="S√©lectionnez un ou plusieurs mod√®les pour l'analyse"
        )
    
    with col_llm2:
        fusion_mode = st.radio(
            "üîÑ Mode de fusion",
            ["consensus", "parallel", "simple"],
            format_func=lambda x: {
                "consensus": "ü§ù Consensus",
                "parallel": "üîÄ Parall√®le",
                "simple": "‚ö° Simple"
            }[x],
            help="Consensus: synth√®se des r√©ponses, Parall√®le: toutes les r√©ponses, Simple: premier mod√®le"
        )
    
    with col_llm2:
        analysis_depth = st.select_slider(
            "üî¨ Profondeur d'analyse",
            options=["Rapide", "Standard", "Approfondie"],
            value="Standard"
        )
    
    # Bouton d'analyse
    if st.button("üöÄ Lancer l'analyse multi-IA", type="primary", use_container_width=True):
        if contexte and selected_llms:
            # Animation d'analyse
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            phases = [
                ("Pr√©paration des donn√©es", 0.2),
                ("Interrogation des mod√®les IA", 0.5),
                ("Fusion des analyses", 0.8),
                ("G√©n√©ration du rapport", 1.0)
            ]
            
            for phase, progress in phases:
                status_text.text(f"‚è≥ {phase}...")
                progress_bar.progress(progress)
                time.sleep(0.5)
            
            # Lancer l'analyse
            analyse = gestionnaire.analyser_pertinence_pieces_multi_llm(
                gestionnaire.pieces_selectionnees,
                f"{contexte}\nType d'affaire : {type_affaire}",
                selected_llms,
                fusion_mode
            )
            
            if 'error' not in analyse:
                st.session_state.piece_analysis = analyse
                status_text.text("‚úÖ Analyse termin√©e avec succ√®s!")
                progress_bar.empty()
                st.success("üéâ Analyse multi-IA compl√©t√©e!")
                
                # Afficher les r√©sultats
                display_enhanced_analysis_results(analyse)
            else:
                st.error(f"‚ùå Erreur : {analyse['error']}")
        else:
            st.warning("‚ö†Ô∏è Veuillez remplir le contexte et s√©lectionner au moins un mod√®le IA")
    
    # Afficher l'analyse existante
    if st.session_state.get('piece_analysis') and not st.session_state.get('show_new_analysis'):
        display_enhanced_analysis_results(st.session_state.piece_analysis)
    
    # Suggestions de pi√®ces manquantes
    st.markdown("---")
    st.markdown("### üí° Analyse des pi√®ces manquantes")
    
    type_key = type_affaire.lower().replace(" ", "_").replace("'", "")
    pieces_manquantes = gestionnaire.suggerer_pieces_manquantes(
        gestionnaire.pieces_selectionnees,
        type_key
    )
    
    if pieces_manquantes:
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.warning(f"‚ö†Ô∏è {len(pieces_manquantes)} pi√®ce(s) potentiellement manquante(s)")
        
        with col2:
            if st.button("üìã Cr√©er les manquantes", type="primary", use_container_width=True):
                for piece_nom in pieces_manquantes:
                    piece = PieceSelectionnee(
                        numero=len(gestionnaire.pieces_selectionnees) + 1,
                        titre=piece_nom,
                        description=f"[√Ä compl√©ter - {piece_nom}]",
                        categorie="Manquante",
                        source="Suggestion IA"
                    )
                    gestionnaire.ajouter_piece_disponible(piece)
                st.success(f"‚úÖ {len(pieces_manquantes)} templates cr√©√©s")
                st.rerun()
        
        # Liste des manquantes avec actions
        for piece in pieces_manquantes:
            with st.container():
                col_a, col_b = st.columns([4, 1])
                with col_a:
                    st.markdown(f"‚Ä¢ **{piece}**")
                with col_b:
                    if st.button("‚ûï", key=f"add_missing_{piece}", help="Cr√©er cette pi√®ce"):
                        pass  # Action d√©j√† g√©r√©e par le bouton global
    else:
        st.success("‚úÖ Toutes les pi√®ces types semblent pr√©sentes pour ce type d'affaire")

def display_enhanced_analysis_results(analysis: Dict[str, Any]):
    """Affiche les r√©sultats d'analyse avec un design am√©lior√©"""
    
    # M√©triques de l'analyse
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Pi√®ces analys√©es", analysis.get('pieces_analysees', 0))
    
    with col2:
        mode_labels = {
            "consensus": "Consensus",
            "parallel": "Parall√®le",
            "simple": "Simple"
        }
        st.metric("Mode", mode_labels.get(analysis.get('mode', 'simple')))
    
    with col3:
        llms_count = len(analysis.get('llms_used', []))
        st.metric("Mod√®les IA", llms_count)
    
    with col4:
        consensus = analysis.get('consensus_score', 0)
        if consensus:
            st.metric("Score consensus", f"{consensus:.0%}")
    
    # Contenu de l'analyse
    st.markdown("### üìä Rapport d'analyse")
    
    with st.expander("üîç Analyse d√©taill√©e", expanded=True):
        # Formatage am√©lior√© du contenu
        content = analysis.get('analyse', '')
        
        # Diviser en sections si possible
        sections = content.split('\n\n')
        for section in sections:
            if section.strip():
                if any(keyword in section.lower() for keyword in ['pertinence', 'importance', 'risque', 'recommandation']):
                    st.markdown(f"**{section.split(':')[0]}**")
                    if ':' in section:
                        st.write(section.split(':', 1)[1].strip())
                else:
                    st.write(section)
    
    # M√©tadonn√©es
    if analysis.get('timestamp'):
        date_str = analysis['timestamp'].strftime('%d/%m/%Y √† %H:%M')
        st.caption(f"üìÖ Analyse effectu√©e le {date_str}")
    
    # Actions sur l'analyse
    col_export1, col_export2, col_export3 = st.columns(3)
    
    with col_export1:
        if st.button("üìÑ Exporter l'analyse", use_container_width=True):
            # Export du rapport d'analyse
            st.download_button(
                "üíæ T√©l√©charger le rapport",
                analysis.get('analyse', ''),
                f"analyse_pieces_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                "text/plain"
            )
    
    with col_export2:
        if st.button("üîÑ Nouvelle analyse", use_container_width=True):
            st.session_state.piece_analysis = None
            st.rerun()
    
    with col_export3:
        if st.button("üìù Cr√©er le bordereau", type="primary", use_container_width=True):
            st.session_state.current_step = 3
            st.rerun()

def display_enhanced_bordereau_tab(gestionnaire: GestionnairePiecesUnifie):
    """Onglet de g√©n√©ration de bordereaux am√©lior√©"""
    
    if not gestionnaire.pieces_selectionnees:
        st.info("‚ÑπÔ∏è S√©lectionnez d'abord des pi√®ces pour cr√©er un bordereau")
        
        if st.button("üìã Aller √† la s√©lection", type="primary"):
            st.session_state.current_step = 1
            st.rerun()
        return
    
    st.markdown(f"### üìù Cr√©ation du bordereau ({len(gestionnaire.pieces_selectionnees)} pi√®ces)")
    
    # Aper√ßu des pi√®ces s√©lectionn√©es
    with st.expander(f"üìé Aper√ßu des {len(gestionnaire.pieces_selectionnees)} pi√®ces s√©lectionn√©es", expanded=False):
        for i, piece in enumerate(gestionnaire.pieces_selectionnees):
            col1, col2, col3 = st.columns([1, 4, 1])
            
            with col1:
                st.markdown(f"**{piece.numero}.**")
            
            with col2:
                st.write(piece.titre)
                if piece.categorie:
                    st.caption(f"üìÅ {piece.categorie}")
            
            with col3:
                if st.button("üóëÔ∏è", key=f"remove_from_bordereau_{piece.numero}",
                            help="Retirer cette pi√®ce"):
                    gestionnaire.deselectionner_piece(piece.id)
                    st.rerun()
    
    # Formulaire de cr√©ation
    with st.form("bordereau_enhanced_form"):
        # Type de bordereau avec ic√¥nes
        st.markdown("### üìã Type de bordereau")
        
        type_options = {
            "Communication de pi√®ces": "üì§",
            "Inventaire d√©taill√©": "üìä", 
            "Bordereau contradictoire": "‚öñÔ∏è",
            "Liste simple": "üìù"
        }
        
        selected_type = st.radio(
            "S√©lectionnez le type",
            list(type_options.keys()),
            format_func=lambda x: f"{type_options[x]} {x}",
            horizontal=True
        )
        
        # Informations de l'affaire
        st.markdown("### ‚öñÔ∏è Informations de l'affaire")
        
        col1, col2 = st.columns(2)
        
        with col1:
            reference = st.text_input(
                "üìã R√©f√©rence de l'affaire",
                value=st.session_state.get('current_analysis', {}).get('reference', ''),
                placeholder="Ex: 2024/12345"
            )
            
            client = st.text_input(
                "üë§ Client",
                value=st.session_state.get('current_analysis', {}).get('client', ''),
                placeholder="Nom du client"
            )
            
            avocat = st.text_input(
                "‚öñÔ∏è Avocat",
                placeholder="Ma√Ætre..."
            )
        
        with col2:
            adversaire = st.text_input(
                "‚öîÔ∏è Partie adverse",
                value=st.session_state.get('current_analysis', {}).get('adversaire', ''),
                placeholder="Nom de la partie adverse"
            )
            
            juridiction = st.text_input(
                "üèõÔ∏è Juridiction",
                value=st.session_state.get('current_analysis', {}).get('juridiction', ''),
                placeholder="Ex: Tribunal Judiciaire de Paris"
            )
            
            destinataire = st.text_input(
                "üìÆ Destinataire",
                value="TRIBUNAL JUDICIAIRE" if "communication" in selected_type.lower() else "",
                placeholder="Destinataire du bordereau"
            )
        
        # Informations compl√©mentaires
        st.markdown("### üìç Informations compl√©mentaires")
        
        col3, col4, col5 = st.columns(3)
        
        with col3:
            barreau = st.text_input("üèõÔ∏è Barreau", placeholder="Ex: Paris")
        
        with col4:
            ville = st.text_input("üìç Ville", placeholder="Ex: Paris")
        
        with col5:
            include_stats = st.checkbox("üìä Inclure les statistiques", value=True)
            include_summary = st.checkbox("üìù Inclure un r√©sum√©", value=False)
        
        # Options avanc√©es
        with st.expander("‚öôÔ∏è Options avanc√©es"):
            col_a, col_b = st.columns(2)
            
            with col_a:
                format_page = st.selectbox(
                    "üìÑ Format de page",
                    ["A4", "Letter", "Legal"]
                )
                
                numerotation = st.selectbox(
                    "üî¢ Num√©rotation",
                    ["Continue", "Par cat√©gorie", "Alphanum√©rique"]
                )
            
            with col_b:
                langue = st.selectbox(
                    "üåê Langue",
                    ["Fran√ßais", "English", "Espa√±ol"]
                )
                
                signature_electronique = st.checkbox("‚úçÔ∏è Signature √©lectronique", value=False)
        
        # Bouton de g√©n√©ration stylis√©
        col_btn1, col_btn2, col_btn3 = st.columns([1, 2, 1])
        
        with col_btn2:
            submitted = st.form_submit_button(
                "üöÄ G√©n√©rer le bordereau",
                type="primary",
                use_container_width=True
            )
        
        if submitted:
            # Animation de g√©n√©ration
            with st.spinner("‚è≥ G√©n√©ration du bordereau en cours..."):
                progress = st.progress(0)
                
                # Pr√©parer les m√©tadonn√©es
                metadata = {
                    'reference': reference,
                    'client': client,
                    'adversaire': adversaire,
                    'juridiction': juridiction,
                    'avocat': avocat,
                    'destinataire': destinataire,
                    'barreau': barreau,
                    'ville': ville,
                    'format_page': format_page,
                    'langue': langue,
                    'numerotation': numerotation,
                    'signature_electronique': signature_electronique
                }
                
                progress.progress(0.5)
                
                # Mapper le type
                type_map = {
                    "Communication de pi√®ces": "communication",
                    "Inventaire d√©taill√©": "inventaire",
                    "Bordereau contradictoire": "contradictoire",
                    "Liste simple": "simple"
                }
                
                # G√©n√©rer
                bordereau = gestionnaire.generer_bordereau(
                    gestionnaire.pieces_selectionnees,
                    type_bordereau=type_map.get(selected_type, "simple"),
                    metadata=metadata
                )
                
                progress.progress(1.0)
                time.sleep(0.5)
                
                if 'error' not in bordereau:
                    st.session_state.current_bordereau = bordereau
                    st.success("‚úÖ Bordereau g√©n√©r√© avec succ√®s!")
                    st.balloons()
                else:
                    st.error(f"‚ùå Erreur : {bordereau['error']}")
    
    # Afficher le bordereau g√©n√©r√©
    if st.session_state.get('current_bordereau'):
        display_enhanced_generated_bordereau(gestionnaire, st.session_state.current_bordereau)

def display_enhanced_generated_bordereau(
    gestionnaire: GestionnairePiecesUnifie,
    bordereau: Dict[str, Any]
):
    """Affiche le bordereau g√©n√©r√© avec un design am√©lior√©"""
    
    st.markdown("---")
    st.markdown("### üìÑ Bordereau g√©n√©r√©")
    
    # Statistiques visuelles
    if bordereau.get('stats'):
        stats = bordereau['stats']
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "üìé Total pi√®ces",
                stats['total'],
                delta=f"{stats['total']} pi√®ce(s)"
            )
        
        with col2:
            st.metric(
                "‚úÖ Communicables",
                stats['communicables'],
                delta=f"{stats['communicables']/stats['total']:.0%}" if stats['total'] > 0 else "0%"
            )
        
        with col3:
            st.metric(
                "üîí Confidentielles",
                stats['confidentielles'],
                delta=f"{stats['confidentielles']/stats['total']:.0%}" if stats['total'] > 0 else "0%"
            )
        
        with col4:
            st.metric(
                "üìÖ Avec date",
                stats['avec_date'],
                delta=f"{stats['avec_date']/stats['total']:.0%}" if stats['total'] > 0 else "0%"
            )
        
        # Graphique des cat√©gories
        if stats['par_categorie']:
            st.markdown("#### üìä R√©partition par cat√©gorie")
            
            df_cat = pd.DataFrame(
                list(stats['par_categorie'].items()),
                columns=['Cat√©gorie', 'Nombre']
            )
            
            st.bar_chart(df_cat.set_index('Cat√©gorie'))
    
    # Aper√ßu du bordereau avec style
    st.markdown("#### üìù Aper√ßu du document")
    
    with st.container():
        st.markdown("""
        <div style="
            background: white;
            border: 2px solid #dee2e6;
            border-radius: 8px;
            padding: 2rem;
            font-family: 'Courier New', monospace;
            max-height: 600px;
            overflow-y: auto;
        ">
        """, unsafe_allow_html=True)
        
        st.text(bordereau['contenu'])
        
        st.markdown("</div>", unsafe_allow_html=True)
    
    # Options d'export am√©lior√©es
    st.markdown("### üì§ Export et partage")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        # Export Word
        if st.button("üìÑ Word", use_container_width=True, type="primary"):
            with st.spinner("G√©n√©ration du fichier Word..."):
                file_content = gestionnaire.exporter_bordereau(bordereau, "word")
                if file_content:
                    date_str = datetime.now().strftime('%Y%m%d_%H%M%S')
                    st.download_button(
                        "üíæ T√©l√©charger Word",
                        file_content,
                        f"bordereau_{bordereau['type']}_{date_str}.docx",
                        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                        use_container_width=True
                    )
    
    with col2:
        # Export PDF
        if st.button("üìï PDF", use_container_width=True):
            with st.spinner("G√©n√©ration du PDF..."):
                file_content = gestionnaire.exporter_bordereau(bordereau, "pdf")
                if file_content:
                    date_str = datetime.now().strftime('%Y%m%d_%H%M%S')
                    st.download_button(
                        "üíæ T√©l√©charger PDF",
                        file_content,
                        f"bordereau_{bordereau['type']}_{date_str}.pdf",
                        "application/pdf",
                        use_container_width=True
                    )
    
    with col3:
        # Export Excel
        if st.button("üìä Excel", use_container_width=True):
            with st.spinner("G√©n√©ration du fichier Excel..."):
                file_content = gestionnaire.exporter_bordereau(bordereau, "excel")
                if file_content:
                    date_str = datetime.now().strftime('%Y%m%d_%H%M%S')
                    st.download_button(
                        "üíæ T√©l√©charger Excel",
                        file_content,
                        f"bordereau_{bordereau['type']}_{date_str}.xlsx",
                        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        use_container_width=True
                    )
    
    with col4:
        # Actions suppl√©mentaires
        if st.button("üîÑ Nouveau", use_container_width=True):
            st.session_state.current_bordereau = None
            st.session_state.current_step = 1
            st.rerun()
    
    # Options de partage
    with st.expander("üîó Options de partage"):
        col_share1, col_share2 = st.columns(2)
        
        with col_share1:
            email = st.text_input("üìß Email destinataire", placeholder="exemple@email.com")
            
        with col_share2:
            if st.button("üì§ Envoyer par email", use_container_width=True):
                if email:
                    st.info(f"üìß Envoi √† {email} (fonctionnalit√© √† impl√©menter)")
                else:
                    st.warning("‚ö†Ô∏è Veuillez saisir une adresse email")
        
        # Lien de partage
        st.text_input(
            "üîó Lien de partage",
            value=f"https://nexora-law.app/bordereau/{uuid.uuid4().hex[:8]}",
            disabled=True,
            help="Lien de partage s√©curis√© (fonctionnalit√© √† venir)"
        )

def display_enhanced_statistics_tab(gestionnaire: GestionnairePiecesUnifie):
    """Onglet des statistiques am√©lior√©"""
    
    st.markdown("### üìä Tableau de bord des pi√®ces")
    
    if not gestionnaire.pieces_selectionnees:
        st.info("‚ÑπÔ∏è Aucune pi√®ce s√©lectionn√©e pour les statistiques")
        return
    
    # Calculer les stats
    stats = gestionnaire._calculer_stats_pieces(gestionnaire.pieces_selectionnees)
    
    # Vue d'ensemble avec design am√©lior√©
    st.markdown("#### üéØ Vue d'ensemble")
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric(
            "üìé Total",
            stats['total'],
            delta="100%"
        )
    
    with col2:
        comm_pct = (stats['communicables']/stats['total']*100) if stats['total'] > 0 else 0
        st.metric(
            "‚úÖ Communicables",
            stats['communicables'],
            delta=f"{comm_pct:.0f}%"
        )
    
    with col3:
        conf_pct = (stats['confidentielles']/stats['total']*100) if stats['total'] > 0 else 0
        st.metric(
            "üîí Confidentielles",
            stats['confidentielles'],
            delta=f"{conf_pct:.0f}%",
            delta_color="inverse"
        )
    
    with col4:
        date_pct = (stats['avec_date']/stats['total']*100) if stats['total'] > 0 else 0
        st.metric(
            "üìÖ Dat√©es",
            stats['avec_date'],
            delta=f"{date_pct:.0f}%"
        )
    
    with col5:
        st.metric(
            "‚≠ê Pertinence",
            f"{stats['pertinence_moyenne']:.0%}",
            delta="+5%" if stats['pertinence_moyenne'] > 0.7 else "-5%"
        )
    
    # Graphiques interactifs
    st.markdown("---")
    
    col_chart1, col_chart2 = st.columns(2)
    
    with col_chart1:
        st.markdown("#### üìä R√©partition par cat√©gorie")
        
        if stats['par_categorie']:
            # Cr√©er un DataFrame pour le graphique
            df_cat = pd.DataFrame(
                list(stats['par_categorie'].items()),
                columns=['Cat√©gorie', 'Nombre']
            )
            
            # Ajouter des couleurs
            colors = ['#007bff', '#28a745', '#ffc107', '#dc3545', '#6610f2', '#17a2b8']
            df_cat['Couleur'] = [colors[i % len(colors)] for i in range(len(df_cat))]
            
            st.bar_chart(df_cat.set_index('Cat√©gorie')['Nombre'])
    
    with col_chart2:
        st.markdown("#### üìà Analyse temporelle")
        
        # Analyser les dates
        dates_data = []
        for piece in gestionnaire.pieces_selectionnees:
            if piece.date:
                dates_data.append({
                    'Date': piece.date,
                    'Mois': piece.date.strftime('%Y-%m'),
                    'Nombre': 1
                })
        
        if dates_data:
            df_dates = pd.DataFrame(dates_data)
            df_monthly = df_dates.groupby('Mois')['Nombre'].sum().reset_index()
            st.line_chart(df_monthly.set_index('Mois'))
        else:
            st.info("Pas assez de donn√©es temporelles")
    
    # Tableau d√©taill√© interactif
    st.markdown("---")
    st.markdown("### üìã D√©tail des pi√®ces")
    
    # Options de filtrage
    col_filter1, col_filter2, col_filter3 = st.columns(3)
    
    with col_filter1:
        filter_category = st.multiselect(
            "Filtrer par cat√©gorie",
            ["Toutes"] + list(stats['par_categorie'].keys()),
            default=["Toutes"]
        )
    
    with col_filter2:
        filter_comm = st.selectbox(
            "Communicable",
            ["Toutes", "Oui", "Non"]
        )
    
    with col_filter3:
        filter_conf = st.selectbox(
            "Confidentiel",
            ["Toutes", "Oui", "Non"]
        )
    
    # Pr√©parer les donn√©es filtr√©es
    pieces_filtered = gestionnaire.pieces_selectionnees
    
    if "Toutes" not in filter_category:
        pieces_filtered = [p for p in pieces_filtered if p.categorie in filter_category]
    
    if filter_comm != "Toutes":
        comm_value = filter_comm == "Oui"
        pieces_filtered = [p for p in pieces_filtered if p.communicable == comm_value]
    
    if filter_conf != "Toutes":
        conf_value = filter_conf == "Oui"
        pieces_filtered = [p for p in pieces_filtered if p.confidentiel == conf_value]
    
    # Cr√©er le DataFrame
    pieces_data = []
    for piece in pieces_filtered:
        pieces_data.append({
            'N¬∞': piece.numero,
            'Titre': truncate_text(piece.titre, 50),
            'Cat√©gorie': piece.categorie,
            'Date': piece.date.strftime('%d/%m/%Y') if piece.date else '‚Äî',
            'Source': piece.source,
            'Pertinence': f"{piece.pertinence:.0%}",
            'Comm.': '‚úÖ' if piece.communicable else '‚ùå',
            'Conf.': 'üîí' if piece.confidentiel else '‚Äî'
        })
    
    if pieces_data:
        df_pieces = pd.DataFrame(pieces_data)
        
        # Afficher avec style
        st.dataframe(
            df_pieces,
            use_container_width=True,
            hide_index=True,
            column_config={
                "Pertinence": st.column_config.ProgressColumn(
                    "Pertinence",
                    help="Score de pertinence",
                    format="%d%%",
                    min_value=0,
                    max_value=100,
                ),
            }
        )
        
        # Options d'export
        st.markdown("### üíæ Export des donn√©es")
        
        col_exp1, col_exp2, col_exp3 = st.columns(3)
        
        with col_exp1:
            csv = df_pieces.to_csv(index=False)
            st.download_button(
                "üì• T√©l√©charger CSV",
                csv,
                f"pieces_stats_{datetime.now().strftime('%Y%m%d')}.csv",
                "text/csv",
                use_container_width=True
            )
        
        with col_exp2:
            if st.button("üìä Rapport d√©taill√©", use_container_width=True):
                st.info("G√©n√©ration du rapport d√©taill√© (√† impl√©menter)")
        
        with col_exp3:
            if st.button("üìß Envoyer par email", use_container_width=True):
                st.info("Envoi par email (√† impl√©menter)")
    else:
        st.info("Aucune pi√®ce ne correspond aux filtres s√©lectionn√©s")

def display_configuration_tab(gestionnaire: GestionnairePiecesUnifie):
    """Onglet de configuration du module"""
    
    st.markdown("### ‚öôÔ∏è Configuration du module")
    
    # Param√®tres g√©n√©raux
    with st.expander("üéØ Param√®tres g√©n√©raux", expanded=True):
        col1, col2 = st.columns(2)
        
        with col1:
            auto_categorize = st.checkbox(
                "üè∑Ô∏è Cat√©gorisation automatique",
                value=True,
                help="Cat√©gorise automatiquement les pi√®ces selon leur contenu"
            )
            
            auto_number = st.checkbox(
                "üî¢ Num√©rotation automatique",
                value=True,
                help="Num√©rote automatiquement les pi√®ces ajout√©es"
            )
            
            show_previews = st.checkbox(
                "üëÅÔ∏è Afficher les aper√ßus",
                value=True,
                help="Affiche un aper√ßu du contenu des pi√®ces"
            )
        
        with col2:
            default_comm = st.checkbox(
                "‚úÖ Communicable par d√©faut",
                value=True,
                help="Les nouvelles pi√®ces sont communicables par d√©faut"
            )
            
            require_date = st.checkbox(
                "üìÖ Date obligatoire",
                value=False,
                help="Exige une date pour chaque pi√®ce"
            )
            
            enable_ocr = st.checkbox(
                "üì∑ OCR automatique",
                value=False,
                help="Active la reconnaissance de texte sur les images"
            )
    
    # Cat√©gories personnalis√©es
    with st.expander("üìÅ Cat√©gories personnalis√©es"):
        st.info("G√©rez vos cat√©gories de pi√®ces")
        
        # Afficher les cat√©gories existantes
        for cat, keywords in gestionnaire.categories_pieces.items():
            col1, col2, col3 = st.columns([2, 3, 1])
            
            with col1:
                st.text_input(
                    "Cat√©gorie",
                    value=cat,
                    key=f"cat_name_{cat}",
                    disabled=True
                )
            
            with col2:
                st.text_input(
                    "Mots-cl√©s",
                    value=", ".join(keywords),
                    key=f"cat_keywords_{cat}",
                    disabled=True
                )
            
            with col3:
                if st.button("üóëÔ∏è", key=f"del_cat_{cat}"):
                    pass  # Impl√©menter la suppression
        
        # Ajouter une nouvelle cat√©gorie
        st.markdown("**Ajouter une cat√©gorie**")
        
        col1, col2, col3 = st.columns([2, 3, 1])
        
        with col1:
            new_cat_name = st.text_input(
                "Nom",
                key="new_cat_name",
                placeholder="Ex: Contrats"
            )
        
        with col2:
            new_cat_keywords = st.text_input(
                "Mots-cl√©s (s√©par√©s par des virgules)",
                key="new_cat_keywords",
                placeholder="Ex: contrat, accord, convention"
            )
        
        with col3:
            if st.button("‚ûï Ajouter", use_container_width=True):
                if new_cat_name and new_cat_keywords:
                    keywords = [k.strip() for k in new_cat_keywords.split(',')]
                    gestionnaire.categories_pieces[new_cat_name] = keywords
                    st.success(f"‚úÖ Cat√©gorie '{new_cat_name}' ajout√©e")
                    st.rerun()
    
    # Configuration IA
    with st.expander("ü§ñ Configuration IA"):
        st.info("Param√®tres d'analyse intelligente")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.number_input(
                "Nombre max de pi√®ces √† analyser",
                min_value=5,
                max_value=50,
                value=20,
                step=5,
                help="Limite le nombre de pi√®ces analys√©es simultan√©ment"
            )
            
            st.selectbox(
                "Mod√®le IA par d√©faut",
                ["gpt-4", "claude-3", "mixtral-8x7b"],
                help="Mod√®le utilis√© pour l'analyse simple"
            )
        
        with col2:
            st.slider(
                "Seuil de pertinence",
                min_value=0.0,
                max_value=1.0,
                value=0.7,
                step=0.1,
                help="Seuil minimum pour consid√©rer une pi√®ce pertinente"
            )
            
            st.selectbox(
                "Mode de fusion par d√©faut",
                ["consensus", "parallel", "simple"],
                help="Mode utilis√© pour la fusion multi-IA"
            )
    
    # Templates de bordereaux
    with st.expander("üìù Templates de bordereaux"):
        st.info("Personnalisez vos mod√®les de bordereaux")
        
        template_type = st.selectbox(
            "Type de bordereau",
            ["Communication", "Inventaire", "Contradictoire"]
        )
        
        st.text_area(
            "En-t√™te personnalis√©",
            placeholder="Entrez votre en-t√™te personnalis√©...",
            height=100
        )
        
        st.text_area(
            "Pied de page personnalis√©",
            placeholder="Entrez votre pied de page personnalis√©...",
            height=100
        )
        
        if st.button("üíæ Sauvegarder le template", type="primary"):
            st.success("‚úÖ Template sauvegard√©")
    
    # Sauvegarde de la configuration
    st.markdown("---")
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        if st.button("üíæ Sauvegarder toute la configuration", 
                     type="primary", use_container_width=True):
            st.success("‚úÖ Configuration sauvegard√©e avec succ√®s!")
            time.sleep(1)
            st.rerun()

# ==================================================
# FONCTIONS DE TRAITEMENT DES REQU√äTES (CONSERV√âES)
# ==================================================

def process_pieces_request(query: str, analysis: dict):
    """Traite une requ√™te de gestion de pi√®ces"""
    
    init_pieces_manager()
    gestionnaire = st.session_state.gestionnaire_pieces
    
    # Analyser la requ√™te
    query_lower = query.lower()
    
    if any(word in query_lower for word in ['s√©lectionner', 'choisir', 'ajouter']):
        # Rechercher et s√©lectionner des pi√®ces
        pieces = gestionnaire.rechercher_pieces(query)
        
        if pieces:
            st.success(f"‚úÖ {len(pieces)} pi√®ce(s) trouv√©e(s)")
            for piece in pieces[:10]:
                gestionnaire.ajouter_piece_disponible(piece)
                gestionnaire.selectionner_piece(piece.id)
        else:
            st.warning("‚ö†Ô∏è Aucune pi√®ce trouv√©e")
    
    elif any(word in query_lower for word in ['bordereau', 'liste', 'inventaire']):
        # G√©n√©rer un bordereau
        if gestionnaire.pieces_selectionnees:
            process_liste_pieces_request(query, analysis)
        else:
            st.warning("‚ö†Ô∏è S√©lectionnez d'abord des pi√®ces")
    
    elif 'analyser' in query_lower:
        # Analyser les pi√®ces
        if gestionnaire.pieces_selectionnees:
            analyse = gestionnaire.analyser_pertinence_pieces_multi_llm(
                gestionnaire.pieces_selectionnees,
                query,
                list(gestionnaire.llm_manager.clients.keys())[:2],
                "consensus"
            )
            if 'error' not in analyse:
                st.session_state.piece_analysis = analyse
                display_enhanced_analysis_results(analyse)
        else:
            st.warning("‚ö†Ô∏è Aucune pi√®ce √† analyser")
    
    else:
        # Afficher l'interface par d√©faut
        run()

def process_liste_pieces_request(query: str, analysis: dict):
    """Traite une requ√™te de cr√©ation de liste/bordereau"""
    
    init_pieces_manager()
    gestionnaire = st.session_state.gestionnaire_pieces
    
    # Si pas de pi√®ces s√©lectionn√©es, utiliser toutes les pi√®ces disponibles
    if not gestionnaire.pieces_selectionnees:
        # Chercher des pi√®ces dans les documents
        if st.session_state.get('imported_documents'):
            for doc_id, doc in st.session_state.imported_documents.items():
                piece = gestionnaire._document_to_piece(
                    doc,
                    len(gestionnaire.pieces_selectionnees) + 1
                )
                gestionnaire.ajouter_piece_disponible(piece)
                gestionnaire.selectionner_piece(piece.id)
    
    if not gestionnaire.pieces_selectionnees:
        st.warning("‚ö†Ô∏è Aucune pi√®ce disponible pour cr√©er un bordereau")
        return
    
    # D√©terminer le type de bordereau
    query_lower = query.lower()
    
    if 'communication' in query_lower:
        type_bordereau = "communication"
    elif 'inventaire' in query_lower:
        type_bordereau = "inventaire"
    elif 'contradictoire' in query_lower:
        type_bordereau = "contradictoire"
    else:
        type_bordereau = "communication"  # Par d√©faut
    
    # Pr√©parer les m√©tadonn√©es
    metadata = {
        'reference': analysis.get('reference', ''),
        'client': analysis.get('client', ''),
        'adversaire': analysis.get('adversaire', ''),
        'juridiction': analysis.get('juridiction', ''),
        'avocat': analysis.get('avocat', '[Nom de l\'avocat]'),
        'destinataire': 'TRIBUNAL JUDICIAIRE',
        'barreau': analysis.get('barreau', '[Ville]'),
        'ville': analysis.get('ville', '[Ville]')
    }
    
    # G√©n√©rer le bordereau
    with st.spinner("üöÄ G√©n√©ration du bordereau..."):
        bordereau = gestionnaire.generer_bordereau(
            gestionnaire.pieces_selectionnees,
            type_bordereau=type_bordereau,
            metadata=metadata
        )
        
        if 'error' not in bordereau:
            st.session_state.current_bordereau = bordereau
            
            # Afficher le r√©sultat
            st.success(f"‚úÖ Bordereau de {bordereau['stats']['total']} pi√®ces g√©n√©r√©")
            
            # Aper√ßu
            with st.expander("üìÑ Aper√ßu du bordereau", expanded=True):
                st.text(bordereau['contenu'])
            
            # Options d'export
            col1, col2, col3 = st.columns(3)
            
            with col1:
                # Export Word
                file_content = gestionnaire.exporter_bordereau(bordereau, "word")
                if file_content:
                    date_export = datetime.now().strftime('%Y%m%d')
                    st.download_button(
                        "üìÑ T√©l√©charger Word",
                        file_content,
                        f"bordereau_{type_bordereau}_{date_export}.docx",
                        "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                    )
            
            with col2:
                # Export PDF
                file_content = gestionnaire.exporter_bordereau(bordereau, "pdf")
                if file_content:
                    date_export = datetime.now().strftime('%Y%m%d')
                    st.download_button(
                        "üìï T√©l√©charger PDF",
                        file_content,
                        f"bordereau_{type_bordereau}_{date_export}.pdf",
                        "application/pdf"
                    )
            
            with col3:
                # Export Excel
                file_content = gestionnaire.exporter_bordereau(bordereau, "excel")
                if file_content:
                    date_export = datetime.now().strftime('%Y%m%d')
                    st.download_button(
                        "üìä T√©l√©charger Excel",
                        file_content,
                        f"bordereau_{type_bordereau}_{date_export}.xlsx",
                        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
        else:
            st.error(f"‚ùå Erreur : {bordereau['error']}")

# ==================================================
# POINT D'ENTR√âE PRINCIPAL
# ==================================================

if __name__ == "__main__":
    run()