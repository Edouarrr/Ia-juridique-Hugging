"""
Module unifi√© de gestion des pi√®ces juridiques et de proc√©dure
Fusion des fonctionnalit√©s de s√©lection et de gestion compl√®te
"""

import streamlit as st
from datetime import datetime
import json
from typing import Dict, List, Optional, Any, Tuple, Set
import uuid
import hashlib
import mimetypes
from pathlib import Path
from collections import Counter, defaultdict
import pandas as pd
import io
import re
from dataclasses import dataclass, field
from enum import Enum

# ========================= MOD√àLES DE DONN√âES =========================

class DocumentType(Enum):
    PIECE_PROCEDURE = "piece_procedure"
    PIECE_JURIDIQUE = "piece_juridique"
    AUTRE = "autre"

class StatutPiece(Enum):
    ACTIF = "actif"
    ARCHIVE = "archiv√©"
    EN_REVISION = "en_revision"
    CONFIDENTIEL = "confidentiel"
    SUPPRIME = "supprim√©"
    SELECTIONNE = "s√©lectionn√©"

@dataclass
class PieceJuridique:
    """Mod√®le unifi√© pour une pi√®ce juridique/proc√©dure"""
    # Identifiants
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    document_id: Optional[str] = None  # ID du document source
    
    # Informations principales
    nom: str = ""
    titre: str = ""  # Alias pour compatibilit√©
    type_piece: str = "Document"
    categorie: str = "Autre"
    numero_ordre: int = 1
    
    # Description et contenu
    description: Optional[str] = None
    contenu_extrait: Optional[str] = None
    
    # Dates
    date_ajout: datetime = field(default_factory=datetime.now)
    date_modification: Optional[datetime] = None
    date_document: Optional[datetime] = None
    date_selection: Optional[datetime] = None
    
    # Fichier
    chemin_fichier: Optional[str] = None
    taille: Optional[int] = None
    hash_fichier: Optional[str] = None
    mime_type: Optional[str] = None
    
    # M√©tadonn√©es
    source: str = ""
    metadata: Dict[str, Any] = field(default_factory=dict)
    tags: List[str] = field(default_factory=list)
    
    # √âtat et importance
    statut: str = "actif"
    importance: int = 5  # 1-10
    pertinence: float = 0.5  # 0-1
    pertinence_manuelle: Optional[int] = None  # 1-10
    
    # Gestion et suivi
    notes: str = ""
    modifie_par: Optional[str] = None
    version: int = 1
    versions_precedentes: List[Dict] = field(default_factory=list)
    
    # Relations
    pieces_liees: List[str] = field(default_factory=list)
    dossier_id: Optional[str] = None
    
    @property
    def numero(self):
        """Alias pour compatibilit√©"""
        return self.numero_ordre
    
    @property
    def date(self):
        """Date principale du document"""
        return self.date_document or self.date_ajout

# ========================= GESTIONNAIRE PRINCIPAL =========================

class GestionnairePiecesUnifie:
    """Gestionnaire unifi√© pour toutes les pi√®ces"""
    
    # Cat√©gories avec patterns de d√©tection et style
    CATEGORIES_CONFIG = {
        'Proc√©dure': {
            'patterns': ['plainte', 'proc√®s-verbal', 'audition', 'perquisition', 'garde √† vue', 
                        'r√©quisitoire', 'assignation', 'citation', 'conclusions', 'requ√™te', 'm√©moire'],
            'types': ['Assignation', 'Citation directe', 'Conclusions', 'Requ√™te', 'M√©moire', 
                     'Plainte', 'Proc√®s-verbal', 'Audition'],
            'icon': 'üìã',
            'color': '#3498db'
        },
        'D√©cision': {
            'patterns': ['jugement', 'arr√™t', 'ordonnance', 'd√©cision', 'verdict'],
            'types': ['Jugement', 'Arr√™t', 'Ordonnance', 'D√©cision'],
            'icon': '‚öñÔ∏è',
            'color': '#e74c3c'
        },
        'Expertise': {
            'patterns': ['expertise', 'expert', 'rapport technique', 'analyse', '√©valuation technique'],
            'types': ['Expertise', 'Rapport d\'expert', 'Analyse technique'],
            'icon': 'üî¨',
            'color': '#2ecc71'
        },
        'Contrat': {
            'patterns': ['contrat', 'convention', 'accord', 'avenant', 'protocole', 'engagement'],
            'types': ['Contrat', 'Avenant', 'Convention', 'Protocole', 'Accord'],
            'icon': 'üìÑ',
            'color': '#f39c12'
        },
        'Correspondance': {
            'patterns': ['courrier', 'email', 'lettre', 'mail', 'courriel', 'message', 'notification'],
            'types': ['Courrier', 'Email', 'Notification', 'Mise en demeure'],
            'icon': 'üìß',
            'color': '#9b59b6'
        },
        'Preuve': {
            'patterns': ['attestation', 'proc√®s-verbal', 'constat', 't√©moignage', 'preuve'],
            'types': ['Pi√®ce justificative', 'Attestation', 'Proc√®s-verbal', 'Constat', 'T√©moignage'],
            'icon': 'üîç',
            'color': '#e67e22'
        },
        'Financier': {
            'patterns': ['bilan', 'compte', 'comptable', 'facture', 'devis', 'relev√©', 'virement'],
            'types': ['Facture', 'Devis', 'Relev√© bancaire', 'Bilan', 'Grand livre'],
            'icon': 'üí∞',
            'color': '#1abc9c'
        },
        'Identit√©': {
            'patterns': ['carte identit√©', 'passeport', 'kbis', 'statuts', 'extrait', 'immatriculation'],
            'types': ['Carte d\'identit√©', 'Passeport', 'KBIS', 'Statuts', 'RIB'],
            'icon': 'üÜî',
            'color': '#34495e'
        },
        'M√©dia': {
            'patterns': ['photo', 'vid√©o', 'audio', 'enregistrement', 'image'],
            'types': ['Photo', 'Vid√©o', 'Audio', 'Plan', 'Sch√©ma'],
            'icon': 'üì∏',
            'color': '#95a5a6'
        },
        'Autre': {
            'patterns': [],
            'types': ['Document', 'Note', 'Rapport', 'Autre'],
            'icon': 'üìé',
            'color': '#7f8c8d'
        }
    }
    
    # Statuts avec configuration visuelle
    STATUTS_CONFIG = {
        'actif': {'label': 'Actif', 'icon': '‚úÖ', 'color': '#2ecc71'},
        's√©lectionn√©': {'label': 'S√©lectionn√©', 'icon': '‚òëÔ∏è', 'color': '#3498db'},
        'archiv√©': {'label': 'Archiv√©', 'icon': 'üì¶', 'color': '#95a5a6'},
        'en_revision': {'label': 'En r√©vision', 'icon': 'üîÑ', 'color': '#f39c12'},
        'confidentiel': {'label': 'Confidentiel', 'icon': 'üîí', 'color': '#e74c3c'},
        'supprim√©': {'label': 'Supprim√©', 'icon': 'üóëÔ∏è', 'color': '#c0392b'}
    }
    
    def __init__(self):
        """Initialise le gestionnaire unifi√©"""
        # Collections principales
        if 'pieces' not in st.session_state:
            st.session_state.pieces = {}
        if 'pieces_selectionnees' not in st.session_state:
            st.session_state.pieces_selectionnees = {}
        if 'pieces_par_dossier' not in st.session_state:
            st.session_state.pieces_par_dossier = defaultdict(list)
        
        # M√©tadonn√©es globales
        if 'pieces_metadata' not in st.session_state:
            st.session_state.pieces_metadata = {
                'total_size': 0,
                'last_modified': datetime.now(),
                'tags': set(),
                'categories_count': defaultdict(int),
                'types_count': defaultdict(int)
            }
        
        # Historique et favoris
        if 'pieces_history' not in st.session_state:
            st.session_state.pieces_history = []
        if 'pieces_favoris' not in st.session_state:
            st.session_state.pieces_favoris = set()
        
        # √âtat UI
        if 'selected_pieces' not in st.session_state:
            st.session_state.selected_pieces = []
    
    # ==================== GESTION DES PI√àCES ====================
    
    def ajouter_piece(self, piece: PieceJuridique, dossier_id: Optional[str] = None, 
                     auto_select: bool = False) -> str:
        """Ajoute une pi√®ce au syst√®me"""
        # Validation
        if not piece.nom and not piece.titre:
            raise ValueError("Le nom de la pi√®ce est obligatoire")
        
        # Normaliser le nom
        if not piece.nom:
            piece.nom = piece.titre
        if not piece.titre:
            piece.titre = piece.nom
        
        # D√©terminer la cat√©gorie si non d√©finie
        if piece.categorie == "Autre" or not piece.categorie:
            piece.categorie = self._determiner_categorie(piece)
        
        # V√©rifier l'unicit√© du hash si fichier
        if piece.hash_fichier:
            for existing_piece in st.session_state.pieces.values():
                if existing_piece.hash_fichier == piece.hash_fichier:
                    if not st.checkbox(f"Le fichier '{piece.nom}' existe d√©j√†. Continuer ?"):
                        return existing_piece.id
        
        # Calculer la pertinence initiale
        if hasattr(st.session_state, 'current_analysis'):
            piece.pertinence = self._calculer_pertinence(piece, st.session_state.current_analysis)
        
        # Ajouter la pi√®ce
        st.session_state.pieces[piece.id] = piece
        
        # Associer au dossier
        if dossier_id:
            piece.dossier_id = dossier_id
            st.session_state.pieces_par_dossier[dossier_id].append(piece.id)
        
        # S√©lectionner automatiquement si demand√©
        if auto_select:
            self.selectionner_piece(piece.id)
        
        # Mettre √† jour les m√©tadonn√©es
        self._update_global_metadata(piece, 'add')
        
        # Historique
        self._add_to_history('add', piece.id, {
            'nom': piece.nom,
            'type': piece.type_piece,
            'categorie': piece.categorie
        })
        
        return piece.id
    
    def selectionner_piece(self, piece_id: str, notes: str = ""):
        """S√©lectionne une pi√®ce pour la communication"""
        if piece_id not in st.session_state.pieces:
            return
        
        piece = st.session_state.pieces[piece_id]
        
        # Marquer comme s√©lectionn√©e
        piece.statut = 's√©lectionn√©'
        piece.date_selection = datetime.now()
        if notes:
            piece.notes = notes
        
        # Ajouter aux pi√®ces s√©lectionn√©es
        st.session_state.pieces_selectionnees[piece_id] = piece
        
        # Renumeroter
        self._renumeroter_pieces_selectionnees()
        
        # Historique
        self._add_to_history('select', piece_id, {'nom': piece.nom})
    
    def deselectionner_piece(self, piece_id: str):
        """Retire une pi√®ce de la s√©lection"""
        if piece_id in st.session_state.pieces_selectionnees:
            del st.session_state.pieces_selectionnees[piece_id]
            
            # Remettre en statut actif
            if piece_id in st.session_state.pieces:
                st.session_state.pieces[piece_id].statut = 'actif'
            
            self._renumeroter_pieces_selectionnees()
            self._add_to_history('deselect', piece_id, {})
    
    def modifier_piece(self, piece_id: str, create_version: bool = True, **kwargs):
        """Modifie une pi√®ce avec gestion des versions"""
        if piece_id not in st.session_state.pieces:
            raise ValueError(f"Pi√®ce {piece_id} introuvable")
        
        piece = st.session_state.pieces[piece_id]
        
        # Cr√©er une version si demand√©
        if create_version and any(k in ['nom', 'description', 'type_piece'] for k in kwargs):
            version_data = {
                'version': piece.version,
                'date': datetime.now().isoformat(),
                'nom': piece.nom,
                'description': piece.description,
                'type_piece': piece.type_piece,
                'modifie_par': kwargs.get('modifie_par', 'Utilisateur')
            }
            piece.versions_precedentes.append(version_data)
            piece.version += 1
        
        # Appliquer les modifications
        for key, value in kwargs.items():
            if hasattr(piece, key):
                setattr(piece, key, value)
        
        piece.date_modification = datetime.now()
        
        # Propager aux pi√®ces s√©lectionn√©es
        if piece_id in st.session_state.pieces_selectionnees:
            st.session_state.pieces_selectionnees[piece_id] = piece
        
        # Mettre √† jour les m√©tadonn√©es
        st.session_state.pieces_metadata['last_modified'] = datetime.now()
        
        # Historique
        self._add_to_history('update', piece_id, kwargs)
    
    def supprimer_piece(self, piece_id: str, permanent: bool = False):
        """Supprime ou archive une pi√®ce"""
        if piece_id not in st.session_state.pieces:
            return
        
        piece = st.session_state.pieces[piece_id]
        
        if permanent:
            # Suppression d√©finitive
            # Retirer de toutes les collections
            st.session_state.pieces_selectionnees.pop(piece_id, None)
            st.session_state.pieces_favoris.discard(piece_id)
            
            for dossier_pieces in st.session_state.pieces_par_dossier.values():
                if piece_id in dossier_pieces:
                    dossier_pieces.remove(piece_id)
            
            # Supprimer
            del st.session_state.pieces[piece_id]
            
            self._update_global_metadata(piece, 'remove')
            self._add_to_history('delete_permanent', piece_id, {'nom': piece.nom})
        else:
            # Archivage
            piece.statut = 'archiv√©'
            piece.date_modification = datetime.now()
            self._add_to_history('archive', piece_id, {'nom': piece.nom})
    
    # ==================== RECHERCHE ET FILTRAGE ====================
    
    def rechercher_pieces(self, query: str = "", filters: Dict[str, Any] = None, 
                         limit: Optional[int] = None) -> List[PieceJuridique]:
        """Recherche avanc√©e avec scoring et filtres"""
        results = []
        query_lower = query.lower() if query else ""
        
        for piece in st.session_state.pieces.values():
            # Filtrer par statut
            if not filters or not filters.get('include_archived'):
                if piece.statut in ['supprim√©', 'archiv√©']:
                    continue
            
            score = 0
            
            # Scoring textuel
            if query:
                # Nom/titre (poids √©lev√©)
                if query_lower in piece.nom.lower():
                    score += 5
                    if piece.nom.lower().startswith(query_lower):
                        score += 2
                
                # Description
                if piece.description and query_lower in piece.description.lower():
                    score += 3
                
                # Type et cat√©gorie
                if query_lower in piece.type_piece.lower():
                    score += 2
                if query_lower in piece.categorie.lower():
                    score += 2
                
                # Tags
                for tag in piece.tags:
                    if query_lower in tag.lower():
                        score += 3
                        break
                
                # Contenu extrait
                if piece.contenu_extrait and query_lower in piece.contenu_extrait.lower():
                    score += 1
                
                # Notes
                if piece.notes and query_lower in piece.notes.lower():
                    score += 2
            else:
                score = 1
            
            # Appliquer les filtres
            if filters and not self._piece_matches_filters(piece, filters):
                continue
            
            if score > 0:
                results.append((score, piece))
        
        # Trier par score et pertinence
        results.sort(key=lambda x: (x[0], x[1].pertinence, x[1].date_ajout), reverse=True)
        
        pieces = [piece for _, piece in results]
        
        if limit:
            pieces = pieces[:limit]
        
        return pieces
    
    def _piece_matches_filters(self, piece: PieceJuridique, filters: Dict[str, Any]) -> bool:
        """V√©rifie si une pi√®ce correspond aux filtres"""
        # Cat√©gorie
        if filters.get('categorie') and piece.categorie != filters['categorie']:
            return False
        
        # Type
        if filters.get('type_piece') and piece.type_piece != filters['type_piece']:
            return False
        
        # Statut
        if filters.get('statut') and piece.statut != filters['statut']:
            return False
        
        # Importance
        if filters.get('importance_min') and piece.importance < filters['importance_min']:
            return False
        if filters.get('importance_max') and piece.importance > filters['importance_max']:
            return False
        
        # Pertinence
        if filters.get('pertinence_min') and piece.pertinence < filters['pertinence_min']:
            return False
        
        # Dates
        if filters.get('date_debut') and piece.date_ajout < filters['date_debut']:
            return False
        if filters.get('date_fin') and piece.date_ajout > filters['date_fin']:
            return False
        
        # Dossier
        if filters.get('dossier_id') and piece.dossier_id != filters['dossier_id']:
            return False
        
        # Tags (au moins un doit matcher)
        if filters.get('tags'):
            if not any(tag in piece.tags for tag in filters['tags']):
                return False
        
        # Favoris
        if filters.get('favoris_only') and piece.id not in st.session_state.pieces_favoris:
            return False
        
        # S√©lection
        if filters.get('selected_only') and piece.id not in st.session_state.pieces_selectionnees:
            return False
        
        return True
    
    # ==================== GESTION DE LA S√âLECTION ====================
    
    def get_pieces_selectionnees(self) -> List[PieceJuridique]:
        """Retourne les pi√®ces s√©lectionn√©es tri√©es par num√©ro"""
        pieces = list(st.session_state.pieces_selectionnees.values())
        return sorted(pieces, key=lambda p: p.numero_ordre)
    
    def get_pieces_par_categorie(self, selected_only: bool = False) -> Dict[str, List[PieceJuridique]]:
        """Retourne les pi√®ces group√©es par cat√©gorie"""
        result = defaultdict(list)
        
        if selected_only:
            pieces = st.session_state.pieces_selectionnees.values()
        else:
            pieces = [p for p in st.session_state.pieces.values() if p.statut != 'supprim√©']
        
        for piece in pieces:
            result[piece.categorie].append(piece)
        
        # Trier les pi√®ces dans chaque cat√©gorie
        for cat_pieces in result.values():
            cat_pieces.sort(key=lambda p: p.numero_ordre)
        
        return dict(result)
    
    def generer_bordereau(self, format_type: str = "detaille", 
                         pieces_ids: Optional[List[str]] = None) -> str:
        """G√©n√®re un bordereau de communication"""
        if pieces_ids:
            pieces = [self.get_piece(pid) for pid in pieces_ids if self.get_piece(pid)]
        else:
            pieces = self.get_pieces_selectionnees()
        
        if not pieces:
            return "Aucune pi√®ce s√©lectionn√©e"
        
        lines = [
            "BORDEREAU DE COMMUNICATION DE PI√àCES",
            "=" * 60,
            f"Date : {datetime.now().strftime('%d/%m/%Y √† %H:%M')}",
            f"Nombre de pi√®ces : {len(pieces)}",
            "",
        ]
        
        # Grouper par cat√©gorie
        pieces_par_cat = defaultdict(list)
        for piece in pieces:
            pieces_par_cat[piece.categorie].append(piece)
        
        # Afficher par cat√©gorie
        for categorie in sorted(pieces_par_cat.keys()):
            cat_pieces = sorted(pieces_par_cat[categorie], key=lambda p: p.numero_ordre)
            cat_config = self.CATEGORIES_CONFIG.get(categorie, self.CATEGORIES_CONFIG['Autre'])
            
            lines.extend([
                "",
                f"{cat_config['icon']} {categorie.upper()} ({len(cat_pieces)} pi√®ces)",
                "-" * 50,
            ])
            
            for piece in cat_pieces:
                if format_type == "detaille":
                    lines.extend([
                        f"Pi√®ce n¬∞{piece.numero_ordre} : {piece.nom}",
                        f"   Type : {piece.type_piece}",
                        f"   Source : {piece.source}" if piece.source else "",
                    ])
                    
                    if piece.description:
                        desc = piece.description[:150] + "..." if len(piece.description) > 150 else piece.description
                        lines.append(f"   Description : {desc}")
                    
                    if piece.pertinence >= 0.7:
                        lines.append(f"   Pertinence : Tr√®s √©lev√©e ({piece.pertinence:.0%})")
                    elif piece.pertinence >= 0.4:
                        lines.append(f"   Pertinence : Moyenne ({piece.pertinence:.0%})")
                    
                    if piece.notes:
                        lines.append(f"   Notes : {piece.notes}")
                    
                    if piece.tags:
                        lines.append(f"   Tags : {', '.join(piece.tags)}")
                    
                    if piece.date_document:
                        lines.append(f"   Date du document : {piece.date_document.strftime('%d/%m/%Y')}")
                    
                    lines.append("")
                    
                elif format_type == "simple":
                    lines.append(f"  {piece.numero_ordre}. {piece.nom} ({piece.type_piece})")
                
                elif format_type == "compact":
                    tags_str = f" [{', '.join(piece.tags[:3])}]" if piece.tags else ""
                    lines.append(f"  ‚Ä¢ {piece.nom}{tags_str}")
        
        # R√©sum√©
        lines.extend([
            "",
            "R√âSUM√â",
            "-" * 50,
        ])
        
        for categorie, pieces in pieces_par_cat.items():
            lines.append(f"  ‚Ä¢ {categorie} : {len(pieces)} pi√®ces")
        
        return "\n".join(lines)
    
    # ==================== IMPORT/EXPORT ====================
    
    def exporter_pieces(self, piece_ids: Optional[List[str]] = None, 
                       format_export: str = 'json') -> Tuple[Any, str, str]:
        """Exporte les pi√®ces dans diff√©rents formats"""
        # S√©lectionner les pi√®ces √† exporter
        if piece_ids:
            pieces = [self.get_piece(pid) for pid in piece_ids if self.get_piece(pid)]
        else:
            pieces = self.get_pieces_selectionnees()
        
        if not pieces:
            pieces = [p for p in st.session_state.pieces.values() if p.statut != 'supprim√©']
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        if format_export == 'json':
            # Export JSON complet
            data = {
                'export_date': datetime.now().isoformat(),
                'total_pieces': len(pieces),
                'pieces': []
            }
            
            for piece in pieces:
                piece_data = {
                    'id': piece.id,
                    'nom': piece.nom,
                    'type_piece': piece.type_piece,
                    'categorie': piece.categorie,
                    'numero_ordre': piece.numero_ordre,
                    'description': piece.description,
                    'source': piece.source,
                    'date_ajout': piece.date_ajout.isoformat(),
                    'date_document': piece.date_document.isoformat() if piece.date_document else None,
                    'tags': piece.tags,
                    'statut': piece.statut,
                    'importance': piece.importance,
                    'pertinence': piece.pertinence,
                    'notes': piece.notes,
                    'metadata': piece.metadata
                }
                data['pieces'].append(piece_data)
            
            content = json.dumps(data, ensure_ascii=False, indent=2)
            filename = f"pieces_export_{timestamp}.json"
            mime_type = "application/json"
        
        elif format_export == 'csv':
            # Export CSV
            rows = []
            for piece in pieces:
                rows.append({
                    'Num√©ro': piece.numero_ordre,
                    'Nom': piece.nom,
                    'Type': piece.type_piece,
                    'Cat√©gorie': piece.categorie,
                    'Date': piece.date_document.strftime('%d/%m/%Y') if piece.date_document else '',
                    'Source': piece.source,
                    'Importance': piece.importance,
                    'Pertinence': f"{piece.pertinence:.0%}",
                    'Statut': self.STATUTS_CONFIG[piece.statut]['label'],
                    'Tags': ', '.join(piece.tags),
                    'Notes': piece.notes
                })
            
            df = pd.DataFrame(rows)
            content = df.to_csv(index=False, encoding='utf-8-sig').encode('utf-8-sig')
            filename = f"pieces_export_{timestamp}.csv"
            mime_type = "text/csv"
        
        elif format_export == 'excel':
            # Export Excel multi-feuilles
            output = io.BytesIO()
            
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                # Feuille principale des pi√®ces
                pieces_data = []
                for piece in pieces:
                    pieces_data.append({
                        'N¬∞': piece.numero_ordre,
                        'Nom': piece.nom,
                        'Type': piece.type_piece,
                        'Cat√©gorie': piece.categorie,
                        'Date document': piece.date_document,
                        'Date ajout': piece.date_ajout,
                        'Source': piece.source,
                        'Importance': piece.importance,
                        'Pertinence': piece.pertinence,
                        'Statut': self.STATUTS_CONFIG[piece.statut]['label'],
                        'Tags': ', '.join(piece.tags),
                        'Notes': piece.notes,
                        'Description': piece.description or ''
                    })
                
                df_pieces = pd.DataFrame(pieces_data)
                df_pieces.to_excel(writer, sheet_name='Pi√®ces', index=False)
                
                # Feuille de synth√®se par cat√©gorie
                synthese_data = []
                for cat, cat_pieces in self.get_pieces_par_categorie().items():
                    synthese_data.append({
                        'Cat√©gorie': cat,
                        'Nombre': len(cat_pieces),
                        'Importance moyenne': sum(p.importance for p in cat_pieces) / len(cat_pieces) if cat_pieces else 0,
                        'Types': ', '.join(set(p.type_piece for p in cat_pieces))
                    })
                
                df_synthese = pd.DataFrame(synthese_data)
                df_synthese.to_excel(writer, sheet_name='Synth√®se', index=False)
                
                # Feuille des tags
                tags_data = []
                for tag, count in self.get_all_tags():
                    tags_data.append({'Tag': tag, 'Occurrences': count})
                
                if tags_data:
                    df_tags = pd.DataFrame(tags_data)
                    df_tags.to_excel(writer, sheet_name='Tags', index=False)
                
                # Mise en forme
                workbook = writer.book
                for worksheet in writer.sheets.values():
                    worksheet.set_column('A:Z', 15)
            
            output.seek(0)
            content = output.getvalue()
            filename = f"pieces_export_{timestamp}.xlsx"
            mime_type = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        
        elif format_export == 'txt':
            # Export texte (bordereau d√©taill√©)
            content = self.generer_bordereau("detaille", piece_ids)
            filename = f"bordereau_pieces_{timestamp}.txt"
            mime_type = "text/plain"
        
        else:
            raise ValueError(f"Format d'export non support√© : {format_export}")
        
        return content, filename, mime_type
    
    def importer_pieces_json(self, json_data: str) -> Dict[str, Any]:
        """Importe des pi√®ces depuis un JSON"""
        try:
            data = json.loads(json_data)
            results = {'success': 0, 'failed': 0, 'errors': []}
            
            for piece_data in data.get('pieces', []):
                try:
                    # Recr√©er la pi√®ce
                    piece = PieceJuridique(
                        nom=piece_data.get('nom', ''),
                        type_piece=piece_data.get('type_piece', 'Document'),
                        categorie=piece_data.get('categorie', 'Autre'),
                        numero_ordre=piece_data.get('numero_ordre', 1),
                        description=piece_data.get('description'),
                        source=piece_data.get('source', ''),
                        tags=piece_data.get('tags', []),
                        statut=piece_data.get('statut', 'actif'),
                        importance=piece_data.get('importance', 5),
                        pertinence=piece_data.get('pertinence', 0.5),
                        notes=piece_data.get('notes', ''),
                        metadata=piece_data.get('metadata', {})
                    )
                    
                    # Dates
                    if piece_data.get('date_document'):
                        piece.date_document = datetime.fromisoformat(piece_data['date_document'])
                    
                    self.ajouter_piece(piece)
                    results['success'] += 1
                    
                except Exception as e:
                    results['failed'] += 1
                    results['errors'].append(f"{piece_data.get('nom', 'Sans nom')}: {str(e)}")
            
            return results
            
        except json.JSONDecodeError as e:
            return {'success': 0, 'failed': 1, 'errors': [f"Erreur JSON : {str(e)}"]}
    
    # ==================== OP√âRATIONS GROUP√âES ====================
    
    def operations_groupees(self, piece_ids: List[str], operation: str, **params) -> Dict[str, Any]:
        """Effectue des op√©rations sur plusieurs pi√®ces"""
        results = {'success': 0, 'failed': 0, 'errors': []}
        
        for piece_id in piece_ids:
            try:
                if operation == 'select':
                    self.selectionner_piece(piece_id, params.get('notes', ''))
                elif operation == 'deselect':
                    self.deselectionner_piece(piece_id)
                elif operation == 'delete':
                    self.supprimer_piece(piece_id, params.get('permanent', False))
                elif operation == 'archive':
                    self.modifier_piece(piece_id, statut='archiv√©', create_version=False)
                elif operation == 'restore':
                    self.modifier_piece(piece_id, statut='actif', create_version=False)
                elif operation == 'move':
                    self.deplacer_vers_dossier(piece_id, params.get('dossier_id'))
                elif operation == 'tag':
                    self.ajouter_tags(piece_id, params.get('tags', []))
                elif operation == 'untag':
                    self.retirer_tags(piece_id, params.get('tags', []))
                elif operation == 'importance':
                    self.modifier_piece(piece_id, importance=params.get('importance', 5))
                elif operation == 'categorie':
                    self.modifier_piece(piece_id, categorie=params.get('categorie'))
                
                results['success'] += 1
                
            except Exception as e:
                results['failed'] += 1
                results['errors'].append(f"{piece_id}: {str(e)}")
        
        return results
    
    # ==================== TAGS ET FAVORIS ====================
    
    def ajouter_tags(self, piece_id: str, tags: List[str]):
        """Ajoute des tags √† une pi√®ce"""
        piece = self.get_piece(piece_id)
        if piece:
            # Normaliser les tags
            normalized_tags = [tag.strip().lower() for tag in tags if tag.strip()]
            
            # Ajouter les nouveaux tags
            piece.tags.extend(normalized_tags)
            piece.tags = list(set(piece.tags))  # D√©dupliquer
            
            # Mettre √† jour les tags globaux
            st.session_state.pieces_metadata['tags'].update(normalized_tags)
            
            self._add_to_history('add_tags', piece_id, {'tags': normalized_tags})
    
    def retirer_tags(self, piece_id: str, tags: List[str]):
        """Retire des tags d'une pi√®ce"""
        piece = self.get_piece(piece_id)
        if piece:
            normalized_tags = [tag.strip().lower() for tag in tags]
            piece.tags = [t for t in piece.tags if t not in normalized_tags]
            self._add_to_history('remove_tags', piece_id, {'tags': normalized_tags})
    
    def get_all_tags(self) -> List[Tuple[str, int]]:
        """Retourne tous les tags avec leur fr√©quence"""
        tag_counter = Counter()
        for piece in st.session_state.pieces.values():
            if piece.statut != 'supprim√©':
                tag_counter.update(piece.tags)
        return tag_counter.most_common()
    
    def toggle_favori(self, piece_id: str) -> bool:
        """Ajoute/retire une pi√®ce des favoris"""
        if piece_id in st.session_state.pieces_favoris:
            st.session_state.pieces_favoris.remove(piece_id)
            self._add_to_history('unfavorite', piece_id, {})
            return False
        else:
            st.session_state.pieces_favoris.add(piece_id)
            self._add_to_history('favorite', piece_id, {})
            return True
    
    def get_favoris(self) -> List[PieceJuridique]:
        """R√©cup√®re toutes les pi√®ces favorites"""
        return [self.get_piece(pid) for pid in st.session_state.pieces_favoris 
                if self.get_piece(pid) and self.get_piece(pid).statut != 'supprim√©']
    
    # ==================== STATISTIQUES ====================
    
    def get_statistiques(self) -> Dict[str, Any]:
        """Calcule des statistiques d√©taill√©es"""
        pieces = [p for p in st.session_state.pieces.values() if p.statut != 'supprim√©']
        pieces_selectionnees = list(st.session_state.pieces_selectionnees.values())
        
        if not pieces:
            return self._get_empty_stats()
        
        # Stats de base
        total = len(pieces)
        total_selectionne = len(pieces_selectionnees)
        
        # Par cat√©gorie et type
        par_categorie = Counter(p.categorie for p in pieces)
        par_type = Counter(p.type_piece for p in pieces)
        par_statut = Counter(p.statut for p in pieces)
        
        # S√©lection par cat√©gorie
        selection_par_categorie = Counter(p.categorie for p in pieces_selectionnees)
        
        # Calculs moyens
        importance_moyenne = sum(p.importance for p in pieces) / total
        pertinence_moyenne = sum(p.pertinence for p in pieces) / total
        
        # Tailles
        taille_totale = sum(p.taille or 0 for p in pieces)
        pieces_avec_fichier = sum(1 for p in pieces if p.chemin_fichier)
        
        # Tags
        tags_populaires = self.get_all_tags()[:10]
        
        # √âvolution temporelle
        evolution_mensuelle = defaultdict(int)
        for piece in pieces:
            mois = piece.date_ajout.strftime('%Y-%m')
            evolution_mensuelle[mois] += 1
        
        # Pi√®ces r√©centes et importantes
        pieces_recentes = sorted(pieces, key=lambda p: p.date_ajout, reverse=True)[:10]
        pieces_importantes = sorted(pieces, key=lambda p: (p.importance, p.pertinence), reverse=True)[:10]
        
        return {
            'total': total,
            'total_selectionne': total_selectionne,
            'par_categorie': dict(par_categorie),
            'par_type': dict(par_type),
            'par_statut': dict(par_statut),
            'selection_par_categorie': dict(selection_par_categorie),
            'importance_moyenne': importance_moyenne,
            'pertinence_moyenne': pertinence_moyenne,
            'taille_totale': taille_totale,
            'taille_moyenne': taille_totale // total if total > 0 else 0,
            'pieces_avec_fichier': pieces_avec_fichier,
            'pieces_avec_notes': sum(1 for p in pieces if p.notes),
            'total_favoris': len(st.session_state.pieces_favoris),
            'tags_populaires': tags_populaires,
            'evolution_mensuelle': dict(evolution_mensuelle),
            'pieces_recentes': pieces_recentes,
            'pieces_importantes': pieces_importantes,
            'derniere_modification': st.session_state.pieces_metadata.get('last_modified')
        }
    
    def _get_empty_stats(self) -> Dict[str, Any]:
        """Retourne des statistiques vides"""
        return {
            'total': 0, 'total_selectionne': 0, 'par_categorie': {}, 'par_type': {},
            'par_statut': {}, 'selection_par_categorie': {}, 'importance_moyenne': 0,
            'pertinence_moyenne': 0, 'taille_totale': 0, 'taille_moyenne': 0,
            'pieces_avec_fichier': 0, 'pieces_avec_notes': 0, 'total_favoris': 0,
            'tags_populaires': [], 'evolution_mensuelle': {}, 'pieces_recentes': [],
            'pieces_importantes': [], 'derniere_modification': None
        }
    
    # ==================== M√âTHODES UTILITAIRES ====================
    
    def get_piece(self, piece_id: str) -> Optional[PieceJuridique]:
        """R√©cup√®re une pi√®ce par son ID"""
        return st.session_state.pieces.get(piece_id)
    
    def get_pieces_dossier(self, dossier_id: str, include_archived: bool = False) -> List[PieceJuridique]:
        """R√©cup√®re les pi√®ces d'un dossier"""
        piece_ids = st.session_state.pieces_par_dossier.get(dossier_id, [])
        pieces = []
        
        for pid in piece_ids:
            piece = self.get_piece(pid)
            if piece:
                if include_archived or piece.statut not in ['archiv√©', 'supprim√©']:
                    pieces.append(piece)
        
        return sorted(pieces, key=lambda p: p.numero_ordre)
    
    def deplacer_vers_dossier(self, piece_id: str, nouveau_dossier_id: str):
        """D√©place une pi√®ce vers un autre dossier"""
        piece = self.get_piece(piece_id)
        if not piece:
            return
        
        # Retirer de l'ancien dossier
        if piece.dossier_id:
            old_pieces = st.session_state.pieces_par_dossier.get(piece.dossier_id, [])
            if piece_id in old_pieces:
                old_pieces.remove(piece_id)
        
        # Ajouter au nouveau
        if nouveau_dossier_id:
            piece.dossier_id = nouveau_dossier_id
            if nouveau_dossier_id not in st.session_state.pieces_par_dossier:
                st.session_state.pieces_par_dossier[nouveau_dossier_id] = []
            st.session_state.pieces_par_dossier[nouveau_dossier_id].append(piece_id)
        else:
            piece.dossier_id = None
        
        self._add_to_history('move', piece_id, {'to_dossier': nouveau_dossier_id})
    
    def get_historique(self, limit: int = 50) -> List[Dict[str, Any]]:
        """R√©cup√®re l'historique des actions"""
        return st.session_state.pieces_history[-limit:]
    
    @staticmethod
    def calculer_hash_fichier(content: bytes) -> str:
        """Calcule le hash SHA-256 d'un fichier"""
        return hashlib.sha256(content).hexdigest()
    
    @staticmethod
    def formater_taille_fichier(size_bytes: Optional[int]) -> str:
        """Formate la taille d'un fichier"""
        if not size_bytes:
            return "0 B"
        
        for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
            if size_bytes < 1024.0:
                return f"{size_bytes:.1f} {unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.1f} PB"
    
    # ==================== M√âTHODES PRIV√âES ====================
    
    def _determiner_categorie(self, piece: PieceJuridique) -> str:
        """D√©termine automatiquement la cat√©gorie d'une pi√®ce"""
        text_lower = (piece.nom + ' ' + piece.type_piece + ' ' + 
                     (piece.description or '') + ' ' + (piece.contenu_extrait or '')).lower()
        
        for categorie, config in self.CATEGORIES_CONFIG.items():
            if config['patterns']:
                for pattern in config['patterns']:
                    if pattern in text_lower:
                        return categorie
        
        return 'Autre'
    
    def _calculer_pertinence(self, piece: PieceJuridique, analysis: Dict[str, Any]) -> float:
        """Calcule la pertinence d'une pi√®ce par rapport √† une analyse"""
        score = 0.5  # Score de base
        
        # Analyse du contenu
        if analysis.get('subject_matter'):
            subject_words = set(analysis['subject_matter'].lower().split())
            piece_text = (piece.nom + ' ' + (piece.description or '') + ' ' + 
                         (piece.contenu_extrait or '')).lower()
            piece_words = set(piece_text.split())
            
            common_words = subject_words.intersection(piece_words)
            if subject_words:
                score += (len(common_words) / len(subject_words)) * 0.3
        
        # R√©f√©rence exacte
        if analysis.get('reference'):
            ref_lower = analysis['reference'].lower()
            if ref_lower in piece.nom.lower():
                score += 0.25
            elif piece.description and ref_lower in piece.description.lower():
                score += 0.15
        
        # Fra√Æcheur
        if piece.date_document:
            age_days = (datetime.now() - piece.date_document).days
            if age_days < 30:
                score += 0.1
            elif age_days < 90:
                score += 0.05
        
        # Importance
        score += (piece.importance / 10) * 0.1
        
        return min(score, 1.0)
    
    def _renumeroter_pieces_selectionnees(self):
        """Renum√©rotation des pi√®ces s√©lectionn√©es"""
        pieces = sorted(st.session_state.pieces_selectionnees.values(), 
                       key=lambda p: (p.categorie, p.date_ajout))
        
        for i, piece in enumerate(pieces, 1):
            piece.numero_ordre = i
    
    def _update_global_metadata(self, piece: PieceJuridique, action: str):
        """Met √† jour les m√©tadonn√©es globales"""
        metadata = st.session_state.pieces_metadata
        
        if action == 'add':
            if piece.taille:
                metadata['total_size'] += piece.taille
            metadata['categories_count'][piece.categorie] += 1
            metadata['types_count'][piece.type_piece] += 1
            if piece.tags:
                metadata['tags'].update(piece.tags)
        
        elif action == 'remove':
            if piece.taille:
                metadata['total_size'] = max(0, metadata['total_size'] - piece.taille)
            metadata['categories_count'][piece.categorie] -= 1
            metadata['types_count'][piece.type_piece] -= 1
        
        metadata['last_modified'] = datetime.now()
    
    def _add_to_history(self, action: str, piece_id: str, details: Dict[str, Any]):
        """Ajoute une action √† l'historique"""
        entry = {
            'timestamp': datetime.now(),
            'action': action,
            'piece_id': piece_id,
            'details': details,
            'user': st.session_state.get('current_user', 'Utilisateur')
        }
        
        st.session_state.pieces_history.append(entry)
        
        # Limiter la taille
        if len(st.session_state.pieces_history) > 1000:
            st.session_state.pieces_history = st.session_state.pieces_history[-500:]

# ========================= INTERFACE UTILISATEUR =========================

def display_pieces_interface():
    """Interface principale de gestion des pi√®ces"""
    
    # CSS personnalis√©
    st.markdown("""
    <style>
    .piece-card {
        background: white;
        border-radius: 10px;
        padding: 1rem;
        margin-bottom: 0.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }
    .piece-card:hover {
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        transform: translateY(-2px);
    }
    .tag-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        margin: 0.25rem;
        border-radius: 15px;
        font-size: 0.85rem;
        background: #e3f2fd;
        color: #1976d2;
    }
    .importance-bar {
        height: 4px;
        border-radius: 2px;
        margin-top: 0.5rem;
    }
    .category-header {
        font-weight: bold;
        margin: 1rem 0 0.5rem 0;
        padding: 0.5rem;
        background: #f5f5f5;
        border-radius: 5px;
    }
    </style>
    """, unsafe_allow_html=True)
    
    st.title("üìé Gestion Unifi√©e des Pi√®ces")
    
    gestionnaire = GestionnairePiecesUnifie()
    
    # Barre d'outils principale
    col1, col2, col3, col4, col5, col6 = st.columns([2, 2, 2, 1, 1, 1])
    
    with col1:
        if st.button("‚ûï Nouvelle pi√®ce", key="new_piece_btn", type="primary", use_container_width=True):
            st.session_state.show_add_piece_modal = True
    
    with col2:
        if st.button("üì§ Import", key="import_btn", use_container_width=True):
            st.session_state.show_import_modal = True
    
    with col3:
        if st.button("‚ö° Actions group√©es", key="bulk_actions_btn", use_container_width=True):
            st.session_state.show_bulk_actions = True
    
    with col4:
        # Compteur de s√©lection UI
        selected_count = len(st.session_state.get('selected_pieces', []))
        if selected_count > 0:
            st.metric("UI", selected_count)
    
    with col5:
        # Compteur de s√©lection pour communication
        comm_count = len(st.session_state.pieces_selectionnees)
        if comm_count > 0:
            st.metric("Comm", comm_count)
    
    with col6:
        if st.button("üîÑ", key="refresh_pieces", help="Actualiser"):
            st.rerun()
    
    # Modales
    if st.session_state.get('show_add_piece_modal'):
        display_add_piece_modal(gestionnaire)
    
    if st.session_state.get('show_import_modal'):
        display_import_modal(gestionnaire)
    
    if st.session_state.get('show_bulk_actions'):
        display_bulk_actions_modal(gestionnaire)
    
    # Onglets principaux
    tabs = st.tabs([
        "üìã Vue d'ensemble",
        "‚úÖ S√©lection communication",
        "üîç Recherche avanc√©e",
        "‚≠ê Favoris",
        "üìä Statistiques",
        "üìú Historique",
        "‚öôÔ∏è Configuration"
    ])
    
    with tabs[0]:
        display_pieces_overview(gestionnaire)
    
    with tabs[1]:
        display_selection_communication(gestionnaire)
    
    with tabs[2]:
        display_advanced_search(gestionnaire)
    
    with tabs[3]:
        display_favoris(gestionnaire)
    
    with tabs[4]:
        display_statistics_dashboard(gestionnaire)
    
    with tabs[5]:
        display_history(gestionnaire)
    
    with tabs[6]:
        display_settings(gestionnaire)

def display_pieces_overview(gestionnaire: GestionnairePiecesUnifie):
    """Vue d'ensemble avec filtres rapides"""
    
    # Filtres en ligne
    col1, col2, col3, col4, col5 = st.columns([3, 2, 2, 2, 1])
    
    with col1:
        search_query = st.text_input(
            "üîç Recherche",
            placeholder="Nom, type, tag, description...",
            key="quick_search"
        )
    
    with col2:
        categories = ["Toutes"] + list(gestionnaire.CATEGORIES_CONFIG.keys())
        selected_categorie = st.selectbox("üìÅ Cat√©gorie", categories, key="filter_cat")
    
    with col3:
        statuts = ["Tous"] + [s['label'] for s in gestionnaire.STATUTS_CONFIG.values()]
        selected_statut = st.selectbox("üìå Statut", statuts, key="filter_statut")
    
    with col4:
        sort_options = ["Date r√©cente", "Nom A-Z", "Importance", "Pertinence", "Num√©ro"]
        sort_by = st.selectbox("üîÄ Tri", sort_options, key="sort_by")
    
    with col5:
        view_mode = st.radio("Vue", ["üìã", "üé¥", "üìä"], horizontal=True, label_visibility="collapsed")
    
    # Pr√©parer les filtres
    filters = {}
    if selected_categorie != "Toutes":
        filters['categorie'] = selected_categorie
    if selected_statut != "Tous":
        statut_key = [k for k, v in gestionnaire.STATUTS_CONFIG.items() if v['label'] == selected_statut][0]
        filters['statut'] = statut_key
    
    # Rechercher
    pieces = gestionnaire.rechercher_pieces(search_query, filters)
    
    # Trier
    if sort_by == "Date r√©cente":
        pieces.sort(key=lambda p: p.date_ajout, reverse=True)
    elif sort_by == "Nom A-Z":
        pieces.sort(key=lambda p: p.nom.lower())
    elif sort_by == "Importance":
        pieces.sort(key=lambda p: p.importance, reverse=True)
    elif sort_by == "Pertinence":
        pieces.sort(key=lambda p: p.pertinence, reverse=True)
    elif sort_by == "Num√©ro":
        pieces.sort(key=lambda p: p.numero_ordre)
    
    # Stats rapides
    if pieces:
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Total", len(pieces))
        with col2:
            selectionnees = len([p for p in pieces if p.statut == 's√©lectionn√©'])
            st.metric("S√©lectionn√©es", selectionnees)
        with col3:
            avg_importance = sum(p.importance for p in pieces) / len(pieces)
            st.metric("Importance moy.", f"{avg_importance:.1f}/10")
        with col4:
            favoris = len([p for p in pieces if p.id in st.session_state.pieces_favoris])
            st.metric("Favoris", favoris)
    
    # Affichage selon le mode
    if view_mode == "üìã":
        display_pieces_list_view(pieces, gestionnaire)
    elif view_mode == "üé¥":
        display_pieces_cards_view(pieces, gestionnaire)
    else:
        display_pieces_table_view(pieces, gestionnaire)
    
    # Actions flottantes si s√©lection
    if st.session_state.get('selected_pieces'):
        display_floating_actions(gestionnaire)

def display_selection_communication(gestionnaire: GestionnairePiecesUnifie):
    """Interface de s√©lection pour communication de pi√®ces"""
    
    st.markdown("### üìã S√©lection de pi√®ces pour communication")
    
    # Colonnes principales
    col_left, col_right = st.columns([1, 1])
    
    with col_left:
        st.markdown("#### üìÑ Pi√®ces disponibles")
        
        # Recherche et filtres
        search = st.text_input("üîç Filtrer", placeholder="Rechercher...", key="search_available")
        
        col1, col2 = st.columns(2)
        with col1:
            cat_filter = st.selectbox(
                "Cat√©gorie",
                ["Toutes"] + list(gestionnaire.CATEGORIES_CONFIG.keys()),
                key="cat_filter_available"
            )
        with col2:
            importance_min = st.slider("Importance min", 1, 10, 1, key="imp_filter_available")
        
        # Pr√©parer les filtres
        filters = {'statut': 'actif'}
        if cat_filter != "Toutes":
            filters['categorie'] = cat_filter
        filters['importance_min'] = importance_min
        
        # Rechercher les pi√®ces
        available_pieces = gestionnaire.rechercher_pieces(search, filters)
        
        # Exclure les d√©j√† s√©lectionn√©es
        available_pieces = [p for p in available_pieces if p.id not in st.session_state.pieces_selectionnees]
        
        # Afficher les pi√®ces disponibles
        for piece in available_pieces[:20]:  # Limiter l'affichage
            with st.container():
                col1, col2 = st.columns([4, 1])
                
                with col1:
                    cat_config = gestionnaire.CATEGORIES_CONFIG[piece.categorie]
                    st.markdown(f"**{cat_config['icon']} {piece.nom}**")
                    
                    if piece.description:
                        st.caption(piece.description[:100] + "..." if len(piece.description) > 100 else piece.description)
                    
                    # Badges
                    badges = []
                    if piece.pertinence >= 0.7:
                        badges.append("üü¢ Tr√®s pertinent")
                    elif piece.pertinence >= 0.4:
                        badges.append("üü° Pertinent")
                    
                    if piece.importance >= 7:
                        badges.append("‚≠ê Important")
                    
                    if badges:
                        st.caption(" | ".join(badges))
                
                with col2:
                    if st.button("‚ûï", key=f"add_comm_{piece.id}", help="Ajouter √† la s√©lection"):
                        gestionnaire.selectionner_piece(piece.id)
                        st.rerun()
                
                st.divider()
        
        if len(available_pieces) > 20:
            st.info(f"... et {len(available_pieces) - 20} autres pi√®ces")
    
    with col_right:
        st.markdown("#### ‚úÖ Pi√®ces s√©lectionn√©es")
        
        pieces_selectionnees = gestionnaire.get_pieces_selectionnees()
        
        if not pieces_selectionnees:
            st.info("Aucune pi√®ce s√©lectionn√©e. Ajoutez des pi√®ces depuis la colonne de gauche.")
        else:
            # Actions globales
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("üìä Bordereau", key="gen_bordereau", use_container_width=True):
                    st.session_state.show_bordereau = True
            
            with col2:
                if st.button("üì§ Exporter", key="export_selection", use_container_width=True):
                    st.session_state.show_export_selection = True
            
            with col3:
                if st.button("üóëÔ∏è Tout retirer", key="clear_selection", use_container_width=True):
                    for piece_id in list(st.session_state.pieces_selectionnees.keys()):
                        gestionnaire.deselectionner_piece(piece_id)
                    st.rerun()
            
            st.divider()
            
            # Grouper par cat√©gorie
            pieces_par_cat = gestionnaire.get_pieces_par_categorie(selected_only=True)
            
            for categorie, pieces in pieces_par_cat.items():
                cat_config = gestionnaire.CATEGORIES_CONFIG[categorie]
                
                with st.expander(f"{cat_config['icon']} {categorie} ({len(pieces)} pi√®ces)", expanded=True):
                    for piece in pieces:
                        with st.container():
                            col1, col2, col3 = st.columns([3, 1, 1])
                            
                            with col1:
                                st.markdown(f"**#{piece.numero_ordre} - {piece.nom}**")
                                if piece.notes:
                                    st.caption(f"üìù {piece.notes}")
                            
                            with col2:
                                # Note rapide
                                note = st.text_input(
                                    "Note",
                                    value=piece.notes,
                                    key=f"note_{piece.id}",
                                    label_visibility="collapsed",
                                    placeholder="Note..."
                                )
                                if note != piece.notes:
                                    gestionnaire.modifier_piece(piece.id, notes=note)
                            
                            with col3:
                                if st.button("‚ùå", key=f"remove_comm_{piece.id}", help="Retirer"):
                                    gestionnaire.deselectionner_piece(piece.id)
                                    st.rerun()
    
    # Modales
    if st.session_state.get('show_bordereau'):
        display_bordereau_modal(gestionnaire)
    
    if st.session_state.get('show_export_selection'):
        display_export_modal(gestionnaire, selection_only=True)

def display_pieces_list_view(pieces: List[PieceJuridique], gestionnaire: GestionnairePiecesUnifie):
    """Affichage en liste d√©taill√©e"""
    
    if not pieces:
        st.info("üîç Aucune pi√®ce trouv√©e")
        return
    
    for piece in pieces:
        with st.container():
            col1, col2, col3, col4, col5 = st.columns([0.5, 3, 2, 1.5, 1])
            
            with col1:
                # Checkbox pour s√©lection UI
                selected = st.checkbox(
                    "",
                    key=f"select_{piece.id}",
                    label_visibility="collapsed"
                )
                
                if selected:
                    if piece.id not in st.session_state.get('selected_pieces', []):
                        st.session_state.selected_pieces = st.session_state.get('selected_pieces', []) + [piece.id]
                else:
                    if piece.id in st.session_state.get('selected_pieces', []):
                        st.session_state.selected_pieces.remove(piece.id)
                
                st.caption(f"#{piece.numero_ordre}")
            
            with col2:
                # Infos principales
                cat_config = gestionnaire.CATEGORIES_CONFIG[piece.categorie]
                statut_config = gestionnaire.STATUTS_CONFIG[piece.statut]
                
                col_title, col_icons = st.columns([10, 2])
                
                with col_title:
                    st.markdown(f"### {cat_config['icon']} {piece.nom}")
                
                with col_icons:
                    # Favoris
                    is_favori = piece.id in st.session_state.pieces_favoris
                    if st.button(
                        "‚≠ê" if is_favori else "‚òÜ",
                        key=f"fav_{piece.id}",
                        help="Retirer des favoris" if is_favori else "Ajouter aux favoris"
                    ):
                        gestionnaire.toggle_favori(piece.id)
                        st.rerun()
                    
                    # Statut
                    st.caption(f"{statut_config['icon']} {statut_config['label']}")
                
                # Description et tags
                if piece.description:
                    st.caption(piece.description[:200] + "..." if len(piece.description) > 200 else piece.description)
                
                if piece.tags:
                    tags_html = "".join(f'<span class="tag-badge">{tag}</span>' for tag in piece.tags[:5])
                    if len(piece.tags) > 5:
                        tags_html += f'<span class="tag-badge">+{len(piece.tags)-5}</span>'
                    st.markdown(tags_html, unsafe_allow_html=True)
                
                # Barres de progression
                col_imp, col_pert = st.columns(2)
                
                with col_imp:
                    imp_color = "#4caf50" if piece.importance >= 7 else "#ff9800" if piece.importance >= 4 else "#f44336"
                    st.markdown(
                        f'<div style="font-size: 0.8em; color: #666;">Importance: {piece.importance}/10</div>'
                        f'<div class="importance-bar" style="background: linear-gradient(to right, {imp_color} {piece.importance*10}%, #e0e0e0 {piece.importance*10}%);"></div>',
                        unsafe_allow_html=True
                    )
                
                with col_pert:
                    pert_color = "#4caf50" if piece.pertinence >= 0.7 else "#ff9800" if piece.pertinence >= 0.4 else "#f44336"
                    st.markdown(
                        f'<div style="font-size: 0.8em; color: #666;">Pertinence: {piece.pertinence:.0%}</div>'
                        f'<div class="importance-bar" style="background: linear-gradient(to right, {pert_color} {piece.pertinence*100}%, #e0e0e0 {piece.pertinence*100}%);"></div>',
                        unsafe_allow_html=True
                    )
            
            with col3:
                # M√©tadonn√©es
                st.write(f"**{piece.type_piece}**")
                st.caption(f"üìÖ {piece.date_ajout.strftime('%d/%m/%Y √† %H:%M')}")
                
                if piece.date_document:
                    st.caption(f"üìÑ Document du {piece.date_document.strftime('%d/%m/%Y')}")
                
                if piece.taille:
                    st.caption(f"üì¶ {gestionnaire.formater_taille_fichier(piece.taille)}")
                
                if piece.source:
                    st.caption(f"üìç {piece.source}")
                
                if piece.version > 1:
                    st.caption(f"üìù Version {piece.version}")
            
            with col4:
                # √âtats et notes
                if piece.date_modification:
                    st.caption(f"Modifi√© le {piece.date_modification.strftime('%d/%m')}")
                
                if piece.notes:
                    with st.expander("üìù Notes"):
                        st.caption(piece.notes)
                
                if piece.pieces_liees:
                    st.caption(f"üîó {len(piece.pieces_liees)} pi√®ces li√©es")
                
                if piece.metadata.get('confidentiel'):
                    st.caption("üîí Confidentiel")
            
            with col5:
                # Actions
                col_view, col_menu = st.columns(2)
                
                with col_view:
                    if st.button("üëÅÔ∏è", key=f"view_{piece.id}", help="D√©tails"):
                        st.session_state.current_piece_id = piece.id
                        st.session_state.show_piece_detail = True
                
                with col_menu:
                    if st.button("‚ãÆ", key=f"menu_{piece.id}", help="Actions"):
                        st.session_state.show_piece_menu = piece.id
            
            # Menu contextuel
            if st.session_state.get('show_piece_menu') == piece.id:
                display_piece_context_menu(piece, gestionnaire)
            
            st.divider()
    
    # Modal de d√©tail
    if st.session_state.get('show_piece_detail'):
        display_piece_detail_modal(gestionnaire)

def display_piece_context_menu(piece: PieceJuridique, gestionnaire: GestionnairePiecesUnifie):
    """Menu contextuel pour une pi√®ce"""
    
    with st.container():
        cols = st.columns(6)
        
        # Ligne 1
        with cols[0]:
            if st.button("‚úèÔ∏è √âditer", key=f"edit_{piece.id}", use_container_width=True):
                st.session_state.edit_piece_id = piece.id
                st.session_state.show_edit_modal = True
                st.session_state.show_piece_menu = None
        
        with cols[1]:
            if piece.statut != 's√©lectionn√©':
                if st.button("‚úÖ S√©lectionner", key=f"sel_{piece.id}", use_container_width=True):
                    gestionnaire.selectionner_piece(piece.id)
                    st.rerun()
            else:
                if st.button("‚ùå D√©s√©lectionner", key=f"desel_{piece.id}", use_container_width=True):
                    gestionnaire.deselectionner_piece(piece.id)
                    st.rerun()
        
        with cols[2]:
            if st.button("üìã Dupliquer", key=f"dup_{piece.id}", use_container_width=True):
                duplicate_piece(gestionnaire, piece)
                st.session_state.show_piece_menu = None
        
        with cols[3]:
            if st.button("üè∑Ô∏è Tags", key=f"tags_{piece.id}", use_container_width=True):
                st.session_state.manage_tags_piece = piece.id
                st.session_state.show_piece_menu = None
        
        with cols[4]:
            if piece.statut == 'actif':
                if st.button("üì¶ Archiver", key=f"arch_{piece.id}", use_container_width=True):
                    gestionnaire.modifier_piece(piece.id, statut='archiv√©')
                    st.rerun()
            else:
                if st.button("‚ôªÔ∏è Restaurer", key=f"rest_{piece.id}", use_container_width=True):
                    gestionnaire.modifier_piece(piece.id, statut='actif')
                    st.rerun()
        
        with cols[5]:
            if st.button("üóëÔ∏è Supprimer", key=f"del_{piece.id}", use_container_width=True):
                if st.checkbox("Confirmer", key=f"confirm_del_{piece.id}"):
                    gestionnaire.supprimer_piece(piece.id, permanent=True)
                    st.rerun()

def display_add_piece_modal(gestionnaire: GestionnairePiecesUnifie):
    """Modal d'ajout de pi√®ce"""
    
    with st.container():
        st.markdown("---")
        
        # En-t√™te
        col1, col2 = st.columns([4, 1])
        with col1:
            st.markdown("## ‚ûï Ajouter une nouvelle pi√®ce")
        with col2:
            if st.button("‚ùå Fermer", key="close_add_modal"):
                st.session_state.show_add_piece_modal = False
                st.rerun()
        
        # Formulaire
        with st.form("add_piece_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                nom = st.text_input(
                    "Nom de la pi√®ce *",
                    placeholder="Ex: Contrat de vente du 15/03/2024"
                )
                
                categorie = st.selectbox(
                    "Cat√©gorie *",
                    list(gestionnaire.CATEGORIES_CONFIG.keys())
                )
                
                type_piece = st.selectbox(
                    "Type de pi√®ce *",
                    gestionnaire.CATEGORIES_CONFIG[categorie]['types']
                )
                
                importance = st.slider("Importance", 1, 10, 5)
            
            with col2:
                source = st.text_input(
                    "Source",
                    placeholder="Ex: Dossier client, Email du 15/03..."
                )
                
                date_document = st.date_input(
                    "Date du document",
                    value=None
                )
                
                dossier = st.selectbox(
                    "Dossier",
                    ["Aucun"] + list(st.session_state.get('dossiers', {}).keys())
                )
                
                auto_select = st.checkbox(
                    "S√©lectionner automatiquement pour communication"
                )
            
            # Description
            description = st.text_area(
                "Description",
                placeholder="Description d√©taill√©e...",
                height=100
            )
            
            # Tags
            tags_input = st.text_input(
                "Tags (s√©par√©s par des virgules)",
                placeholder="contrat, important, urgent"
            )
            
            # M√©tadonn√©es avanc√©es
            with st.expander("‚öôÔ∏è Options avanc√©es"):
                col1, col2 = st.columns(2)
                
                with col1:
                    is_confidentiel = st.checkbox("üîí Confidentiel")
                    pertinence = st.slider("Pertinence initiale", 0.0, 1.0, 0.5)
                
                with col2:
                    notes = st.text_area(
                        "Notes internes",
                        placeholder="Notes pour la communication..."
                    )
            
            # Bouton de soumission
            submitted = st.form_submit_button(
                "‚úÖ Cr√©er la pi√®ce",
                use_container_width=True,
                type="primary"
            )
            
            if submitted and nom:
                try:
                    # Cr√©er la pi√®ce
                    piece = PieceJuridique(
                        nom=nom,
                        type_piece=type_piece,
                        categorie=categorie,
                        description=description,
                        source=source,
                        importance=importance,
                        pertinence=pertinence,
                        notes=notes,
                        tags=[t.strip() for t in tags_input.split(',') if t.strip()]
                    )
                    
                    if date_document:
                        piece.date_document = datetime.combine(date_document, datetime.min.time())
                    
                    if is_confidentiel:
                        piece.metadata['confidentiel'] = True
                    
                    # Ajouter la pi√®ce
                    dossier_id = None if dossier == "Aucun" else dossier
                    piece_id = gestionnaire.ajouter_piece(piece, dossier_id, auto_select)
                    
                    st.success(f"‚úÖ Pi√®ce '{nom}' cr√©√©e avec succ√®s!")
                    st.balloons()
                    
                    # Fermer apr√®s d√©lai
                    import time
                    time.sleep(1.5)
                    st.session_state.show_add_piece_modal = False
                    st.rerun()
                    
                except Exception as e:
                    st.error(f"‚ùå Erreur : {str(e)}")

def display_bordereau_modal(gestionnaire: GestionnairePiecesUnifie):
    """Modal de g√©n√©ration de bordereau"""
    
    with st.container():
        st.markdown("---")
        
        # En-t√™te
        col1, col2 = st.columns([4, 1])
        with col1:
            st.markdown("## üìä G√©n√©rer un bordereau")
        with col2:
            if st.button("‚ùå Fermer", key="close_bordereau"):
                st.session_state.show_bordereau = False
                st.rerun()
        
        # Options
        col1, col2 = st.columns(2)
        
        with col1:
            format_type = st.radio(
                "Format",
                ["detaille", "simple", "compact"],
                format_func=lambda x: {
                    "detaille": "D√©taill√© (avec descriptions)",
                    "simple": "Simple (liste num√©rot√©e)",
                    "compact": "Compact (titres uniquement)"
                }[x]
            )
        
        with col2:
            pieces_selectionnees = gestionnaire.get_pieces_selectionnees()
            st.metric("Pi√®ces s√©lectionn√©es", len(pieces_selectionnees))
        
        # Aper√ßu
        st.markdown("### üìÑ Aper√ßu")
        
        bordereau = gestionnaire.generer_bordereau(format_type)
        st.text_area("", bordereau, height=400, disabled=True)
        
        # Actions
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.download_button(
                "üíæ T√©l√©charger TXT",
                bordereau,
                f"bordereau_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                "text/plain",
                use_container_width=True
            )
        
        with col2:
            # Copier dans le presse-papier
            if st.button("üìã Copier", use_container_width=True):
                st.write("Contenu copi√©! (utilisez Ctrl+C)")
                st.code(bordereau)
        
        with col3:
            if st.button("üìß Envoyer", use_container_width=True):
                st.info("Fonction d'envoi √† impl√©menter")

def display_statistics_dashboard(gestionnaire: GestionnairePiecesUnifie):
    """Tableau de bord des statistiques"""
    
    stats = gestionnaire.get_statistiques()
    
    if stats['total'] == 0:
        st.info("Aucune pi√®ce enregistr√©e. Commencez par ajouter des pi√®ces.")
        return
    
    # M√©triques principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "Total pi√®ces",
            stats['total'],
            f"{stats['total_selectionne']} s√©lectionn√©es"
        )
    
    with col2:
        st.metric(
            "Importance moyenne",
            f"{stats['importance_moyenne']:.1f}/10",
            delta=None
        )
    
    with col3:
        st.metric(
            "Pertinence moyenne",
            f"{stats['pertinence_moyenne']:.0%}",
            delta=None
        )
    
    with col4:
        st.metric(
            "Taille totale",
            gestionnaire.formater_taille_fichier(stats['taille_totale']),
            f"{stats['pieces_avec_fichier']} fichiers"
        )
    
    # Graphiques
    st.markdown("### üìä Visualisations")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Distribution par cat√©gorie
        if stats['par_categorie']:
            st.markdown("#### Distribution par cat√©gorie")
            
            # Cr√©er un graphique simple avec Streamlit
            categories = list(stats['par_categorie'].keys())
            valeurs = list(stats['par_categorie'].values())
            
            # Barres horizontales
            for cat, val in zip(categories, valeurs):
                cat_config = gestionnaire.CATEGORIES_CONFIG.get(cat, gestionnaire.CATEGORIES_CONFIG['Autre'])
                col_icon, col_bar, col_val = st.columns([1, 8, 1])
                
                with col_icon:
                    st.write(cat_config['icon'])
                with col_bar:
                    st.progress(val / max(valeurs))
                with col_val:
                    st.write(str(val))
    
    with col2:
        # Top tags
        if stats['tags_populaires']:
            st.markdown("#### Tags populaires")
            
            for tag, count in stats['tags_populaires'][:10]:
                col_tag, col_count = st.columns([4, 1])
                with col_tag:
                    st.write(f"üè∑Ô∏è {tag}")
                with col_count:
                    st.write(str(count))
    
    # √âvolution temporelle
    if stats['evolution_mensuelle']:
        st.markdown("### üìà √âvolution mensuelle")
        
        mois = list(stats['evolution_mensuelle'].keys())
        valeurs = list(stats['evolution_mensuelle'].values())
        
        # Graphique simple
        st.bar_chart(dict(zip(mois[-12:], valeurs[-12:])))  # 12 derniers mois
    
    # Pi√®ces importantes
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üåü Pi√®ces les plus importantes")
        for piece in stats['pieces_importantes'][:5]:
            cat_config = gestionnaire.CATEGORIES_CONFIG[piece.categorie]
            st.write(f"{cat_config['icon']} **{piece.nom}**")
            st.caption(f"Importance: {piece.importance}/10 | Pertinence: {piece.pertinence:.0%}")
    
    with col2:
        st.markdown("### üïê Pi√®ces r√©centes")
        for piece in stats['pieces_recentes'][:5]:
            cat_config = gestionnaire.CATEGORIES_CONFIG[piece.categorie]
            st.write(f"{cat_config['icon']} **{piece.nom}**")
            st.caption(f"Ajout√©e le {piece.date_ajout.strftime('%d/%m/%Y √† %H:%M')}")

def duplicate_piece(gestionnaire: GestionnairePiecesUnifie, piece: PieceJuridique):
    """Duplique une pi√®ce"""
    try:
        new_piece = PieceJuridique(
            nom=f"{piece.nom} (copie)",
            type_piece=piece.type_piece,
            categorie=piece.categorie,
            description=piece.description,
            source=piece.source,
            tags=piece.tags.copy(),
            importance=piece.importance,
            pertinence=piece.pertinence,
            notes="",
            metadata=piece.metadata.copy()
        )
        
        gestionnaire.ajouter_piece(new_piece, piece.dossier_id)
        st.success(f"‚úÖ Pi√®ce dupliqu√©e avec succ√®s!")
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå Erreur : {str(e)}")

# Fonctions additionnelles √† impl√©menter :
# - display_pieces_cards_view
# - display_pieces_table_view
# - display_advanced_search
# - display_favoris
# - display_history
# - display_settings
# - display_import_modal
# - display_bulk_actions_modal
# - display_piece_detail_modal
# - display_floating_actions
# - display_export_modal

# Ces fonctions suivraient le m√™me pattern que celles d√©j√† impl√©ment√©es

def display_pieces_cards_view(pieces: List[PieceJuridique], gestionnaire: GestionnairePiecesUnifie):
    """Affichage en cartes visuelles"""
    
    if not pieces:
        st.info("üîç Aucune pi√®ce trouv√©e")
        return
    
    # Grille de cartes
    cols_per_row = 3
    for i in range(0, len(pieces), cols_per_row):
        cols = st.columns(cols_per_row)
        
        for j, col in enumerate(cols):
            if i + j < len(pieces):
                piece = pieces[i + j]
                
                with col:
                    with st.container():
                        # Style de carte avec bordure color√©e selon la cat√©gorie
                        cat_config = gestionnaire.CATEGORIES_CONFIG[piece.categorie]
                        statut_config = gestionnaire.STATUTS_CONFIG[piece.statut]
                        
                        st.markdown(
                            f"""
                            <div style="border: 2px solid {cat_config['color']}; 
                                        border-radius: 10px; padding: 15px; 
                                        background-color: white; height: 100%;">
                            """,
                            unsafe_allow_html=True
                        )
                        
                        # En-t√™te
                        col_icon, col_title, col_fav = st.columns([1, 8, 1])
                        
                        with col_icon:
                            st.markdown(f"<h2>{cat_config['icon']}</h2>", unsafe_allow_html=True)
                        
                        with col_title:
                            st.markdown(f"**{piece.nom}**")
                            st.caption(f"{piece.type_piece} - #{piece.numero_ordre}")
                        
                        with col_fav:
                            is_favori = piece.id in st.session_state.pieces_favoris
                            if st.button(
                                "‚≠ê" if is_favori else "‚òÜ",
                                key=f"fav_card_{piece.id}"
                            ):
                                gestionnaire.toggle_favori(piece.id)
                                st.rerun()
                        
                        # Corps
                        if piece.description:
                            st.caption(piece.description[:100] + "..." if len(piece.description) > 100 else piece.description)
                        
                        # Badges
                        badges = []
                        badges.append(f"{statut_config['icon']} {statut_config['label']}")
                        
                        if piece.importance >= 7:
                            badges.append("‚≠ê Important")
                        
                        if piece.pertinence >= 0.7:
                            badges.append("üéØ Tr√®s pertinent")
                        
                        st.caption(" | ".join(badges))
                        
                        # Tags (limit√©s)
                        if piece.tags:
                            tags_str = ", ".join(piece.tags[:3])
                            if len(piece.tags) > 3:
                                tags_str += f" +{len(piece.tags)-3}"
                            st.caption(f"üè∑Ô∏è {tags_str}")
                        
                        # M√©tadonn√©es
                        st.caption(f"üìÖ {piece.date_ajout.strftime('%d/%m/%Y')}")
                        
                        if piece.taille:
                            st.caption(f"üì¶ {gestionnaire.formater_taille_fichier(piece.taille)}")
                        
                        # Actions
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            if st.button("üëÅÔ∏è", key=f"view_card_{piece.id}", use_container_width=True):
                                st.session_state.current_piece_id = piece.id
                                st.session_state.show_piece_detail = True
                        
                        with col2:
                            if piece.statut != 's√©lectionn√©':
                                if st.button("‚úÖ", key=f"sel_card_{piece.id}", use_container_width=True):
                                    gestionnaire.selectionner_piece(piece.id)
                                    st.rerun()
                            else:
                                if st.button("‚ùå", key=f"desel_card_{piece.id}", use_container_width=True):
                                    gestionnaire.deselectionner_piece(piece.id)
                                    st.rerun()
                        
                        with col3:
                            if st.button("‚ãÆ", key=f"menu_card_{piece.id}", use_container_width=True):
                                st.session_state.show_piece_menu = piece.id
                        
                        # Menu contextuel dans la carte
                        if st.session_state.get('show_piece_menu') == piece.id:
                            display_piece_context_menu(piece, gestionnaire)
                        
                        st.markdown("</div>", unsafe_allow_html=True)
    
    # Modal de d√©tail
    if st.session_state.get('show_piece_detail'):
        display_piece_detail_modal(gestionnaire)

def display_pieces_table_view(pieces: List[PieceJuridique], gestionnaire: GestionnairePiecesUnifie):
    """Affichage en tableau"""
    
    if not pieces:
        st.info("üîç Aucune pi√®ce trouv√©e")
        return
    
    # Pr√©parer les donn√©es pour le DataFrame
    data = []
    for piece in pieces:
        cat_config = gestionnaire.CATEGORIES_CONFIG[piece.categorie]
        statut_config = gestionnaire.STATUTS_CONFIG[piece.statut]
        
        data.append({
            'S√©l.': '‚òëÔ∏è' if piece.id in st.session_state.get('selected_pieces', []) else '‚òê',
            'N¬∞': piece.numero_ordre,
            'Cat.': cat_config['icon'],
            'Nom': piece.nom,
            'Type': piece.type_piece,
            'Statut': f"{statut_config['icon']} {statut_config['label']}",
            'Importance': f"{piece.importance}/10",
            'Pertinence': f"{piece.pertinence:.0%}",
            'Date': piece.date_ajout.strftime('%d/%m/%Y'),
            'Tags': ', '.join(piece.tags[:3]) + (f' +{len(piece.tags)-3}' if len(piece.tags) > 3 else ''),
            'Taille': gestionnaire.formater_taille_fichier(piece.taille) if piece.taille else '-',
            'Notes': 'üìù' if piece.notes else '',
            'Fav.': '‚≠ê' if piece.id in st.session_state.pieces_favoris else '',
            'ID': piece.id
        })
    
    # Cr√©er le DataFrame
    df = pd.DataFrame(data)
    
    # Configuration de l'affichage
    st.dataframe(
        df[['S√©l.', 'N¬∞', 'Cat.', 'Nom', 'Type', 'Statut', 'Importance', 
            'Pertinence', 'Date', 'Tags', 'Taille', 'Notes', 'Fav.']],
        use_container_width=True,
        hide_index=True,
        column_config={
            'N¬∞': st.column_config.NumberColumn(width='small'),
            'Cat.': st.column_config.TextColumn(width='small'),
            'Importance': st.column_config.TextColumn(width='small'),
            'Pertinence': st.column_config.TextColumn(width='small'),
            'Taille': st.column_config.TextColumn(width='small'),
            'Notes': st.column_config.TextColumn(width='small'),
            'Fav.': st.column_config.TextColumn(width='small')
        }
    )
    
    # Actions sur s√©lection
    st.markdown("### Actions rapides")
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        piece_id = st.selectbox(
            "Pi√®ce",
            options=[p['ID'] for p in data],
            format_func=lambda x: next(p['Nom'] for p in data if p['ID'] == x),
            key="quick_action_piece"
        )
    
    with col2:
        if st.button("üëÅÔ∏è Voir", key="quick_view", use_container_width=True):
            st.session_state.current_piece_id = piece_id
            st.session_state.show_piece_detail = True
    
    with col3:
        if st.button("‚úèÔ∏è √âditer", key="quick_edit", use_container_width=True):
            st.session_state.edit_piece_id = piece_id
            st.session_state.show_edit_modal = True
    
    with col4:
        piece = gestionnaire.get_piece(piece_id)
        if piece and piece.statut != 's√©lectionn√©':
            if st.button("‚úÖ S√©lectionner", key="quick_select", use_container_width=True):
                gestionnaire.selectionner_piece(piece_id)
                st.rerun()
        else:
            if st.button("‚ùå D√©s√©lectionner", key="quick_deselect", use_container_width=True):
                gestionnaire.deselectionner_piece(piece_id)
                st.rerun()
    
    with col5:
        is_fav = piece_id in st.session_state.pieces_favoris
        if st.button("‚≠ê" if is_fav else "‚òÜ Favori", key="quick_fav", use_container_width=True):
            gestionnaire.toggle_favori(piece_id)
            st.rerun()
    
    # Modales
    if st.session_state.get('show_piece_detail'):
        display_piece_detail_modal(gestionnaire)
    
    if st.session_state.get('show_edit_modal'):
        display_edit_piece_modal(gestionnaire)

def display_advanced_search(gestionnaire: GestionnairePiecesUnifie):
    """Interface de recherche avanc√©e"""
    
    st.markdown("### üîç Recherche avanc√©e")
    
    # Formulaire de recherche
    with st.form("advanced_search_form"):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # Recherche textuelle
            query = st.text_input(
                "Recherche textuelle",
                placeholder="Mots-cl√©s dans nom, description, tags..."
            )
            
            # Cat√©gories
            categories = st.multiselect(
                "Cat√©gories",
                list(gestionnaire.CATEGORIES_CONFIG.keys())
            )
            
            # Types
            if categories:
                all_types = []
                for cat in categories:
                    all_types.extend(gestionnaire.CATEGORIES_CONFIG[cat]['types'])
                types = st.multiselect("Types de pi√®ces", list(set(all_types)))
            else:
                types = []
        
        with col2:
            # Statuts
            statuts = st.multiselect(
                "Statuts",
                list(gestionnaire.STATUTS_CONFIG.keys()),
                format_func=lambda x: gestionnaire.STATUTS_CONFIG[x]['label']
            )
            
            # Importance
            importance_range = st.slider(
                "Importance",
                1, 10, (1, 10),
                help="Plage d'importance"
            )
            
            # Pertinence
            pertinence_min = st.slider(
                "Pertinence minimale",
                0.0, 1.0, 0.0,
                format="%.0%%"
            )
        
        with col3:
            # Dates
            col_date1, col_date2 = st.columns(2)
            with col_date1:
                date_debut = st.date_input("Date d√©but", value=None)
            with col_date2:
                date_fin = st.date_input("Date fin", value=None)
            
            # Tags
            all_tags = [tag for tag, _ in gestionnaire.get_all_tags()]
            selected_tags = st.multiselect("Tags", all_tags)
            
            # Options
            include_archived = st.checkbox("Inclure les pi√®ces archiv√©es")
            favoris_only = st.checkbox("Favoris uniquement")
            selected_only = st.checkbox("Pi√®ces s√©lectionn√©es uniquement")
        
        # Bouton de recherche
        submitted = st.form_submit_button("üîç Rechercher", use_container_width=True, type="primary")
    
    # Ex√©cuter la recherche
    if submitted or query or categories or types or statuts or selected_tags:
        # Construire les filtres
        filters = {}
        
        if categories:
            filters['categorie'] = categories[0] if len(categories) == 1 else None
        
        if types:
            filters['type_piece'] = types[0] if len(types) == 1 else None
        
        if statuts:
            filters['statut'] = statuts[0] if len(statuts) == 1 else None
        
        filters['importance_min'] = importance_range[0]
        filters['importance_max'] = importance_range[1]
        filters['pertinence_min'] = pertinence_min
        
        if date_debut:
            filters['date_debut'] = datetime.combine(date_debut, datetime.min.time())
        if date_fin:
            filters['date_fin'] = datetime.combine(date_fin, datetime.max.time())
        
        if selected_tags:
            filters['tags'] = selected_tags
        
        filters['include_archived'] = include_archived
        filters['favoris_only'] = favoris_only
        filters['selected_only'] = selected_only
        
        # Rechercher
        results = gestionnaire.rechercher_pieces(query, filters)
        
        # Afficher les r√©sultats
        st.markdown(f"### üìä R√©sultats ({len(results)} pi√®ces trouv√©es)")
        
        if results:
            # Options d'affichage
            col1, col2, col3 = st.columns([1, 1, 3])
            
            with col1:
                view_mode = st.radio(
                    "Affichage",
                    ["Liste", "Cartes", "Tableau"],
                    horizontal=True
                )
            
            with col2:
                if st.button("üì§ Exporter r√©sultats", key="export_search_results"):
                    st.session_state.export_pieces = [p.id for p in results]
                    st.session_state.show_export_modal = True
            
            with col3:
                if st.button("‚úÖ S√©lectionner tous les r√©sultats", key="select_all_results"):
                    for piece in results:
                        if piece.statut != 's√©lectionn√©':
                            gestionnaire.selectionner_piece(piece.id)
                    st.rerun()
            
            # Afficher selon le mode choisi
            if view_mode == "Liste":
                display_pieces_list_view(results, gestionnaire)
            elif view_mode == "Cartes":
                display_pieces_cards_view(results, gestionnaire)
            else:
                display_pieces_table_view(results, gestionnaire)
        else:
            st.info("Aucune pi√®ce ne correspond aux crit√®res de recherche.")
    
    # Modal d'export
    if st.session_state.get('show_export_modal'):
        display_export_modal(gestionnaire)

def display_favoris(gestionnaire: GestionnairePiecesUnifie):
    """Affichage des pi√®ces favorites"""
    
    st.markdown("### ‚≠ê Pi√®ces favorites")
    
    favoris = gestionnaire.get_favoris()
    
    if not favoris:
        st.info("Aucune pi√®ce favorite. Ajoutez des pi√®ces en favoris en cliquant sur l'√©toile ‚≠ê")
        return
    
    # Options d'affichage
    col1, col2, col3 = st.columns([2, 2, 1])
    
    with col1:
        sort_by = st.selectbox(
            "Trier par",
            ["Date d'ajout", "Nom", "Importance", "Cat√©gorie"],
            key="sort_favoris"
        )
    
    with col2:
        filter_cat = st.selectbox(
            "Filtrer par cat√©gorie",
            ["Toutes"] + list(set(p.categorie for p in favoris)),
            key="filter_cat_favoris"
        )
    
    with col3:
        if st.button("üóëÔ∏è Vider", key="clear_favoris"):
            if st.checkbox("Confirmer", key="confirm_clear_favoris"):
                st.session_state.pieces_favoris.clear()
                st.rerun()
    
    # Filtrer
    if filter_cat != "Toutes":
        favoris = [p for p in favoris if p.categorie == filter_cat]
    
    # Trier
    if sort_by == "Date d'ajout":
        favoris.sort(key=lambda p: p.date_ajout, reverse=True)
    elif sort_by == "Nom":
        favoris.sort(key=lambda p: p.nom.lower())
    elif sort_by == "Importance":
        favoris.sort(key=lambda p: p.importance, reverse=True)
    elif sort_by == "Cat√©gorie":
        favoris.sort(key=lambda p: (p.categorie, p.nom))
    
    # Affichage en grille de cartes compactes
    cols_per_row = 2
    for i in range(0, len(favoris), cols_per_row):
        cols = st.columns(cols_per_row)
        
        for j, col in enumerate(cols):
            if i + j < len(favoris):
                piece = favoris[i + j]
                
                with col:
                    with st.container():
                        cat_config = gestionnaire.CATEGORIES_CONFIG[piece.categorie]
                        
                        # Carte compacte
                        st.markdown(
                            f"""
                            <div style="background: #f8f9fa; padding: 15px; 
                                        border-radius: 10px; border-left: 4px solid {cat_config['color']};">
                            """,
                            unsafe_allow_html=True
                        )
                        
                        # En-t√™te
                        col_icon, col_info, col_action = st.columns([1, 8, 1])
                        
                        with col_icon:
                            st.markdown(f"<h3>{cat_config['icon']}</h3>", unsafe_allow_html=True)
                        
                        with col_info:
                            st.markdown(f"**{piece.nom}**")
                            st.caption(f"{piece.type_piece} ‚Ä¢ Importance: {piece.importance}/10")
                            
                            if piece.tags:
                                st.caption(f"üè∑Ô∏è {', '.join(piece.tags[:3])}")
                        
                        with col_action:
                            if st.button("‚≠ê", key=f"unfav_{piece.id}", help="Retirer des favoris"):
                                gestionnaire.toggle_favori(piece.id)
                                st.rerun()
                        
                        # Actions rapides
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            if st.button("üëÅÔ∏è Voir", key=f"view_fav_{piece.id}", use_container_width=True):
                                st.session_state.current_piece_id = piece.id
                                st.session_state.show_piece_detail = True
                        
                        with col2:
                            if piece.statut != 's√©lectionn√©':
                                if st.button("‚úÖ S√©lect.", key=f"sel_fav_{piece.id}", use_container_width=True):
                                    gestionnaire.selectionner_piece(piece.id)
                                    st.rerun()
                            else:
                                st.button("‚òëÔ∏è S√©lect.", key=f"selected_fav_{piece.id}", disabled=True, use_container_width=True)
                        
                        with col3:
                            if st.button("üìã Copier", key=f"dup_fav_{piece.id}", use_container_width=True):
                                duplicate_piece(gestionnaire, piece)
                        
                        st.markdown("</div>", unsafe_allow_html=True)
    
    # Modal de d√©tail
    if st.session_state.get('show_piece_detail'):
        display_piece_detail_modal(gestionnaire)

def display_history(gestionnaire: GestionnairePiecesUnifie):
    """Affichage de l'historique des actions"""
    
    st.markdown("### üìú Historique des actions")
    
    # Options
    col1, col2, col3 = st.columns([2, 2, 1])
    
    with col1:
        limit = st.selectbox(
            "Nombre d'entr√©es",
            [50, 100, 200, 500],
            key="history_limit"
        )
    
    with col2:
        action_filter = st.selectbox(
            "Filtrer par action",
            ["Toutes", "add", "update", "delete", "select", "deselect", "archive", "favorite"],
            key="history_action_filter"
        )
    
    with col3:
        if st.button("üóëÔ∏è Effacer", key="clear_history"):
            if st.checkbox("Confirmer", key="confirm_clear_history"):
                st.session_state.pieces_history.clear()
                st.rerun()
    
    # R√©cup√©rer l'historique
    history = gestionnaire.get_historique(limit)
    
    # Filtrer si n√©cessaire
    if action_filter != "Toutes":
        history = [h for h in history if h['action'] == action_filter]
    
    if not history:
        st.info("Aucune action dans l'historique")
        return
    
    # Affichage
    for entry in reversed(history):  # Plus r√©cent en premier
        with st.container():
            col1, col2, col3 = st.columns([2, 3, 3])
            
            with col1:
                st.caption(entry['timestamp'].strftime('%d/%m/%Y %H:%M:%S'))
            
            with col2:
                # Ic√¥ne selon l'action
                action_icons = {
                    'add': '‚ûï',
                    'update': '‚úèÔ∏è',
                    'delete': 'üóëÔ∏è',
                    'delete_permanent': 'üíÄ',
                    'select': '‚úÖ',
                    'deselect': '‚ùå',
                    'archive': 'üì¶',
                    'restore': '‚ôªÔ∏è',
                    'favorite': '‚≠ê',
                    'unfavorite': '‚òÜ',
                    'move': 'üìÅ',
                    'add_tags': 'üè∑Ô∏è',
                    'remove_tags': 'üè∑Ô∏è‚ùå'
                }
                
                icon = action_icons.get(entry['action'], '‚ùì')
                st.write(f"{icon} **{entry['action']}**")
            
            with col3:
                # D√©tails de l'action
                details = entry.get('details', {})
                if details.get('nom'):
                    st.caption(f"Pi√®ce: {details['nom']}")
                elif details.get('tags'):
                    st.caption(f"Tags: {', '.join(details['tags'])}")
                elif details.get('to_dossier'):
                    st.caption(f"Vers: {details['to_dossier']}")
                else:
                    st.caption(str(details))
            
            st.divider()

def display_settings(gestionnaire: GestionnairePiecesUnifie):
    """Param√®tres et configuration"""
    
    st.markdown("### ‚öôÔ∏è Param√®tres")
    
    # Onglets de configuration
    tab1, tab2, tab3, tab4 = st.tabs(["G√©n√©ral", "Cat√©gories", "Import/Export", "Maintenance"])
    
    with tab1:
        st.markdown("#### Param√®tres g√©n√©raux")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Pr√©f√©rences d'affichage
            st.markdown("##### Affichage")
            
            default_view = st.selectbox(
                "Vue par d√©faut",
                ["Liste", "Cartes", "Tableau"],
                key="settings_default_view"
            )
            
            items_per_page = st.number_input(
                "√âl√©ments par page",
                min_value=10,
                max_value=100,
                value=20,
                step=10,
                key="settings_items_per_page"
            )
            
            show_archived = st.checkbox(
                "Afficher les pi√®ces archiv√©es par d√©faut",
                key="settings_show_archived"
            )
        
        with col2:
            # Param√®tres de s√©lection
            st.markdown("##### S√©lection")
            
            auto_select_important = st.checkbox(
                "S√©lectionner automatiquement les pi√®ces importantes (‚â•8/10)",
                key="settings_auto_select_important"
            )
            
            auto_select_pertinent = st.checkbox(
                "S√©lectionner automatiquement les pi√®ces tr√®s pertinentes (‚â•70%)",
                key="settings_auto_select_pertinent"
            )
            
            confirm_delete = st.checkbox(
                "Demander confirmation pour les suppressions",
                value=True,
                key="settings_confirm_delete"
            )
    
    with tab2:
        st.markdown("#### Gestion des cat√©gories")
        
        # Afficher les cat√©gories actuelles
        for cat_name, cat_config in gestionnaire.CATEGORIES_CONFIG.items():
            with st.expander(f"{cat_config['icon']} {cat_name}"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write("**Types de pi√®ces:**")
                    for type_piece in cat_config['types']:
                        st.write(f"‚Ä¢ {type_piece}")
                
                with col2:
                    st.write("**Mots-cl√©s de d√©tection:**")
                    for pattern in cat_config['patterns'][:5]:
                        st.write(f"‚Ä¢ {pattern}")
                    if len(cat_config['patterns']) > 5:
                        st.caption(f"... et {len(cat_config['patterns'])-5} autres")
        
        # Ajouter une cat√©gorie personnalis√©e
        st.markdown("##### Ajouter une cat√©gorie")
        
        with st.form("add_category_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                new_cat_name = st.text_input("Nom de la cat√©gorie")
                new_cat_icon = st.selectbox(
                    "Ic√¥ne",
                    ["üìÅ", "üìé", "üìå", "üóÇÔ∏è", "üóÉÔ∏è", "üóÑÔ∏è", "üìÇ", "üìë"]
                )
            
            with col2:
                new_cat_types = st.text_area(
                    "Types de pi√®ces (un par ligne)",
                    height=100
                )
                new_cat_color = st.color_picker("Couleur", "#808080")
            
            if st.form_submit_button("Ajouter la cat√©gorie"):
                st.info("Fonction √† impl√©menter : ajout de cat√©gorie personnalis√©e")
    
    with tab3:
        st.markdown("#### Import/Export")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("##### Export des donn√©es")
            
            export_format = st.selectbox(
                "Format d'export",
                ["JSON", "CSV", "Excel", "TXT (Bordereau)"],
                key="settings_export_format"
            )
            
            include_in_export = st.multiselect(
                "Inclure dans l'export",
                ["Pi√®ces actives", "Pi√®ces archiv√©es", "Pi√®ces supprim√©es", "Historique", "Statistiques"],
                default=["Pi√®ces actives"]
            )
            
            if st.button("üì§ Exporter toutes les donn√©es", key="export_all_data"):
                try:
                    content, filename, mime_type = gestionnaire.exporter_pieces(
                        format_export=export_format.lower().replace(" (bordereau)", "")
                    )
                    
                    st.download_button(
                        f"üíæ T√©l√©charger {filename}",
                        content if isinstance(content, bytes) else content.encode('utf-8'),
                        filename,
                        mime_type
                    )
                except Exception as e:
                    st.error(f"Erreur lors de l'export : {str(e)}")
        
        with col2:
            st.markdown("##### Import de donn√©es")
            
            uploaded_file = st.file_uploader(
                "Importer un fichier",
                type=['json', 'csv', 'xlsx'],
                key="import_file"
            )
            
            if uploaded_file:
                if uploaded_file.name.endswith('.json'):
                    try:
                        json_data = uploaded_file.read().decode('utf-8')
                        if st.button("üì• Importer", key="import_json"):
                            results = gestionnaire.importer_pieces_json(json_data)
                            st.success(f"‚úÖ Import termin√© : {results['success']} r√©ussies, {results['failed']} √©chou√©es")
                            if results['errors']:
                                with st.expander("Voir les erreurs"):
                                    for error in results['errors']:
                                        st.error(error)
                    except Exception as e:
                        st.error(f"Erreur lors de la lecture du fichier : {str(e)}")
    
    with tab4:
        st.markdown("#### Maintenance")
        
        stats = gestionnaire.get_statistiques()
        
        # Statistiques syst√®me
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Total pi√®ces", stats['total'])
            st.metric("Taille totale", gestionnaire.formater_taille_fichier(stats['taille_totale']))
        
        with col2:
            st.metric("Pi√®ces archiv√©es", len([p for p in st.session_state.pieces.values() if p.statut == 'archiv√©']))
            st.metric("Entr√©es historique", len(st.session_state.pieces_history))
        
        with col3:
            st.metric("Tags uniques", len(stats['tags_populaires']))
            st.metric("Favoris", stats['total_favoris'])
        
        st.markdown("##### Actions de maintenance")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üßπ Nettoyer les doublons", key="clean_duplicates"):
                st.info("Fonction √† impl√©menter : d√©tection et suppression des doublons")
            
            if st.button("üîß R√©indexer les pi√®ces", key="reindex_pieces"):
                gestionnaire._renumeroter_pieces_selectionnees()
                st.success("‚úÖ Pi√®ces r√©index√©es")
                st.rerun()
        
        with col2:
            if st.button("üìä Recalculer les statistiques", key="recalc_stats"):
                # Forcer le recalcul
                st.session_state.pieces_metadata['last_modified'] = datetime.now()
                st.success("‚úÖ Statistiques recalcul√©es")
                st.rerun()
            
            if st.button("üóëÔ∏è Vider la corbeille", key="empty_trash"):
                if st.checkbox("Confirmer la suppression d√©finitive", key="confirm_empty_trash"):
                    # Supprimer d√©finitivement les pi√®ces marqu√©es comme supprim√©es
                    to_delete = [p.id for p in st.session_state.pieces.values() if p.statut == 'supprim√©']
                    for piece_id in to_delete:
                        del st.session_state.pieces[piece_id]
                    st.success(f"‚úÖ {len(to_delete)} pi√®ces supprim√©es d√©finitivement")
                    st.rerun()

def display_import_modal(gestionnaire: GestionnairePiecesUnifie):
    """Modal d'import de fichiers"""
    
    with st.container():
        st.markdown("---")
        
        # En-t√™te
        col1, col2 = st.columns([4, 1])
        with col1:
            st.markdown("## üì§ Import de pi√®ces")
        with col2:
            if st.button("‚ùå Fermer", key="close_import_modal"):
                st.session_state.show_import_modal = False
                st.rerun()
        
        # Options d'import
        tab1, tab2, tab3 = st.tabs(["üìé Fichiers locaux", "üìÑ Documents existants", "üåê Import externe"])
        
        with tab1:
            st.markdown("#### Import de fichiers depuis votre ordinateur")
            
            uploaded_files = st.file_uploader(
                "S√©lectionnez des fichiers",
                accept_multiple_files=True,
                key="import_local_files"
            )
            
            if uploaded_files:
                st.info(f"{len(uploaded_files)} fichiers s√©lectionn√©s")
                
                # Options d'import
                col1, col2 = st.columns(2)
                
                with col1:
                    default_category = st.selectbox(
                        "Cat√©gorie par d√©faut",
                        list(gestionnaire.CATEGORIES_CONFIG.keys()),
                        key="import_default_category"
                    )
                    
                    default_importance = st.slider(
                        "Importance par d√©faut",
                        1, 10, 5,
                        key="import_default_importance"
                    )
                
                with col2:
                    auto_detect_type = st.checkbox(
                        "D√©tecter automatiquement le type",
                        value=True,
                        key="import_auto_detect"
                    )
                    
                    auto_select = st.checkbox(
                        "S√©lectionner automatiquement pour communication",
                        key="import_auto_select"
                    )
                
                if st.button("üì• Importer les fichiers", key="do_import_files", type="primary"):
                    progress = st.progress(0)
                    success_count = 0
                    
                    for i, file in enumerate(uploaded_files):
                        try:
                            # Cr√©er la pi√®ce
                            piece = PieceJuridique(
                                nom=file.name,
                                type_piece=gestionnaire.CATEGORIES_CONFIG[default_category]['types'][0],
                                categorie=default_category,
                                importance=default_importance,
                                taille=file.size,
                                chemin_fichier=file.name,
                                mime_type=file.type
                            )
                            
                            # Calculer le hash
                            content = file.read()
                            piece.hash_fichier = gestionnaire.calculer_hash_fichier(content)
                            file.seek(0)  # Remettre au d√©but
                            
                            # Extraction de texte si possible
                            if file.type and 'text' in file.type:
                                piece.contenu_extrait = content.decode('utf-8', errors='ignore')[:1000]
                            
                            # D√©tection automatique du type
                            if auto_detect_type:
                                piece.categorie = gestionnaire._determiner_categorie(piece)
                            
                            # Ajouter la pi√®ce
                            gestionnaire.ajouter_piece(piece, auto_select=auto_select)
                            success_count += 1
                            
                        except Exception as e:
                            st.error(f"Erreur avec {file.name}: {str(e)}")
                        
                        progress.progress((i + 1) / len(uploaded_files))
                    
                    st.success(f"‚úÖ {success_count}/{len(uploaded_files)} fichiers import√©s avec succ√®s!")
                    
                    if success_count > 0:
                        st.balloons()
                        import time
                        time.sleep(2)
                        st.session_state.show_import_modal = False
                        st.rerun()
        
        with tab2:
            st.markdown("#### Import depuis les documents d√©j√† charg√©s")
            
            # V√©rifier s'il y a des documents dans la session
            azure_docs = st.session_state.get('azure_documents', {})
            
            if not azure_docs:
                st.info("Aucun document disponible dans la session. Chargez d'abord des documents.")
            else:
                st.info(f"{len(azure_docs)} documents disponibles")
                
                # S√©lection des documents
                selected_docs = st.multiselect(
                    "S√©lectionnez les documents √† importer",
                    options=list(azure_docs.keys()),
                    format_func=lambda x: azure_docs[x].title if hasattr(azure_docs[x], 'title') else str(x),
                    key="import_select_docs"
                )
                
                if selected_docs:
                    if st.button("üì• Importer les documents s√©lectionn√©s", key="do_import_docs"):
                        success_count = 0
                        
                        for doc_id in selected_docs:
                            try:
                                doc = azure_docs[doc_id]
                                
                                # Cr√©er la pi√®ce depuis le document
                                piece = PieceJuridique(
                                    nom=doc.title if hasattr(doc, 'title') else f"Document {doc_id}",
                                    document_id=doc_id,
                                    description=doc.content[:500] if hasattr(doc, 'content') else "",
                                    contenu_extrait=doc.content[:1000] if hasattr(doc, 'content') else "",
                                    source=doc.source if hasattr(doc, 'source') else "Document import√©",
                                    metadata=doc.metadata if hasattr(doc, 'metadata') else {}
                                )
                                
                                # D√©terminer la cat√©gorie
                                piece.categorie = gestionnaire._determiner_categorie(piece)
                                
                                # Calculer la pertinence si analyse disponible
                                if hasattr(st.session_state, 'current_analysis'):
                                    piece.pertinence = gestionnaire._calculer_pertinence(
                                        piece, 
                                        st.session_state.current_analysis
                                    )
                                
                                # Ajouter
                                gestionnaire.ajouter_piece(piece, auto_select=True)
                                success_count += 1
                                
                            except Exception as e:
                                st.error(f"Erreur avec le document {doc_id}: {str(e)}")
                        
                        st.success(f"‚úÖ {success_count} documents import√©s avec succ√®s!")
                        st.session_state.show_import_modal = False
                        st.rerun()
        
        with tab3:
            st.markdown("#### Import depuis une source externe")
            st.info("Fonctionnalit√© √† venir : import depuis Azure, Google Drive, etc.")

def display_bulk_actions_modal(gestionnaire: GestionnairePiecesUnifie):
    """Modal d'actions group√©es"""
    
    with st.container():
        st.markdown("---")
        
        # En-t√™te
        col1, col2 = st.columns([4, 1])
        with col1:
            st.markdown("## ‚ö° Actions group√©es")
        with col2:
            if st.button("‚ùå Fermer", key="close_bulk_modal"):
                st.session_state.show_bulk_actions = False
                st.rerun()
        
        # S√©lection des pi√®ces
        selected_pieces = st.session_state.get('selected_pieces', [])
        
        if not selected_pieces:
            st.warning("Aucune pi√®ce s√©lectionn√©e. S√©lectionnez des pi√®ces depuis la vue principale.")
            return
        
        st.info(f"{len(selected_pieces)} pi√®ces s√©lectionn√©es")
        
        # Actions disponibles
        tab1, tab2, tab3, tab4 = st.tabs(["üìù Modification", "üìÅ Organisation", "üè∑Ô∏è Tags", "üóëÔ∏è Suppression"])
        
        with tab1:
            st.markdown("#### Modification en masse")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Changement de statut
                new_status = st.selectbox(
                    "Nouveau statut",
                    ["Ne pas modifier"] + [v['label'] for k, v in gestionnaire.STATUTS_CONFIG.items()],
                    key="bulk_status"
                )
                
                if new_status != "Ne pas modifier":
                    status_key = [k for k, v in gestionnaire.STATUTS_CONFIG.items() if v['label'] == new_status][0]
                    if st.button("üîÑ Appliquer le statut", key="apply_bulk_status"):
                        results = gestionnaire.operations_groupees(selected_pieces, 'archive' if status_key == 'archiv√©' else 'restore')
                        st.success(f"‚úÖ Statut modifi√© pour {results['success']} pi√®ces")
                        st.rerun()
            
            with col2:
                # Changement d'importance
                new_importance = st.slider(
                    "Nouvelle importance",
                    0, 10, 5,
                    help="0 = Ne pas modifier",
                    key="bulk_importance"
                )
                
                if new_importance > 0:
                    if st.button("‚≠ê Appliquer l'importance", key="apply_bulk_importance"):
                        results = gestionnaire.operations_groupees(
                            selected_pieces, 
                            'importance', 
                            importance=new_importance
                        )
                        st.success(f"‚úÖ Importance modifi√©e pour {results['success']} pi√®ces")
                        st.rerun()
        
        with tab2:
            st.markdown("#### Organisation")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # S√©lection pour communication
                if st.button("‚úÖ S√©lectionner pour communication", key="bulk_select_comm", use_container_width=True):
                    results = gestionnaire.operations_groupees(selected_pieces, 'select')
                    st.success(f"‚úÖ {results['success']} pi√®ces s√©lectionn√©es")
                    st.rerun()
                
                if st.button("‚ùå Retirer de la s√©lection", key="bulk_deselect_comm", use_container_width=True):
                    results = gestionnaire.operations_groupees(selected_pieces, 'deselect')
                    st.success(f"‚úÖ {results['success']} pi√®ces retir√©es")
                    st.rerun()
            
            with col2:
                # D√©placement vers dossier
                dossiers = ["Aucun"] + list(st.session_state.get('dossiers', {}).keys())
                new_dossier = st.selectbox("D√©placer vers", dossiers, key="bulk_dossier")
                
                if st.button("üìÅ D√©placer", key="bulk_move", use_container_width=True):
                    dossier_id = None if new_dossier == "Aucun" else new_dossier
                    results = gestionnaire.operations_groupees(
                        selected_pieces, 
                        'move', 
                        dossier_id=dossier_id
                    )
                    st.success(f"‚úÖ {results['success']} pi√®ces d√©plac√©es")
                    st.rerun()
        
        with tab3:
            st.markdown("#### Gestion des tags")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Ajouter des tags
                st.markdown("##### Ajouter des tags")
                
                # Tags existants
                existing_tags = [tag for tag, _ in gestionnaire.get_all_tags()]
                selected_existing_tags = st.multiselect(
                    "Tags existants",
                    existing_tags,
                    key="bulk_existing_tags"
                )
                
                # Nouveaux tags
                new_tags_input = st.text_input(
                    "Nouveaux tags (s√©par√©s par des virgules)",
                    key="bulk_new_tags"
                )
                
                if st.button("‚ûï Ajouter les tags", key="bulk_add_tags"):
                    all_tags = selected_existing_tags + [t.strip() for t in new_tags_input.split(',') if t.strip()]
                    if all_tags:
                        results = gestionnaire.operations_groupees(
                            selected_pieces,
                            'tag',
                            tags=all_tags
                        )
                        st.success(f"‚úÖ Tags ajout√©s √† {results['success']} pi√®ces")
                        st.rerun()
            
            with col2:
                # Retirer des tags
                st.markdown("##### Retirer des tags")
                
                # Collecter tous les tags des pi√®ces s√©lectionn√©es
                all_piece_tags = set()
                for piece_id in selected_pieces:
                    piece = gestionnaire.get_piece(piece_id)
                    if piece:
                        all_piece_tags.update(piece.tags)
                
                if all_piece_tags:
                    tags_to_remove = st.multiselect(
                        "Tags √† retirer",
                        list(all_piece_tags),
                        key="bulk_remove_tags"
                    )
                    
                    if tags_to_remove and st.button("‚ûñ Retirer les tags", key="bulk_do_remove_tags"):
                        results = gestionnaire.operations_groupees(
                            selected_pieces,
                            'untag',
                            tags=tags_to_remove
                        )
                        st.success(f"‚úÖ Tags retir√©s de {results['success']} pi√®ces")
                        st.rerun()
                else:
                    st.info("Aucun tag commun dans la s√©lection")
        
        with tab4:
            st.markdown("#### Suppression")
            
            st.warning("‚ö†Ô∏è Attention : ces actions sont irr√©versibles!")
            
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("üì¶ Archiver la s√©lection", key="bulk_archive", use_container_width=True):
                    results = gestionnaire.operations_groupees(selected_pieces, 'archive')
                    st.success(f"‚úÖ {results['success']} pi√®ces archiv√©es")
                    st.session_state.selected_pieces = []
                    st.rerun()
            
            with col2:
                if st.button("üóëÔ∏è Supprimer d√©finitivement", key="bulk_delete", use_container_width=True):
                    if st.checkbox("Je confirme vouloir supprimer d√©finitivement ces pi√®ces", key="confirm_bulk_delete"):
                        results = gestionnaire.operations_groupees(
                            selected_pieces,
                            'delete',
                            permanent=True
                        )
                        st.success(f"‚úÖ {results['success']} pi√®ces supprim√©es")
                        st.session_state.selected_pieces = []
                        st.rerun()

def display_piece_detail_modal(gestionnaire: GestionnairePiecesUnifie):
    """Modal de d√©tail d'une pi√®ce"""
    
    piece_id = st.session_state.get('current_piece_id')
    if not piece_id:
        return
    
    piece = gestionnaire.get_piece(piece_id)
    if not piece:
        st.error("Pi√®ce introuvable")
        return
    
    with st.container():
        st.markdown("---")
        
        # En-t√™te
        col1, col2 = st.columns([4, 1])
        with col1:
            cat_config = gestionnaire.CATEGORIES_CONFIG[piece.categorie]
            st.markdown(f"## {cat_config['icon']} {piece.nom}")
        with col2:
            if st.button("‚ùå Fermer", key="close_detail_modal"):
                st.session_state.show_piece_detail = False
                st.rerun()
        
        # Informations principales
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Type", piece.type_piece)
            st.metric("Cat√©gorie", piece.categorie)
            statut_config = gestionnaire.STATUTS_CONFIG[piece.statut]
            st.metric("Statut", f"{statut_config['icon']} {statut_config['label']}")
        
        with col2:
            st.metric("Importance", f"{piece.importance}/10")
            st.metric("Pertinence", f"{piece.pertinence:.0%}")
            st.metric("Num√©ro d'ordre", piece.numero_ordre)
        
        with col3:
            st.metric("Date d'ajout", piece.date_ajout.strftime('%d/%m/%Y'))
            if piece.date_document:
                st.metric("Date document", piece.date_document.strftime('%d/%m/%Y'))
            if piece.taille:
                st.metric("Taille", gestionnaire.formater_taille_fichier(piece.taille))
        
        # Onglets d√©taill√©s
        tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìÑ Contenu", "üè∑Ô∏è Tags & Notes", "üìä M√©tadonn√©es", "üîó Relations", "üìú Historique"])
        
        with tab1:
            if piece.description:
                st.markdown("#### Description")
                st.write(piece.description)
            
            if piece.contenu_extrait:
                st.markdown("#### Extrait du contenu")
                st.text_area("", piece.contenu_extrait, height=200, disabled=True)
            
            if piece.source:
                st.markdown("#### Source")
                st.write(piece.source)
        
        with tab2:
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("#### Tags")
                if piece.tags:
                    for tag in piece.tags:
                        st.write(f"üè∑Ô∏è {tag}")
                else:
                    st.info("Aucun tag")
            
            with col2:
                st.markdown("#### Notes")
                if piece.notes:
                    st.write(piece.notes)
                else:
                    st.info("Aucune note")
        
        with tab3:
            st.markdown("#### M√©tadonn√©es syst√®me")
            
            metadata_df = pd.DataFrame([
                {"Propri√©t√©": "ID", "Valeur": piece.id},
                {"Propri√©t√©": "Document ID", "Valeur": piece.document_id or "N/A"},
                {"Propri√©t√©": "Version", "Valeur": piece.version},
                {"Propri√©t√©": "Hash fichier", "Valeur": piece.hash_fichier[:16] + "..." if piece.hash_fichier else "N/A"},
                {"Propri√©t√©": "Type MIME", "Valeur": piece.mime_type or "N/A"},
                {"Propri√©t√©": "Modifi√© par", "Valeur": piece.modifie_par or "N/A"},
                {"Propri√©t√©": "Date modification", "Valeur": piece.date_modification.strftime('%d/%m/%Y %H:%M') if piece.date_modification else "N/A"}
            ])
            
            st.dataframe(metadata_df, hide_index=True, use_container_width=True)
            
            if piece.metadata:
                st.markdown("#### M√©tadonn√©es personnalis√©es")
                st.json(piece.metadata)
        
        with tab4:
            st.markdown("#### Pi√®ces li√©es")
            if piece.pieces_liees:
                for linked_id in piece.pieces_liees:
                    linked_piece = gestionnaire.get_piece(linked_id)
                    if linked_piece:
                        st.write(f"üîó {linked_piece.nom}")
            else:
                st.info("Aucune pi√®ce li√©e")
            
            if piece.dossier_id:
                st.markdown("#### Dossier")
                st.write(f"üìÅ {piece.dossier_id}")
        
        with tab5:
            if piece.versions_precedentes:
                st.markdown("#### Versions pr√©c√©dentes")
                for version in piece.versions_precedentes:
                    with st.expander(f"Version {version['version']} - {version['date']}"):
                        st.write(f"**Nom:** {version.get('nom', 'N/A')}")
                        st.write(f"**Type:** {version.get('type_piece', 'N/A')}")
                        st.write(f"**Modifi√© par:** {version.get('modifie_par', 'N/A')}")
                        if version.get('description'):
                            st.write(f"**Description:** {version['description']}")
            else:
                st.info("Aucune version pr√©c√©dente")
        
        # Actions
        st.markdown("---")
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            if st.button("‚úèÔ∏è √âditer", key="edit_from_detail", use_container_width=True):
                st.session_state.edit_piece_id = piece_id
                st.session_state.show_edit_modal = True
                st.session_state.show_piece_detail = False
        
        with col2:
            if piece.statut != 's√©lectionn√©':
                if st.button("‚úÖ S√©lectionner", key="select_from_detail", use_container_width=True):
                    gestionnaire.selectionner_piece(piece_id)
                    st.rerun()
            else:
                if st.button("‚ùå D√©s√©lectionner", key="deselect_from_detail", use_container_width=True):
                    gestionnaire.deselectionner_piece(piece_id)
                    st.rerun()
        
        with col3:
            is_fav = piece_id in st.session_state.pieces_favoris
            if st.button("‚≠ê" if is_fav else "‚òÜ Favori", key="fav_from_detail", use_container_width=True):
                gestionnaire.toggle_favori(piece_id)
                st.rerun()
        
        with col4:
            if st.button("üìã Dupliquer", key="dup_from_detail", use_container_width=True):
                duplicate_piece(gestionnaire, piece)
        
        with col5:
            if st.button("üóëÔ∏è Supprimer", key="del_from_detail", use_container_width=True):
                if st.checkbox("Confirmer", key="confirm_del_detail"):
                    gestionnaire.supprimer_piece(piece_id, permanent=True)
                    st.session_state.show_piece_detail = False
                    st.rerun()
    
    # Modal d'√©dition si demand√©e
    if st.session_state.get('show_edit_modal'):
        display_edit_piece_modal(gestionnaire)

def display_edit_piece_modal(gestionnaire: GestionnairePiecesUnifie):
    """Modal d'√©dition d'une pi√®ce"""
    
    piece_id = st.session_state.get('edit_piece_id')
    if not piece_id:
        return
    
    piece = gestionnaire.get_piece(piece_id)
    if not piece:
        st.error("Pi√®ce introuvable")
        return
    
    with st.container():
        st.markdown("---")
        
        # En-t√™te
        col1, col2 = st.columns([4, 1])
        with col1:
            st.markdown(f"## ‚úèÔ∏è √âditer : {piece.nom}")
        with col2:
            if st.button("‚ùå Fermer", key="close_edit_modal"):
                st.session_state.show_edit_modal = False
                st.rerun()
        
        # Formulaire d'√©dition
        with st.form("edit_piece_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                nom = st.text_input("Nom", value=piece.nom)
                
                categorie = st.selectbox(
                    "Cat√©gorie",
                    list(gestionnaire.CATEGORIES_CONFIG.keys()),
                    index=list(gestionnaire.CATEGORIES_CONFIG.keys()).index(piece.categorie)
                )
                
                type_piece = st.selectbox(
                    "Type",
                    gestionnaire.CATEGORIES_CONFIG[categorie]['types'],
                    index=gestionnaire.CATEGORIES_CONFIG[categorie]['types'].index(piece.type_piece) 
                    if piece.type_piece in gestionnaire.CATEGORIES_CONFIG[categorie]['types'] else 0
                )
                
                importance = st.slider("Importance", 1, 10, piece.importance)
            
            with col2:
                source = st.text_input("Source", value=piece.source)
                
                statut = st.selectbox(
                    "Statut",
                    list(gestionnaire.STATUTS_CONFIG.keys()),
                    format_func=lambda x: gestionnaire.STATUTS_CONFIG[x]['label'],
                    index=list(gestionnaire.STATUTS_CONFIG.keys()).index(piece.statut)
                )
                
                pertinence = st.slider("Pertinence", 0.0, 1.0, piece.pertinence, format="%.0%%")
                
                create_version = st.checkbox(
                    "Cr√©er une version",
                    value=True,
                    help="Enregistre l'√©tat actuel avant modification"
                )
            
            # Description
            description = st.text_area(
                "Description",
                value=piece.description or "",
                height=100
            )
            
            # Notes
            notes = st.text_area(
                "Notes",
                value=piece.notes,
                height=100
            )
            
            # Tags
            current_tags = ", ".join(piece.tags)
            tags_input = st.text_input(
                "Tags (s√©par√©s par des virgules)",
                value=current_tags
            )
            
            # Bouton de soumission
            submitted = st.form_submit_button(
                "üíæ Enregistrer les modifications",
                use_container_width=True,
                type="primary"
            )
            
            if submitted:
                try:
                    # Pr√©parer les modifications
                    modifications = {
                        'nom': nom,
                        'type_piece': type_piece,
                        'categorie': categorie,
                        'description': description,
                        'source': source,
                        'statut': statut,
                        'importance': importance,
                        'pertinence': pertinence,
                        'notes': notes,
                        'tags': [t.strip() for t in tags_input.split(',') if t.strip()],
                        'modifie_par': st.session_state.get('current_user', 'Utilisateur')
                    }
                    
                    # Appliquer les modifications
                    gestionnaire.modifier_piece(piece_id, create_version=create_version, **modifications)
                    
                    st.success("‚úÖ Modifications enregistr√©es!")
                    import time
                    time.sleep(1)
                    
                    st.session_state.show_edit_modal = False
                    st.rerun()
                    
                except Exception as e:
                    st.error(f"‚ùå Erreur : {str(e)}")

def display_floating_actions(gestionnaire: GestionnairePiecesUnifie):
    """Barre d'actions flottante pour la s√©lection"""
    
    selected_count = len(st.session_state.get('selected_pieces', []))
    
    if selected_count > 0:
        # Cr√©er une barre flottante
        st.markdown(
            f"""
            <div style="position: fixed; bottom: 20px; right: 20px; 
                        background-color: #f0f2f6; padding: 15px; 
                        border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                        z-index: 1000;">
                <h4>{selected_count} pi√®ces s√©lectionn√©es</h4>
            </div>
            """,
            unsafe_allow_html=True
        )
        
        # Actions dans un expander
        with st.expander(f"üéØ Actions sur {selected_count} pi√®ces", expanded=True):
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                if st.button("‚úÖ S√©lectionner pour comm.", key="float_select_comm"):
                    results = gestionnaire.operations_groupees(
                        st.session_state.selected_pieces,
                        'select'
                    )
                    st.success(f"{results['success']} pi√®ces s√©lectionn√©es")
                    st.rerun()
            
            with col2:
                if st.button("üì¶ Archiver", key="float_archive"):
                    results = gestionnaire.operations_groupees(
                        st.session_state.selected_pieces,
                        'archive'
                    )
                    st.success(f"{results['success']} pi√®ces archiv√©es")
                    st.session_state.selected_pieces = []
                    st.rerun()
            
            with col3:
                if st.button("üè∑Ô∏è G√©rer tags", key="float_tags"):
                    st.session_state.show_bulk_actions = True
            
            with col4:
                if st.button("‚ùå D√©s√©lectionner tout", key="float_clear"):
                    st.session_state.selected_pieces = []
                    st.rerun()

def display_export_modal(gestionnaire: GestionnairePiecesUnifie, selection_only: bool = False):
    """Modal d'export"""
    
    with st.container():
        st.markdown("---")
        
        # En-t√™te
        col1, col2 = st.columns([4, 1])
        with col1:
            st.markdown("## üì§ Export de pi√®ces")
        with col2:
            if st.button("‚ùå Fermer", key="close_export_modal"):
                st.session_state.show_export_modal = False
                st.session_state.show_export_selection = False
                st.rerun()
        
        # Options d'export
        col1, col2 = st.columns(2)
        
        with col1:
            format_export = st.selectbox(
                "Format d'export",
                ["json", "csv", "excel", "txt"],
                format_func=lambda x: {
                    "json": "JSON (complet)",
                    "csv": "CSV (tableur)",
                    "excel": "Excel (multi-feuilles)",
                    "txt": "TXT (bordereau)"
                }[x],
                key="export_format"
            )
        
        with col2:
            if selection_only:
                pieces_to_export = gestionnaire.get_pieces_selectionnees()
                st.metric("Pi√®ces √† exporter", len(pieces_to_export))
            else:
                export_scope = st.radio(
                    "√âtendue",
                    ["S√©lection communication", "S√©lection UI", "Toutes les pi√®ces"],
                    key="export_scope"
                )
                
                if export_scope == "S√©lection communication":
                    pieces_to_export = gestionnaire.get_pieces_selectionnees()
                elif export_scope == "S√©lection UI":
                    piece_ids = st.session_state.get('selected_pieces', [])
                    pieces_to_export = [gestionnaire.get_piece(pid) for pid in piece_ids if gestionnaire.get_piece(pid)]
                else:
                    pieces_to_export = None  # Toutes
        
        # Aper√ßu
        if format_export == "txt":
            st.markdown("### üìÑ Aper√ßu du bordereau")
            format_bordereau = st.radio(
                "Style",
                ["detaille", "simple", "compact"],
                format_func=lambda x: {
                    "detaille": "D√©taill√©",
                    "simple": "Simple",
                    "compact": "Compact"
                }[x],
                horizontal=True,
                key="export_bordereau_style"
            )
            
            piece_ids = [p.id for p in pieces_to_export] if pieces_to_export else None
            preview = gestionnaire.generer_bordereau(format_bordereau, piece_ids)
            st.text_area("", preview[:1000] + "..." if len(preview) > 1000 else preview, height=300, disabled=True)
        
        # Export
        if st.button("üíæ G√©n√©rer l'export", key="do_export", type="primary", use_container_width=True):
            try:
                piece_ids = [p.id for p in pieces_to_export] if pieces_to_export else None
                
                content, filename, mime_type = gestionnaire.exporter_pieces(piece_ids, format_export)
                
                # Bouton de t√©l√©chargement
                st.download_button(
                    f"‚¨áÔ∏è T√©l√©charger {filename}",
                    content if isinstance(content, bytes) else content.encode('utf-8'),
                    filename,
                    mime_type,
                    use_container_width=True,
                    key="download_export"
                )
                
                st.success("‚úÖ Export g√©n√©r√© avec succ√®s!")
                
            except Exception as e:
                st.error(f"‚ùå Erreur lors de l'export : {str(e)}")

# ========================= FONCTIONS D'INT√âGRATION =========================

def process_piece_selection_request(query: str, analysis: dict):
    """Point d'entr√©e pour la s√©lection de pi√®ces depuis l'analyse juridique"""
    
    st.markdown("### üìã S√©lection de pi√®ces pour communication")
    
    # Initialiser le gestionnaire
    if 'gestionnaire_pieces' not in st.session_state:
        st.session_state.gestionnaire_pieces = GestionnairePiecesUnifie()
    
    gestionnaire = st.session_state.gestionnaire_pieces
    
    # Stocker l'analyse courante pour le calcul de pertinence
    st.session_state.current_analysis = analysis
    
    # Interface en deux colonnes
    col_left, col_right = st.columns([1, 1])
    
    with col_left:
        st.markdown("#### üìÑ Documents disponibles")
        _afficher_documents_disponibles_analyse(gestionnaire, analysis)
    
    with col_right:
        st.markdown("#### ‚úÖ Pi√®ces s√©lectionn√©es")
        _afficher_pieces_selectionnees_analyse(gestionnaire)
    
    # Barre d'actions
    _afficher_barre_actions_analyse(gestionnaire)

def _afficher_documents_disponibles_analyse(gestionnaire: GestionnairePiecesUnifie, analysis: dict):
    """Affiche les documents disponibles pour l'analyse"""
    
    # Collecter les documents pertinents
    documents = collect_available_documents_for_analysis(analysis)
    
    # Filtres rapides
    col1, col2 = st.columns(2)
    with col1:
        filtre_texte = st.text_input(
            "üîç Rechercher",
            placeholder="Titre, contenu...",
            key="filtre_docs_analyse"
        )
    
    with col2:
        pertinence_min = st.slider(
            "Pertinence min",
            0.0, 1.0, 0.3,
            format="%.0%%",
            key="pertinence_min_analyse"
        )
    
    # Convertir et filtrer les documents
    pieces_disponibles = []
    
    for doc in documents:
        # Cr√©er une pi√®ce temporaire pour l'affichage
        piece = PieceJuridique(
            nom=doc.get('title', 'Sans titre'),
            description=doc.get('content', '')[:500],
            source=doc.get('source', ''),
            document_id=doc.get('id'),
            metadata=doc.get('metadata', {})
        )
        
        # Calculer la pertinence
        piece.pertinence = gestionnaire._calculer_pertinence(piece, analysis)
        
        # D√©terminer la cat√©gorie
        piece.categorie = gestionnaire._determiner_categorie(piece)
        
        # Filtrer
        if piece.pertinence >= pertinence_min:
            if not filtre_texte or filtre_texte.lower() in (piece.nom + ' ' + piece.description).lower():
                pieces_disponibles.append((piece, doc))
    
    # Trier par pertinence
    pieces_disponibles.sort(key=lambda x: x[0].pertinence, reverse=True)
    
    # Afficher
    for piece, doc in pieces_disponibles[:20]:
        with st.container():
            col1, col2 = st.columns([4, 1])
            
            with col1:
                cat_config = gestionnaire.CATEGORIES_CONFIG[piece.categorie]
                
                # V√©rifier si d√©j√† s√©lectionn√©
                is_selected = any(p.document_id == piece.document_id for p in gestionnaire.get_pieces_selectionnees())
                
                if is_selected:
                    st.markdown(f"**‚úÖ {cat_config['icon']} {piece.nom}**")
                else:
                    st.markdown(f"**{cat_config['icon']} {piece.nom}**")
                
                # Indicateur de pertinence
                if piece.pertinence >= 0.7:
                    st.caption(f"üü¢ Tr√®s pertinent ({piece.pertinence:.0%})")
                elif piece.pertinence >= 0.4:
                    st.caption(f"üü° Pertinent ({piece.pertinence:.0%})")
                else:
                    st.caption(f"üî¥ Peu pertinent ({piece.pertinence:.0%})")
                
                # Aper√ßu
                if piece.description:
                    with st.expander("Aper√ßu", expanded=False):
                        st.text(piece.description)
            
            with col2:
                if not is_selected:
                    if st.button("‚ûï", key=f"add_analyse_{piece.document_id}", help="Ajouter"):
                        # Cr√©er la pi√®ce compl√®te
                        piece.type_piece = gestionnaire.CATEGORIES_CONFIG[piece.categorie]['types'][0]
                        piece_id = gestionnaire.ajouter_piece(piece, auto_select=True)
                        st.rerun()
                else:
                    st.caption("‚òëÔ∏è S√©lectionn√©")
            
            st.divider()
    
    if len(pieces_disponibles) > 20:
        st.info(f"... et {len(pieces_disponibles) - 20} autres documents")

def _afficher_pieces_selectionnees_analyse(gestionnaire: GestionnairePiecesUnifie):
    """Affiche les pi√®ces s√©lectionn√©es pour l'analyse"""
    
    pieces_selectionnees = gestionnaire.get_pieces_selectionnees()
    
    if not pieces_selectionnees:
        st.info("Aucune pi√®ce s√©lectionn√©e")
        return
    
    # Stats rapides
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Total", len(pieces_selectionnees))
    with col2:
        pertinence_moy = sum(p.pertinence for p in pieces_selectionnees) / len(pieces_selectionnees)
        st.metric("Pertinence moy.", f"{pertinence_moy:.0%}")
    
    # Grouper par cat√©gorie
    pieces_par_cat = gestionnaire.get_pieces_par_categorie(selected_only=True)
    
    for categorie, pieces in pieces_par_cat.items():
        cat_config = gestionnaire.CATEGORIES_CONFIG[categorie]
        
        st.markdown(f"**{cat_config['icon']} {categorie} ({len(pieces)})**")
        
        for piece in pieces:
            with st.container():
                col1, col2 = st.columns([4, 1])
                
                with col1:
                    st.write(f"#{piece.numero_ordre} - {piece.nom}")
                    if piece.notes:
                        st.caption(f"üìù {piece.notes}")
                
                with col2:
                    if st.button("‚ùå", key=f"remove_analyse_{piece.id}", help="Retirer"):
                        gestionnaire.deselectionner_piece(piece.id)
                        st.rerun()
                
                st.divider()

def _afficher_barre_actions_analyse(gestionnaire: GestionnairePiecesUnifie):
    """Barre d'actions pour l'analyse"""
    
    pieces_selectionnees = gestionnaire.get_pieces_selectionnees()
    
    if not pieces_selectionnees:
        return
    
    st.markdown("---")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üìä Cr√©er bordereau", key="bordereau_analyse"):
            with st.expander("Options", expanded=True):
                format_type = st.radio(
                    "Format",
                    ["detaille", "simple"],
                    key="format_bordereau_analyse"
                )
                
                bordereau = gestionnaire.generer_bordereau(format_type)
                
                st.text_area("Aper√ßu", bordereau, height=300)
                
                st.download_button(
                    "üíæ T√©l√©charger",
                    bordereau,
                    f"bordereau_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                    "text/plain"
                )
    
    with col2:
        if st.button("üì§ Exporter", key="export_analyse"):
            st.session_state.show_export_selection = True
    
    with col3:
        if st.button("üìù Synth√©tiser", key="synthesize_analyse"):
            st.session_state.action_requested = "synthesis"
            st.session_state.synthesis_pieces = pieces_selectionnees
            st.rerun()
    
    with col4:
        if st.button("‚úÖ Valider", key="validate_analyse"):
            st.success(f"‚úÖ {len(pieces_selectionnees)} pi√®ces valid√©es pour communication")
            st.balloons()
    
    # Modal d'export
    if st.session_state.get('show_export_selection'):
        display_export_modal(gestionnaire, selection_only=True)

def collect_available_documents_for_analysis(analysis: dict) -> List[Dict[str, Any]]:
    """Collecte les documents disponibles pour une analyse"""
    documents = []
    
    # Documents depuis Azure
    azure_docs = st.session_state.get('azure_documents', {})
    for doc_id, doc in azure_docs.items():
        doc_dict = {
            'id': doc_id,
            'title': getattr(doc, 'title', f'Document {doc_id}'),
            'content': getattr(doc, 'content', ''),
            'source': getattr(doc, 'source', 'Azure'),
            'metadata': getattr(doc, 'metadata', {})
        }
        documents.append(doc_dict)
    
    # Documents depuis la recherche si r√©f√©rence
    if analysis.get('reference'):
        ref_docs = search_documents_by_reference(analysis['reference'])
        documents.extend(ref_docs)
    
    # D√©dupliquer
    seen_ids = set()
    unique_docs = []
    for doc in documents:
        if doc['id'] not in seen_ids:
            seen_ids.add(doc['id'])
            unique_docs.append(doc)
    
    return unique_docs

def search_documents_by_reference(reference: str) -> List[Dict[str, Any]]:
    """Recherche des documents par r√©f√©rence"""
    results = []
    ref_clean = reference.replace('@', '').strip().lower()
    
    # Recherche dans Azure Search si disponible
    search_manager = st.session_state.get('azure_search_manager')
    if search_manager and hasattr(search_manager, 'is_connected') and search_manager.is_connected():
        try:
            azure_results = search_manager.search(reference, top=20)
            for result in azure_results:
                results.append({
                    'id': result.get('id', str(uuid.uuid4())),
                    'title': result.get('title', 'Sans titre'),
                    'content': result.get('content', ''),
                    'source': 'Azure Search',
                    'metadata': result.get('metadata', {})
                })
        except Exception as e:
            st.warning(f"Erreur lors de la recherche : {str(e)}")
    
    return results

def show_pieces_management_tab():
    """Affiche l'onglet de gestion des pi√®ces"""
    display_pieces_interface()

def init_pieces_manager():
    """Initialise le gestionnaire de pi√®ces au d√©marrage"""
    if 'gestionnaire_pieces' not in st.session_state:
        st.session_state.gestionnaire_pieces = GestionnairePiecesUnifie()
    
    # Migration des anciennes donn√©es si n√©cessaire
    if 'pieces_selectionnees' in st.session_state and isinstance(st.session_state.pieces_selectionnees, dict):
        # Si c'est l'ancien format, migrer
        gestionnaire = st.session_state.gestionnaire_pieces
        
        for piece_id, old_piece in st.session_state.pieces_selectionnees.items():
            if not isinstance(old_piece, PieceJuridique):
                # Convertir l'ancien format
                new_piece = PieceJuridique(
                    id=piece_id,
                    nom=getattr(old_piece, 'titre', getattr(old_piece, 'nom', 'Sans nom')),
                    type_piece=getattr(old_piece, 'type_piece', 'Document'),
                    categorie=getattr(old_piece, 'categorie', 'Autre'),
                    description=getattr(old_piece, 'description', ''),
                    source=getattr(old_piece, 'source', ''),
                    statut='s√©lectionn√©',
                    pertinence=getattr(old_piece, 'pertinence', 0.5),
                    notes=getattr(old_piece, 'notes', '')
                )
                
                # Ajouter au nouveau syst√®me
                gestionnaire.ajouter_piece(new_piece, auto_select=True)
    
    return st.session_state.gestionnaire_pieces

# ========================= DOCUMENTATION =========================

"""
MODULE UNIFI√â DE GESTION DES PI√àCES JURIDIQUES
==============================================

Ce module fusionne les fonctionnalit√©s de s√©lection de pi√®ces pour communication
et de gestion compl√®te des pi√®ces de proc√©dure.

UTILISATION PRINCIPALE
---------------------

1. Initialisation au d√©marrage de l'application :
   ```python
   from modules.pieces_manager import init_pieces_manager
   
   # Dans la fonction main() de l'application
   init_pieces_manager()
   ```

2. Int√©gration dans l'analyse juridique :
   ```python
   from modules.pieces_manager import process_piece_selection_request
   
   # Apr√®s une analyse juridique
   if analysis.get('action_type') == 'piece_selection':
       process_piece_selection_request(query, analysis)
   ```

3. Onglet de gestion compl√®te :
   ```python
   from modules.pieces_manager import show_pieces_management_tab
   
   # Dans les tabs de l'interface principale
   with tab_pieces:
       show_pieces_management_tab()
   ```

FONCTIONNALIT√âS PRINCIPALES
--------------------------

1. Gestion unifi√©e des pi√®ces :
   - Cr√©ation, modification, suppression
   - Cat√©gorisation automatique
   - Calcul de pertinence
   - Gestion des versions

2. S√©lection pour communication :
   - Interface d√©di√©e pour s√©lectionner des pi√®ces
   - G√©n√©ration de bordereaux
   - Export dans plusieurs formats

3. Organisation avanc√©e :
   - Tags et favoris
   - Dossiers et relations
   - Recherche multicrit√®res
   - Actions group√©es

4. Statistiques et historique :
   - Tableau de bord complet
   - Historique des actions
   - Export des donn√©es

STRUCTURE DES DONN√âES
--------------------

La pi√®ce juridique (PieceJuridique) contient :
- Identifiants : id, document_id
- Informations : nom, type, cat√©gorie, description
- Dates : ajout, modification, document, s√©lection
- √âtat : statut, importance, pertinence
- Fichier : chemin, taille, hash, mime_type
- Relations : tags, notes, pi√®ces li√©es, dossier
- Versioning : version, historique

PERSONNALISATION
---------------

Pour ajouter des cat√©gories personnalis√©es, modifier CATEGORIES_CONFIG :
```python
gestionnaire.CATEGORIES_CONFIG['Ma Cat√©gorie'] = {
    'patterns': ['mot1', 'mot2'],
    'types': ['Type 1', 'Type 2'],
    'icon': 'üìÅ',
    'color': '#123456'
}
```

INT√âGRATION AVEC AZURE
---------------------

Le module s'int√®gre automatiquement avec :
- Azure Documents (session)
- Azure Search Manager
- Syst√®me de fichiers local

"""

# Point d'entr√©e
if __name__ == "__main__":
    display_pieces_interface()