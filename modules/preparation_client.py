# modules/preparation_client.py
"""Module de pr√©paration des clients pour auditions et interrogatoires"""

import streamlit as st
from datetime import datetime
from typing import List, Dict, Any, Optional, Tuple
import re
from collections import defaultdict

from config.app_config import LLMProvider
from managers.multi_llm_manager import MultiLLMManager
from models.dataclasses import PreparationClientResult
from utils.helpers import extract_section

def process_preparation_client_request(query: str, analysis: dict):
    """Traite une demande de pr√©paration client"""
    
    st.markdown("### üë• Pr√©paration du client")
    
    # Configuration de la pr√©paration
    config = display_preparation_config_interface(analysis)
    
    if st.button("üöÄ G√©n√©rer la pr√©paration", key="generate_preparation", type="primary"):
        with st.spinner("üìã G√©n√©ration de la pr√©paration en cours..."):
            result = generate_client_preparation(config, analysis)
            
            if result:
                st.session_state.preparation_client_result = result
                display_preparation_results(result)

def display_preparation_config_interface(analysis: dict) -> dict:
    """Interface de configuration pour la pr√©paration"""
    
    config = {}
    
    # Configuration en colonnes
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # Type de pr√©paration
        config['prep_type'] = st.selectbox(
            "üìã Type de pr√©paration",
            ["audition", "interrogatoire", "comparution", "confrontation", "expertise"],
            format_func=lambda x: {
                "audition": "üëÆ Audition (police/gendarmerie)",
                "interrogatoire": "üë®‚Äç‚öñÔ∏è Interrogatoire (juge d'instruction)",
                "comparution": "‚öñÔ∏è Comparution (tribunal)",
                "confrontation": "ü§ù Confrontation",
                "expertise": "üî¨ Expertise"
            }.get(x, x.title()),
            key="prep_type_select"
        )
        
        # Profil du client
        config['profil_client'] = st.selectbox(
            "üë§ Profil psychologique",
            ["anxieux", "confiant", "agressif", "fragile", "technique"],
            format_func=lambda x: {
                "anxieux": "üò∞ Anxieux - Besoin de r√©assurance",
                "confiant": "üòä Confiant - Maintenir la vigilance",
                "agressif": "üò† Agressif - Canaliser l'√©nergie",
                "fragile": "ü•∫ Fragile - Soutien renforc√©",
                "technique": "ü§ì Technique - Approche factuelle"
            }.get(x, x.title()),
            key="profil_select"
        )
    
    with col2:
        # Strat√©gie de d√©fense
        config['strategie'] = st.selectbox(
            "üéØ Strat√©gie",
            ["negation", "justification", "minimisation", "collaboration", "silence"],
            format_func=lambda x: {
                "negation": "‚ùå N√©gation totale",
                "justification": "‚úÖ Justification des actes",
                "minimisation": "üìâ Minimisation",
                "collaboration": "ü§ù Collaboration mesur√©e",
                "silence": "ü§ê Droit au silence"
            }.get(x, x.title()),
            key="strategie_select"
        )
        
        # Niveau de d√©tail
        config['niveau_detail'] = st.select_slider(
            "üìä Niveau de d√©tail",
            options=["Essentiel", "Standard", "Approfondi", "Exhaustif"],
            value="Approfondi",
            key="niveau_detail_select"
        )
    
    with col3:
        # Options suppl√©mentaires
        config['avec_simulation'] = st.checkbox(
            "üéÆ Inclure simulation Q/R",
            value=True,
            help="Questions probables et r√©ponses sugg√©r√©es",
            key="avec_simulation_check"
        )
        
        config['avec_pieges'] = st.checkbox(
            "üö® Identifier les pi√®ges",
            value=True,
            help="Questions pi√®ges et comment les √©viter",
            key="avec_pieges_check"
        )
        
        config['avec_droits'] = st.checkbox(
            "‚öñÔ∏è Rappel des droits",
            value=True,
            help="Droits du client selon la proc√©dure",
            key="avec_droits_check"
        )
    
    # √âl√©ments du dossier
    with st.expander("üìÇ Contexte de l'affaire", expanded=True):
        config['infractions'] = st.text_area(
            "‚öñÔ∏è Infractions reproch√©es",
            value=analysis.get('infractions', ''),
            placeholder="Ex: Abus de biens sociaux, faux et usage de faux...",
            height=100,
            key="infractions_textarea"
        )
        
        config['elements_favorables'] = st.text_area(
            "‚úÖ √âl√©ments favorables",
            placeholder="- Absence de preuve directe\n- T√©moignages favorables\n- Contexte att√©nuant",
            height=100,
            key="elements_favorables_textarea"
        )
        
        config['elements_defavorables'] = st.text_area(
            "‚ùå √âl√©ments d√©favorables",
            placeholder="- Documents compromettants\n- T√©moignages √† charge\n- Aveux partiels",
            height=100,
            key="elements_defavorables_textarea"
        )
    
    # Points sp√©cifiques √† pr√©parer
    config['points_sensibles'] = st.text_area(
        "üéØ Points sensibles √† pr√©parer",
        placeholder="- Explication des virements suspects\n- Justification des d√©penses\n- Alibi pour certaines dates",
        height=100,
        key="points_sensibles_textarea"
    )
    
    return config

def generate_client_preparation(config: dict, analysis: dict) -> Optional[PreparationClientResult]:
    """G√©n√®re une pr√©paration compl√®te pour le client"""
    
    llm_manager = MultiLLMManager()
    
    if not llm_manager.clients:
        st.error("‚ùå Aucune IA disponible")
        return None
    
    # Construire le prompt
    prompt = build_preparation_prompt(config, analysis)
    system_prompt = build_preparation_system_prompt(config)
    
    # G√©n√©rer la pr√©paration
    provider = list(llm_manager.clients.keys())[0]
    response = llm_manager.query_single_llm(
        provider,
        prompt,
        system_prompt,
        temperature=0.7,
        max_tokens=6000
    )
    
    if response['success']:
        content = response['response']
        
        # Extraire les √©l√©ments
        key_qa = extract_key_qa(content)
        do_not_say = extract_never_say(content)
        exercises = extract_preparation_exercises(content)
        
        # Estimer la dur√©e
        duration_estimate = estimate_preparation_duration(config['prep_type'], config['niveau_detail'])
        
        return PreparationClientResult(
            content=content,
            prep_type=config['prep_type'],
            profile=config['profil_client'],
            strategy=config['strategie'],
            key_qa=key_qa,
            do_not_say=do_not_say,
            exercises=exercises,
            duration_estimate=duration_estimate,
            timestamp=datetime.now()
        )
    
    return None

def build_preparation_prompt(config: dict, analysis: dict) -> str:
    """Construit le prompt pour la pr√©paration"""
    
    # Contexte selon le type
    type_context = {
        "audition": "audition libre en police/gendarmerie",
        "interrogatoire": "interrogatoire devant le juge d'instruction",
        "comparution": "comparution devant le tribunal",
        "confrontation": "confrontation avec d'autres parties",
        "expertise": "expertise psychiatrique ou psychologique"
    }
    
    prompt = f"""Cr√©e une pr√©paration compl√®te pour un client qui va subir une {type_context.get(config['prep_type'], 'proc√©dure')}.

PROFIL DU CLIENT:
- Type psychologique : {config['profil_client']}
- Strat√©gie adopt√©e : {config['strategie']}
- Niveau de d√©tail souhait√© : {config['niveau_detail']}

CONTEXTE DE L'AFFAIRE:
Infractions reproch√©es : {config.get('infractions', 'Non pr√©cis√©es')}

√âl√©ments favorables :
{config.get('elements_favorables', '√Ä identifier')}

√âl√©ments d√©favorables :
{config.get('elements_defavorables', '√Ä identifier')}

Points sensibles :
{config.get('points_sensibles', '√Ä pr√©parer')}

LA PR√âPARATION DOIT INCLURE:

1. CONSEILS G√âN√âRAUX
   - Attitude et comportement
   - Tenue vestimentaire
   - Gestion du stress
   - Communication non-verbale

2. STRAT√âGIE DE D√âFENSE
   - Ligne directrice
   - Points √† mettre en avant
   - Points √† √©viter absolument
   - Coh√©rence du discours

3. QUESTIONS PROBABLES ET R√âPONSES
   - Questions sur les faits
   - Questions sur les intentions
   - Questions techniques
   - Questions pi√®ges

4. CE QU'IL NE FAUT JAMAIS DIRE
   - Phrases √† √©viter
   - Admissions dangereuses
   - Contradictions √† √©viter
   - Formulations risqu√©es

5. GESTION DES MOMENTS DIFFICILES
   - Si d√©stabilis√©
   - Si confront√© √† une preuve
   - Si contradiction d√©tect√©e
   - Si pression excessive
"""
    
    # Adaptations selon le profil
    profile_adaptations = {
        "anxieux": """
ADAPTATION CLIENT ANXIEUX:
- Techniques de respiration
- Phrases de recentrage
- Pauses strat√©giques
- Reformulation pour gagner du temps
""",
        "confiant": """
ADAPTATION CLIENT CONFIANT:
- √âviter l'exc√®s de confiance
- Rester vigilant
- Ne pas minimiser les enjeux
- Contr√¥ler les d√©clarations spontan√©es
""",
        "agressif": """
ADAPTATION CLIENT AGRESSIF:
- Canaliser l'agressivit√©
- √âviter les confrontations
- R√©ponses courtes et factuelles
- Techniques de d√©samor√ßage
""",
        "fragile": """
ADAPTATION CLIENT FRAGILE:
- Renforcement positif
- Pr√©paration aux questions difficiles
- Droit de demander des pauses
- Soutien psychologique
""",
        "technique": """
ADAPTATION CLIENT TECHNIQUE:
- Approche factuelle
- Pr√©cision des termes
- Documentation √† l'appui
- √âviter sur-explication
"""
    }
    
    prompt += profile_adaptations.get(config['profil_client'], '')
    
    # Options sp√©cifiques
    if config.get('avec_simulation'):
        prompt += """
6. SIMULATION QUESTIONS/R√âPONSES
   - 20-30 questions types avec r√©ponses sugg√©r√©es
   - Variantes selon les r√©ponses de l'enqu√™teur
   - Points d'attention sur chaque r√©ponse
"""
    
    if config.get('avec_pieges'):
        prompt += """
7. QUESTIONS PI√àGES ET PARADES
   - Questions √† double sens
   - Questions pr√©supposant des faits
   - Questions de d√©stabilisation
   - Techniques de parade
"""
    
    if config.get('avec_droits'):
        prompt += f"""
8. RAPPEL DES DROITS
   - Droits sp√©cifiques √† la {config['prep_type']}
   - Possibilit√©s de refus
   - Assistance de l'avocat
   - Recours possibles
"""
    
    # Niveau de d√©tail
    detail_instructions = {
        "Essentiel": "Document concis avec l'essentiel (5-8 pages)",
        "Standard": "Document standard √©quilibr√© (10-15 pages)",
        "Approfondi": "Document d√©taill√© avec exemples (15-25 pages)",
        "Exhaustif": "Document exhaustif couvrant tous les cas (25+ pages)"
    }
    
    prompt += f"\nNIVEAU DE D√âTAIL: {detail_instructions.get(config['niveau_detail'], 'Standard')}"
    
    return prompt

def build_preparation_system_prompt(config: dict) -> str:
    """Construit le prompt syst√®me pour la pr√©paration"""
    
    base_prompt = "Tu es un avocat p√©naliste exp√©riment√©, expert en pr√©paration de clients pour les proc√©dures p√©nales."
    
    # Sp√©cialisation selon le type
    specializations = {
        "audition": "Tu ma√Ætrises parfaitement les auditions de police et sais pr√©parer les clients √† cet exercice.",
        "interrogatoire": "Tu es sp√©cialis√© dans la pr√©paration aux interrogatoires d'instruction.",
        "comparution": "Tu excelles dans la pr√©paration des clients pour leur comparution devant le tribunal.",
        "confrontation": "Tu es expert en pr√©paration aux confrontations, sachant g√©rer les dynamiques complexes.",
        "expertise": "Tu connais parfaitement les expertises judiciaires et leur d√©roulement."
    }
    
    base_prompt += f" {specializations.get(config['prep_type'], '')}"
    
    base_prompt += " Tu adoptes une approche p√©dagogique et bienveillante, tout en √©tant rigoureux sur la pr√©paration."
    
    return base_prompt

def extract_key_qa(content: str) -> List[Dict[str, str]]:
    """Extrait les questions-r√©ponses cl√©s"""
    qa_list = []
    
    # Pattern pour Q/R
    qa_sections = re.split(r'(?=(?:Question|Q)\s*\d*\s*:)', content)
    
    for section in qa_sections[1:]:  # Skip le premier qui n'est pas une question
        lines = section.strip().split('\n')
        
        if len(lines) >= 2:
            # Extraire la question
            question = re.sub(r'^(?:Question|Q)\s*\d*\s*:\s*', '', lines[0]).strip()
            
            # Chercher la r√©ponse
            answer = ""
            for i, line in enumerate(lines[1:]):
                if re.match(r'^(?:R√©ponse|R)\s*:', line):
                    # R√©ponse explicite
                    answer = re.sub(r'^(?:R√©ponse|R)\s*:\s*', '', line).strip()
                    # Continuer pour les lignes suivantes
                    for j in range(i+2, len(lines)):
                        if lines[j].strip() and not re.match(r'^(?:Question|Q|Attention|Note)', lines[j]):
                            answer += " " + lines[j].strip()
                        else:
                            break
                    break
                elif line.strip() and not re.match(r'^(?:Attention|Note|Point)', line):
                    # Consid√©rer comme partie de la r√©ponse
                    answer += line.strip() + " "
            
            if question and answer:
                qa_list.append({
                    'question': question,
                    'answer': answer.strip()
                })
    
    return qa_list

def extract_never_say(content: str) -> List[str]:
    """Extrait les choses √† ne jamais dire"""
    never_list = []
    
    # Chercher la section
    sections = re.split(r'(?=\d+\.\s+[A-Z]|[IVX]+\.\s+[A-Z])', content)
    
    for section in sections:
        if any(phrase in section.upper() for phrase in ['NE JAMAIS', '√âVITER', 'NE PAS DIRE']):
            # Extraire les √©l√©ments
            items = re.findall(r'[-‚Ä¢]\s*([^\n]+)', section)
            never_list.extend(items)
            
            # Aussi chercher les phrases entre guillemets
            quoted = re.findall(r'"([^"]+)"', section)
            never_list.extend(quoted)
    
    # D√©dupliquer et nettoyer
    cleaned_list = []
    seen = set()
    
    for item in never_list:
        item = item.strip()
        if item and item.lower() not in seen and len(item) > 10:
            seen.add(item.lower())
            cleaned_list.append(item)
    
    return cleaned_list[:20]  # Limiter √† 20

def extract_preparation_exercises(content: str) -> List[Dict[str, Any]]:
    """Extrait les exercices de pr√©paration"""
    exercises = []
    
    # Patterns d'exercices
    exercise_keywords = ['exercice', 'entra√Ænement', 'simulation', 'pratique', 'r√©p√©tition']
    
    sections = content.split('\n\n')
    
    for section in sections:
        if any(keyword in section.lower() for keyword in exercise_keywords):
            lines = section.strip().split('\n')
            if lines:
                title = lines[0].strip()
                description = '\n'.join(lines[1:]).strip()
                
                if len(description) > 20:
                    exercises.append({
                        'title': title,
                        'description': description,
                        'type': detect_exercise_type(title + description)
                    })
    
    return exercises

def detect_exercise_type(text: str) -> str:
    """D√©tecte le type d'exercice"""
    text_lower = text.lower()
    
    if 'respiration' in text_lower or 'stress' in text_lower:
        return 'relaxation'
    elif 'question' in text_lower or 'r√©ponse' in text_lower:
        return 'qa_practice'
    elif 'reformulation' in text_lower:
        return 'reformulation'
    elif 'silence' in text_lower:
        return 'silence_management'
    else:
        return 'general'

def estimate_preparation_duration(prep_type: str, niveau_detail: str) -> str:
    """Estime la dur√©e de pr√©paration n√©cessaire"""
    
    # Dur√©es de base par type
    base_durations = {
        "audition": 2,
        "interrogatoire": 3,
        "comparution": 4,
        "confrontation": 3,
        "expertise": 2
    }
    
    # Multiplicateurs par niveau
    detail_multipliers = {
        "Essentiel": 0.7,
        "Standard": 1.0,
        "Approfondi": 1.5,
        "Exhaustif": 2.0
    }
    
    base_hours = base_durations.get(prep_type, 3)
    multiplier = detail_multipliers.get(niveau_detail, 1.0)
    
    total_hours = int(base_hours * multiplier)
    
    if total_hours <= 2:
        return f"{total_hours} heure{'s' if total_hours > 1 else ''}"
    else:
        sessions = (total_hours + 1) // 2  # Sessions de 2h max
        return f"{total_hours} heures (en {sessions} sessions)"

def display_preparation_results(result: PreparationClientResult):
    """Affiche les r√©sultats de la pr√©paration"""
    
    st.success("‚úÖ Pr√©paration g√©n√©r√©e avec succ√®s!")
    
    # M√©tadonn√©es
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        type_icons = {
            "audition": "üëÆ",
            "interrogatoire": "üë®‚Äç‚öñÔ∏è",
            "comparution": "‚öñÔ∏è",
            "confrontation": "ü§ù",
            "expertise": "üî¨"
        }
        st.metric("Type", f"{type_icons.get(result.prep_type, 'üìã')} {result.prep_type.title()}")
    
    with col2:
        st.metric("Profil client", result.profile.title())
    
    with col3:
        st.metric("Strat√©gie", result.strategy.title())
    
    with col4:
        st.metric("Dur√©e pr√©paration", result.duration_estimate)
    
    # Navigation
    tabs = st.tabs([
        "üìù Document complet",
        "‚ùì Questions/R√©ponses",
        "üö´ √Ä ne jamais dire",
        "üéØ Exercices",
        "üìã Fiche r√©sum√©"
    ])
    
    with tabs[0]:
        # Document complet
        display_full_preparation(result.content)
    
    with tabs[1]:
        # Questions/R√©ponses
        display_qa_section(result.key_qa)
    
    with tabs[2]:
        # √Ä ne jamais dire
        display_never_say_section(result.do_not_say)
    
    with tabs[3]:
        # Exercices
        display_exercises_section(result.exercises)
    
    with tabs[4]:
        # Fiche r√©sum√©
        display_preparation_summary(result)
    
    # Actions
    st.markdown("### üíæ Actions")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üìÑ Exporter PDF", key="export_prep_pdf"):
            pdf_content = export_preparation_to_pdf(result)
            st.download_button(
                "üíæ T√©l√©charger PDF",
                pdf_content,
                f"preparation_{result.prep_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                "application/pdf",
                key="download_prep_pdf"
            )
    
    with col2:
        if st.button("üéÆ Mode simulation", key="start_simulation"):
            st.session_state.simulation_active = True
            show_interrogation_simulation(result)
    
    with col3:
        if st.button("‚è±Ô∏è Chronom√®tre", key="show_timer"):
            show_exercise_timer()
    
    with col4:
        if st.button("üì± Version mobile", key="mobile_version"):
            mobile_content = create_mobile_version(result)
            st.download_button(
                "üíæ Version mobile",
                mobile_content.encode('utf-8'),
                f"prep_mobile_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                "text/plain",
                key="download_mobile"
            )

def display_full_preparation(content: str):
    """Affiche le document complet de pr√©paration"""
    
    # Options d'affichage
    col1, col2 = st.columns([3, 1])
    
    with col1:
        search_term = st.text_input(
            "üîç Rechercher dans le document",
            placeholder="Ex: stress, questions, droits...",
            key="search_prep_doc"
        )
    
    with col2:
        highlight = st.checkbox("üñçÔ∏è Surligner", value=True, key="highlight_prep")
    
    # Contenu avec recherche
    display_content = content
    
    if search_term and highlight:
        # Surligner les termes recherch√©s
        display_content = highlight_search_terms(content, search_term)
        
        # Compter les occurrences
        count = content.lower().count(search_term.lower())
        if count > 0:
            st.info(f"üîç {count} occurrence(s) trouv√©e(s)")
    
    # Afficher avec scroll
    st.markdown(
        f'<div style="height: 600px; overflow-y: auto; padding: 20px; border: 1px solid #ddd; border-radius: 10px;">{display_content}</div>',
        unsafe_allow_html=True
    )

def display_qa_section(key_qa: List[Dict[str, str]]):
    """Affiche la section questions/r√©ponses"""
    
    if not key_qa:
        st.info("Aucune question/r√©ponse extraite")
        return
    
    st.markdown(f"### üìã {len(key_qa)} questions pr√©par√©es")
    
    # Filtres
    col1, col2 = st.columns([2, 1])
    
    with col1:
        search_qa = st.text_input(
            "üîç Filtrer les questions",
            placeholder="Ex: intention, preuve, alibi...",
            key="search_qa"
        )
    
    with col2:
        sort_by = st.selectbox(
            "Trier par",
            ["Ordre original", "Longueur question", "Longueur r√©ponse"],
            key="sort_qa"
        )
    
    # Filtrer et trier
    filtered_qa = key_qa
    
    if search_qa:
        filtered_qa = [
            qa for qa in filtered_qa 
            if search_qa.lower() in qa['question'].lower() or search_qa.lower() in qa['answer'].lower()
        ]
    
    if sort_by == "Longueur question":
        filtered_qa.sort(key=lambda x: len(x['question']))
    elif sort_by == "Longueur r√©ponse":
        filtered_qa.sort(key=lambda x: len(x['answer']))
    
    # Afficher
    for i, qa in enumerate(filtered_qa, 1):
        with st.expander(f"‚ùì Question {i}: {qa['question'][:60]}...", expanded=False):
            st.markdown("**Question compl√®te:**")
            st.info(qa['question'])
            
            st.markdown("**R√©ponse sugg√©r√©e:**")
            st.success(qa['answer'])
            
            # Actions
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("üìã Copier", key=f"copy_qa_{i}"):
                    st.code(f"Q: {qa['question']}\nR: {qa['answer']}")
            
            with col2:
                if st.button("‚úèÔ∏è Noter", key=f"note_qa_{i}"):
                    note = st.text_area("Note personnelle", key=f"note_text_{i}")
                    if note:
                        if 'qa_notes' not in st.session_state:
                            st.session_state.qa_notes = {}
                        st.session_state.qa_notes[i] = note
            
            with col3:
                importance = st.select_slider(
                    "Importance",
                    options=["Faible", "Moyenne", "Haute", "Critique"],
                    value="Moyenne",
                    key=f"importance_qa_{i}"
                )

def display_never_say_section(never_say: List[str]):
    """Affiche la section des choses √† ne jamais dire"""
    
    if not never_say:
        st.info("Aucune phrase √† √©viter identifi√©e")
        return
    
    st.markdown(f"### üö´ {len(never_say)} phrases √† √©viter absolument")
    
    # Cat√©goriser les phrases
    categories = categorize_never_say(never_say)
    
    for category, phrases in categories.items():
        if phrases:
            with st.expander(f"‚ö†Ô∏è {category} ({len(phrases)} phrases)", expanded=True):
                for phrase in phrases:
                    col1, col2 = st.columns([5, 1])
                    
                    with col1:
                        st.error(f"‚ùå ¬´ {phrase} ¬ª")
                    
                    with col2:
                        if st.button("üí°", key=f"explain_{hash(phrase)}"):
                            st.info(get_danger_explanation(phrase))

def categorize_never_say(phrases: List[str]) -> Dict[str, List[str]]:
    """Cat√©gorise les phrases √† √©viter"""
    
    categories = {
        "Aveux implicites": [],
        "Contradictions": [],
        "Sp√©culations": [],
        "Accusations": [],
        "Minimisations excessives": [],
        "Autres": []
    }
    
    for phrase in phrases:
        phrase_lower = phrase.lower()
        
        if any(word in phrase_lower for word in ['avoue', 'reconnais', 'admets', 'coupable']):
            categories["Aveux implicites"].append(phrase)
        elif any(word in phrase_lower for word in ['mais', 'cependant', 'sauf', 'except√©']):
            categories["Contradictions"].append(phrase)
        elif any(word in phrase_lower for word in ['pense', 'crois', 'suppose', 'peut-√™tre']):
            categories["Sp√©culations"].append(phrase)
        elif any(word in phrase_lower for word in ['lui', 'eux', 'elle', 'accus√©']):
            categories["Accusations"].append(phrase)
        elif any(word in phrase_lower for word in ['peu', 'rien', 'jamais', 'insignifiant']):
            categories["Minimisations excessives"].append(phrase)
        else:
            categories["Autres"].append(phrase)
    
    return {k: v for k, v in categories.items() if v}

def get_danger_explanation(phrase: str) -> str:
    """Explique pourquoi une phrase est dangereuse"""
    
    phrase_lower = phrase.lower()
    
    if 'avoue' in phrase_lower or 'reconnais' in phrase_lower:
        return "Cette formulation constitue un aveu, m√™me partiel. Pr√©f√©rez des formulations neutres."
    elif 'pense' in phrase_lower or 'crois' in phrase_lower:
        return "√âvitez les sp√©culations. Restez factuel : 'Je sais' ou 'Je ne sais pas'."
    elif 'mais' in phrase_lower:
        return "Le 'mais' introduit souvent une contradiction. Soyez coh√©rent dans vos d√©clarations."
    else:
        return "Cette formulation peut √™tre interpr√©t√©e d√©favorablement. Restez neutre et factuel."

def display_exercises_section(exercises: List[Dict[str, Any]]):
    """Affiche la section des exercices"""
    
    if not exercises:
        st.info("Aucun exercice sp√©cifique identifi√©")
        return
    
    st.markdown(f"### üéØ {len(exercises)} exercices de pr√©paration")
    
    # Grouper par type
    by_type = defaultdict(list)
    for ex in exercises:
        by_type[ex.get('type', 'general')].append(ex)
    
    type_names = {
        'relaxation': 'üòå Relaxation',
        'qa_practice': '‚ùì Pratique Q/R',
        'reformulation': 'üîÑ Reformulation',
        'silence_management': 'ü§ê Gestion du silence',
        'general': 'üìã G√©n√©ral'
    }
    
    for ex_type, type_exercises in by_type.items():
        st.markdown(f"#### {type_names.get(ex_type, ex_type.title())}")
        
        for i, exercise in enumerate(type_exercises, 1):
            with st.expander(f"üéØ {exercise['title']}", expanded=False):
                st.markdown(exercise['description'])
                
                # Bouton pour pratiquer
                if st.button(f"‚ñ∂Ô∏è Pratiquer", key=f"practice_{ex_type}_{i}"):
                    show_exercise_practice(exercise)

def display_preparation_summary(result: PreparationClientResult):
    """Affiche une fiche r√©sum√© de la pr√©paration"""
    
    summary = create_preparation_summary(result)
    
    # Afficher la fiche
    st.markdown("### üìã Fiche r√©sum√© √† imprimer")
    
    st.text_area(
        "R√©sum√© de la pr√©paration",
        value=summary,
        height=600,
        key="prep_summary_display"
    )
    
    # Actions
    col1, col2 = st.columns(2)
    
    with col1:
        st.download_button(
            "üíæ T√©l√©charger r√©sum√©",
            summary.encode('utf-8'),
            f"resume_preparation_{datetime.now().strftime('%Y%m%d')}.txt",
            "text/plain",
            key="download_prep_summary"
        )
    
    with col2:
        if st.button("üñ®Ô∏è Format impression", key="print_format"):
            print_version = create_print_friendly_summary(result)
            st.download_button(
                "üíæ Version impression",
                print_version.encode('utf-8'),
                f"fiche_preparation_{datetime.now().strftime('%Y%m%d')}.txt",
                "text/plain",
                key="download_print_version"
            )

def create_preparation_summary(result: PreparationClientResult) -> str:
    """Cr√©e une fiche r√©sum√© de la pr√©paration"""
    
    summary = f"""FICHE R√âSUM√â - PR√âPARATION {result.prep_type.upper()}
{'=' * 60}

Date : {result.timestamp.strftime('%d/%m/%Y')}
Profil client : {result.profile}
Strat√©gie : {result.strategy}
Dur√©e pr√©paration : {result.duration_estimate}

POINTS CL√âS √Ä RETENIR :
{'-' * 40}
"""
    
    # Top 10 Q/R
    summary += "\nüìå QUESTIONS ESSENTIELLES :\n\n"
    
    for i, qa in enumerate(result.get_top_questions(10), 1):
        summary += f"{i}. Q: {qa['question']}\n"
        summary += f"   R: {qa['answer']}\n\n"
    
    # Phrases √† √©viter absolument
    summary += "\n‚ö†Ô∏è NE JAMAIS DIRE :\n"
    summary += "-" * 40 + "\n"
    
    for item in result.do_not_say[:10]:
        summary += f"‚ùå {item}\n"
    
    # Conseils comportement
    behavior_section = extract_section(result.content, "COMPORTEMENT")
    if behavior_section:
        summary += f"\nüí° COMPORTEMENT :\n{'-' * 40}\n"
        summary += behavior_section[:500] + "...\n"
    
    # Droits essentiels
    rights_section = extract_section(result.content, "DROITS")
    if rights_section:
        summary += f"\n‚öñÔ∏è VOS DROITS :\n{'-' * 40}\n"
        summary += rights_section[:300] + "...\n"
    
    return summary

def create_print_friendly_summary(result: PreparationClientResult) -> str:
    """Cr√©e une version imprimable de la fiche r√©sum√©"""
    
    # Version √©pur√©e pour impression A4
    summary = f"""
                    FICHE DE PR√âPARATION
                    {result.prep_type.upper()}
                    
================================================================

CLIENT : _________________________    DATE : {datetime.now().strftime('%d/%m/%Y')}

AVOCAT : _________________________    HEURE : _______________

================================================================

‚¨ú ATTITUDE G√âN√âRALE :
   - Calme et pos√©
   - R√©ponses courtes et pr√©cises
   - "Je ne sais pas" si incertain
   - Demander reformulation si n√©cessaire

‚¨ú TENUE :
   - Correcte et sobre
   - √âviter signes ostentatoires

================================================================

TOP 5 QUESTIONS CRITIQUES :

1. ____________________________________________________________
   ‚Üí __________________________________________________________

2. ____________________________________________________________
   ‚Üí __________________________________________________________

3. ____________________________________________________________
   ‚Üí __________________________________________________________

4. ____________________________________________________________
   ‚Üí __________________________________________________________

5. ____________________________________________________________
   ‚Üí __________________________________________________________

================================================================

‚ö†Ô∏è INTERDICTIONS ABSOLUES :
   ‚¨ú Pas de sp√©culation
   ‚¨ú Pas d'accusation d'autrui
   ‚¨ú Pas de minimisation excessive
   ‚¨ú Pas de contradiction
   ‚¨ú Pas d'aveu m√™me partiel

================================================================

NOTES :
_________________________________________________________________
_________________________________________________________________
_________________________________________________________________
_________________________________________________________________

================================================================

Signature client : ________________    Signature avocat : ________________
"""
    
    return summary

def highlight_search_terms(content: str, search_term: str) -> str:
    """Surligne les termes recherch√©s dans le contenu"""
    
    if not search_term:
        return content
    
    # √âchapper les caract√®res sp√©ciaux HTML
    content = content.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
    
    # Surligner (insensible √† la casse)
    pattern = re.compile(re.escape(search_term), re.IGNORECASE)
    highlighted = pattern.sub(
        lambda m: f'<mark style="background-color: yellow;">{m.group()}</mark>',
        content
    )
    
    # Pr√©server les sauts de ligne
    highlighted = highlighted.replace('\n', '<br>')
    
    return highlighted

def show_interrogation_simulation(result: PreparationClientResult):
    """Mode simulation d'interrogatoire"""
    
    st.markdown("### üéÆ Simulation d'interrogatoire")
    
    # √âtat de la simulation
    if 'simulation_index' not in st.session_state:
        st.session_state.simulation_index = 0
        st.session_state.simulation_score = []
    
    questions = result.key_qa
    current_q = st.session_state.simulation_index
    
    if current_q < len(questions):
        # Question actuelle
        st.info(f"Question {current_q + 1}/{len(questions)}")
        st.subheader(questions[current_q]['question'])
        
        # Zone de r√©ponse
        user_answer = st.text_area(
            "Votre r√©ponse :",
            height=150,
            key=f"sim_answer_{current_q}"
        )
        
        # Afficher la r√©ponse sugg√©r√©e
        with st.expander("üí° Voir la r√©ponse sugg√©r√©e"):
            st.success(questions[current_q]['answer'])
            
            # Conseils suppl√©mentaires
            st.info("""
            **Points d'attention :**
            - Restez factuel
            - √âvitez les d√©tails inutiles
            - Ne sp√©culez pas
            - Gardez un ton neutre
            """)
        
        # √âvaluation
        st.markdown("#### Auto-√©valuation")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("‚úÖ Bonne r√©ponse", key=f"good_{current_q}"):
                st.session_state.simulation_score.append(1)
                st.session_state.simulation_index += 1
                st.rerun()
        
        with col2:
            if st.button("üòê Moyenne", key=f"medium_{current_q}"):
                st.session_state.simulation_score.append(0.5)
                st.session_state.simulation_index += 1
                st.rerun()
        
        with col3:
            if st.button("‚ùå √Ä retravailler", key=f"bad_{current_q}"):
                st.session_state.simulation_score.append(0)
                st.session_state.simulation_index += 1
                st.rerun()
    
    else:
        # Fin de simulation
        display_simulation_results()

def display_simulation_results():
    """Affiche les r√©sultats de la simulation"""
    
    st.success("üéâ Simulation termin√©e !")
    
    # Calcul du score
    score = st.session_state.simulation_score
    total = sum(score)
    max_score = len(score)
    percentage = (total / max_score * 100) if max_score > 0 else 0
    
    # Affichage
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Score global", f"{percentage:.0f}%")
    
    with col2:
        st.metric("Questions r√©ussies", f"{score.count(1)}/{len(score)}")
    
    with col3:
        st.metric("√Ä retravailler", score.count(0))
    
    # Graphique de progression
    st.markdown("### üìä Progression d√©taill√©e")
    
    # Cr√©er un graphique simple avec les r√©sultats
    results_display = ""
    for i, s in enumerate(score, 1):
        if s == 1:
            results_display += "üü¢"
        elif s == 0.5:
            results_display += "üü°"
        else:
            results_display += "üî¥"
        
        if i % 10 == 0:
            results_display += f" {i}\n"
    
    st.text(results_display)
    
    # Recommandations
    st.markdown("### üí° Recommandations")
    
    if percentage >= 80:
        st.success("""
        Excellente pr√©paration ! Vous ma√Ætrisez bien les r√©ponses.
        - Continuez √† r√©viser les points cl√©s
        - Travaillez la fluidit√©
        - Restez vigilant sur les questions pi√®ges
        """)
    elif percentage >= 60:
        st.warning("""
        Bonne base, mais des points √† am√©liorer.
        - Revoyez les questions rat√©es
        - Pratiquez les reformulations
        - M√©morisez les phrases cl√©s
        """)
    else:
        st.error("""
        Pr√©paration insuffisante. Il faut plus de travail.
        - Reprenez la pr√©paration compl√®te
        - Faites plus d'exercices
        - Demandez des sessions suppl√©mentaires
        """)
    
    # Actions
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üîÑ Recommencer", key="restart_simulation"):
            st.session_state.simulation_index = 0
            st.session_state.simulation_score = []
            st.rerun()
    
    with col2:
        if st.button("üìä Rapport d√©taill√©", key="detailed_report"):
            report = create_simulation_report(score)
            st.download_button(
                "üíæ T√©l√©charger rapport",
                report.encode('utf-8'),
                f"rapport_simulation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                "text/plain"
            )

def create_simulation_report(scores: List[float]) -> str:
    """Cr√©e un rapport d√©taill√© de la simulation"""
    
    total = sum(scores)
    percentage = (total / len(scores) * 100) if scores else 0
    
    report = f"""RAPPORT DE SIMULATION D'INTERROGATOIRE
{'=' * 50}

Date : {datetime.now().strftime('%d/%m/%Y %H:%M')}
Nombre de questions : {len(scores)}
Score global : {percentage:.1f}%

D√âTAIL PAR QUESTION :
{'-' * 30}
"""
    
    for i, score in enumerate(scores, 1):
        status = "‚úÖ R√©ussi" if score == 1 else "‚ö†Ô∏è Moyen" if score == 0.5 else "‚ùå √Ä revoir"
        report += f"Question {i:02d} : {status}\n"
    
    report += f"""
{'-' * 30}
R√âSUM√â :
- Questions r√©ussies : {scores.count(1)}
- Questions moyennes : {scores.count(0.5)}
- Questions rat√©es : {scores.count(0)}

RECOMMANDATIONS :
"""
    
    if percentage >= 80:
        report += "- Excellente ma√Ætrise g√©n√©rale\n"
        report += "- Maintenir le niveau par des r√©visions r√©guli√®res\n"
    elif percentage >= 60:
        report += "- Niveau satisfaisant mais perfectible\n"
        report += "- Retravailler les questions rat√©es en priorit√©\n"
    else:
        report += "- Pr√©paration insuffisante\n"
        report += "- N√©cessit√© de reprendre la formation compl√®te\n"
    
    return report

def show_exercise_timer():
    """Timer pour les exercices de pr√©paration"""
    
    st.markdown("### ‚è±Ô∏è Chronom√®tre exercices")
    
    # Exercices pr√©d√©finis avec dur√©es
    exercise_durations = {
        "Pr√©sentation personnelle": 60,
        "R√©cit chronologique": 180,
        "Questions rapides": 120,
        "Gestion du silence": 30,
        "Reformulation": 60,
        "Respiration profonde": 120
    }
    
    selected_exercise = st.selectbox(
        "Choisir l'exercice",
        list(exercise_durations.keys()),
        key="exercise_timer_select"
    )
    
    duration = exercise_durations[selected_exercise]
    
    st.info(f"‚è±Ô∏è Dur√©e recommand√©e : {duration} secondes")
    
    # Instructions sp√©cifiques
    instructions = {
        "Pr√©sentation personnelle": "Pr√©sentez-vous en 1 minute : identit√©, profession, situation familiale",
        "R√©cit chronologique": "Racontez les faits de mani√®re chronologique en 3 minutes maximum",
        "Questions rapides": "R√©pondez √† des questions simples le plus rapidement possible",
        "Gestion du silence": "Restez calme et silencieux pendant 30 secondes",
        "Reformulation": "Reformulez des questions complexes en termes simples",
        "Respiration profonde": "Exercice de respiration pour g√©rer le stress"
    }
    
    st.write(f"**Instructions :** {instructions[selected_exercise]}")
    
    # Timer interface
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("‚ñ∂Ô∏è D√©marrer", key="start_exercise_timer"):
            st.session_state.exercise_start = datetime.now()
            st.session_state.exercise_duration = duration
    
    with col2:
        if 'exercise_start' in st.session_state:
            elapsed = (datetime.now() - st.session_state.exercise_start).seconds
            remaining = max(0, st.session_state.exercise_duration - elapsed)
            
            st.metric("Temps restant", f"{remaining}s")
            
            # Barre de progression
            progress = min(elapsed / st.session_state.exercise_duration, 1.0)
            st.progress(progress)
    
    with col3:
        if st.button("üîÑ R√©initialiser", key="reset_exercise_timer"):
            if 'exercise_start' in st.session_state:
                del st.session_state.exercise_start

def show_exercise_practice(exercise: Dict[str, Any]):
    """Interface de pratique pour un exercice"""
    
    st.markdown(f"### üéØ Pratique : {exercise['title']}")
    
    # Instructions d√©taill√©es
    st.info(exercise['description'])
    
    # Zone de pratique selon le type
    if exercise['type'] == 'qa_practice':
        st.text_area(
            "Votre r√©ponse",
            placeholder="Tapez votre r√©ponse ici...",
            height=200,
            key="practice_response"
        )
        
        if st.button("üí° Exemple de bonne r√©ponse"):
            st.success("R√©ponse type : Je ne me souviens pas pr√©cis√©ment de cet √©v√©nement.")
    
    elif exercise['type'] == 'reformulation':
        st.text_input(
            "Question complexe",
            value="Pouvez-vous expliquer la nature exacte de vos relations avec la soci√©t√© X et justifier les transferts de fonds?",
            disabled=True
        )
        
        reformulation = st.text_area(
            "Votre reformulation",
            placeholder="Reformulez la question...",
            key="reformulation_practice"
        )
        
        if st.button("üí° Exemple"):
            st.success("Reformulation : Vous me demandez quel √©tait mon lien avec la soci√©t√© X et pourquoi il y a eu des virements ?")

def create_mobile_version(result: PreparationClientResult) -> str:
    """Cr√©e une version mobile de la pr√©paration"""
    
    mobile_content = f"""PR√âPARATION MOBILE - {result.prep_type.upper()}
{'=' * 40}

‚ö° POINTS ESSENTIELS

üìå ATTITUDE
- Calme et pos√©
- R√©ponses courtes
- "Je ne sais pas" si doute
- Demander √† reformuler

‚ö†Ô∏è JAMAIS DIRE
"""
    
    # Top 5 des phrases √† √©viter
    for i, phrase in enumerate(result.do_not_say[:5], 1):
        mobile_content += f"{i}. {phrase}\n"
    
    mobile_content += "\n‚ùì QUESTIONS CL√âS\n" + "=" * 40 + "\n"
    
    # Top 10 Q/R
    for i, qa in enumerate(result.get_top_questions(10), 1):
        mobile_content += f"\nQ{i}: {qa['question']}\n"
        mobile_content += f"‚Üí {qa['answer']}\n"
        mobile_content += "-" * 40 + "\n"
    
    mobile_content += """
üÜò EN CAS DE DIFFICULT√â
- Respirer profond√©ment
- Demander √† r√©p√©ter
- "Je dois r√©fl√©chir"
- "Je ne comprends pas"

‚öñÔ∏è VOS DROITS
- Avocat pr√©sent
- Refuser de r√©pondre
- Demander une pause
- Acc√®s au dossier
"""
    
    return mobile_content

def export_preparation_to_pdf(result: PreparationClientResult) -> bytes:
    """Exporte la pr√©paration en PDF (version simplifi√©e)"""
    
    # Version texte format√©e
    content = f"""DOCUMENT DE PR√âPARATION
{result.prep_type.upper()}

{'=' * 60}

G√©n√©r√© le : {result.timestamp.strftime('%d/%m/%Y')}
Type : {result.prep_type}
Profil client : {result.profile}
Strat√©gie : {result.strategy}

{'=' * 60}

{result.content}

{'=' * 60}

Ce document est confidentiel et couvert par le secret professionnel.
"""
    
    return content.encode('utf-8')