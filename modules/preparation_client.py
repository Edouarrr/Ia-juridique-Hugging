"""Module de pr√©paration des clients pour auditions et interrogatoires - Version am√©lior√©e"""

import json
import re
import sys
import time
from collections import defaultdict
from dataclasses import asdict, dataclass
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple

import plotly.express as px
import plotly.graph_objects as go
import streamlit as st

# Ajouter le chemin parent pour importer utils
sys.path.append(str(Path(__file__).parent.parent))
from utils import clean_key, format_legal_date, truncate_text
from utils.decorators import decorate_public_functions

# Enregistrement automatique des fonctions publiques pour le module
decorate_public_functions(sys.modules[__name__])

# Import des managers si disponibles
try:
    from config.app_config import LLMProvider
    from managers.multi_llm_manager import MultiLLMManager
    LLMS_AVAILABLE = True
except ImportError:
    LLMS_AVAILABLE = False
    
# Classes de donn√©es
@dataclass
class PreparationSession:
    """Classe pour une s√©ance de pr√©paration"""
    session_number: int
    title: str
    theme: str
    objectives: List[str]
    duration_minutes: int
    questions: List[Dict[str, str]]
    exercises: List[Dict[str, Any]]
    key_points: List[str]
    homework: Optional[str] = None
    completed: bool = False
    completion_date: Optional[datetime] = None
    score: Optional[float] = None
    notes: str = ""
    ai_models_used: List[str] = None

@dataclass
class PreparationPlan:
    """Plan complet de pr√©paration"""
    total_sessions: int
    sessions: List[PreparationSession]
    prep_type: str
    client_profile: str
    strategy: str
    created_date: datetime
    target_date: Optional[datetime] = None
    overall_progress: float = 0.0
    ai_models_config: Dict[str, Any] = None

@dataclass
class PreparationClientResult:
    """R√©sultat de pr√©paration"""
    content: str
    prep_type: str
    profile: str
    strategy: str
    key_qa: List[Dict[str, str]]
    do_not_say: List[str]
    exercises: List[Dict[str, Any]]
    duration_estimate: int
    timestamp: datetime
    ai_models_used: List[str] = None
    fusion_score: float = 0.0

# Fonction principale pour le lazy loading
def run():
    """Fonction principale du module - OBLIGATOIRE pour le lazy loading"""
    
    # Initialisation de l'√©tat de session
    init_session_state()
    
    # Style CSS personnalis√©
    apply_custom_styles()
    
    # En-t√™te avec m√©triques
    display_header_metrics()
    
    # Navigation principale
    display_main_navigation()

def init_session_state():
    """Initialise les variables de session"""
    if 'preparation_state' not in st.session_state:
        st.session_state.preparation_state = {
            'initialized': True,
            'current_plan': None,
            'current_session': None,
            'results': None,
            'ai_config': {
                'models': [],
                'fusion_mode': False,
                'temperature': 0.7
            }
        }
    
    # Migration des anciennes variables si n√©cessaire
    if 'preparation_plan' in st.session_state and not st.session_state.preparation_state['current_plan']:
        st.session_state.preparation_state['current_plan'] = st.session_state.preparation_plan
        del st.session_state.preparation_plan

def apply_custom_styles():
    """Applique les styles CSS personnalis√©s"""
    st.markdown("""
    <style>
    /* Animations */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .fade-in {
        animation: fadeIn 0.5s ease-out;
    }
    
    /* Cards am√©lior√©es */
    .prep-card {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        border-radius: 15px;
        padding: 20px;
        margin: 10px 0;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }
    
    .prep-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 15px rgba(0,0,0,0.2);
    }
    
    /* Boutons am√©lior√©s */
    .stButton > button {
        transition: all 0.3s ease;
        border-radius: 10px;
    }
    
    .stButton > button:hover {
        transform: scale(1.05);
    }
    
    /* Progress bars personnalis√©es */
    .prep-progress {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        height: 10px;
        border-radius: 5px;
        transition: width 0.5s ease;
    }
    
    /* Questions cards */
    .question-card {
        background: white;
        border-left: 4px solid #667eea;
        padding: 15px;
        margin: 10px 0;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }
    
    /* AI model selector */
    .ai-model-badge {
        display: inline-block;
        padding: 5px 15px;
        margin: 5px;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .ai-model-badge:hover {
        transform: scale(1.1);
    }
    
    /* Session status indicators */
    .session-status {
        display: inline-block;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 10px;
    }
    
    .session-status.completed {
        background: #48bb78;
    }
    
    .session-status.pending {
        background: #f6e05e;
    }
    
    .session-status.locked {
        background: #cbd5e0;
    }
    </style>
    """, unsafe_allow_html=True)

def display_header_metrics():
    """Affiche l'en-t√™te avec les m√©triques principales"""
    col1, col2, col3, col4, col5 = st.columns(5)
    
    plan = st.session_state.preparation_state.get('current_plan')
    
    with col1:
        if plan:
            completed = sum(1 for s in plan.sessions if s.completed)
            st.metric(
                "üìö Progression",
                f"{completed}/{plan.total_sessions}",
                f"{(completed/plan.total_sessions*100):.0f}%"
            )
        else:
            st.metric("üìö Sessions", "0/0", "Cr√©ez un plan")
    
    with col2:
        if plan and any(s.score for s in plan.sessions if s.completed):
            avg_score = sum(s.score for s in plan.sessions if s.completed and s.score) / sum(1 for s in plan.sessions if s.completed and s.score)
            st.metric("‚≠ê Score moyen", f"{avg_score*5:.1f}/5")
        else:
            st.metric("‚≠ê Score moyen", "N/A")
    
    with col3:
        if plan and plan.target_date:
            days_left = (plan.target_date - datetime.now().date()).days
            st.metric("üìÖ Jours restants", days_left, f"jusqu'au {plan.target_date.strftime('%d/%m')}")
        else:
            st.metric("üìÖ √âch√©ance", "Non d√©finie")
    
    with col4:
        if LLMS_AVAILABLE:
            active_models = len(st.session_state.preparation_state['ai_config'].get('models', []))
            st.metric("ü§ñ IA actives", active_models, "mod√®les")
        else:
            st.metric("ü§ñ IA", "Non configur√©e")
    
    with col5:
        if plan:
            total_questions = sum(len(s.questions) for s in plan.sessions)
            st.metric("‚ùì Questions", total_questions, "totales")
        else:
            st.metric("‚ùì Questions", "0")

def display_main_navigation():
    """Affiche la navigation principale avec lazy loading"""
    
    # Tabs principaux avec ic√¥nes am√©lior√©es
    tabs = st.tabs([
        "üöÄ Tableau de bord",
        "‚ú® Nouveau plan",
        "üìÖ S√©ances",
        "üìä Analytics",
        "ü§ñ IA & Fusion",
        "üìö Ressources",
        "‚öôÔ∏è Param√®tres"
    ])
    
    with tabs[0]:
        display_dashboard()
    
    with tabs[1]:
        display_new_preparation()
    
    with tabs[2]:
        display_sessions_management()
    
    with tabs[3]:
        display_analytics()
    
    with tabs[4]:
        display_ai_configuration()
    
    with tabs[5]:
        display_resources()
    
    with tabs[6]:
        display_settings()

def display_dashboard():
    """Affiche le tableau de bord principal"""
    st.markdown("### üöÄ Tableau de bord")
    
    plan = st.session_state.preparation_state.get('current_plan')
    
    if not plan:
        # √âtat vide avec call-to-action
        st.markdown("""
        <div class="prep-card fade-in" style="text-align: center; padding: 40px;">
            <h2>üëã Bienvenue dans votre espace de pr√©paration</h2>
            <p>Commencez par cr√©er un plan de pr√©paration personnalis√©</p>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns(3)
        with col2:
            if st.button("‚ú® Cr√©er mon premier plan", type="primary", use_container_width=True):
                st.session_state.selected_tab = 1
                st.rerun()
        return
    
    # Vue d'ensemble avec animations
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Progression visuelle
        st.markdown("#### üìà Progression globale")
        display_progress_visualization(plan)
        
        # Prochaine s√©ance
        next_session = get_next_session(plan)
        if next_session:
            st.markdown("#### üìÖ Prochaine s√©ance")
            display_session_card(next_session, is_next=True)
    
    with col2:
        # Statistiques rapides
        st.markdown("#### üìä Statistiques")
        display_quick_stats(plan)
        
        # Actions rapides
        st.markdown("#### ‚ö° Actions rapides")
        display_quick_actions(plan)

def display_progress_visualization(plan: PreparationPlan):
    """Affiche une visualisation de la progression"""
    # Cr√©er un graphique de progression interactif
    sessions_data = []
    for i, session in enumerate(plan.sessions):
        status = "Compl√©t√©e" if session.completed else "En attente"
        color = "#48bb78" if session.completed else "#cbd5e0"
        score = session.score * 5 if session.completed and session.score else None
        
        sessions_data.append({
            'Session': f"S{i+1}",
            'Status': status,
            'Score': score,
            'Color': color,
            'Title': session.theme
        })
    
    # Graphique en barres horizontales
    fig = go.Figure()
    
    # Barres de progression
    fig.add_trace(go.Bar(
        y=[d['Session'] for d in sessions_data],
        x=[1 for _ in sessions_data],
        orientation='h',
        marker_color=[d['Color'] for d in sessions_data],
        hovertemplate='%{text}<extra></extra>',
        text=[d['Title'] for d in sessions_data],
        showlegend=False
    ))
    
    # Scores
    scores = [d['Score'] for d in sessions_data if d['Score'] is not None]
    if scores:
        fig.add_trace(go.Scatter(
            y=[d['Session'] for d in sessions_data if d['Score'] is not None],
            x=[0.5 for _ in scores],
            mode='text',
            text=[f"‚≠ê {s:.1f}" for s in scores],
            textposition="middle center",
            showlegend=False
        ))
    
    fig.update_layout(
        height=300,
        margin=dict(l=0, r=0, t=0, b=0),
        xaxis=dict(showgrid=False, showticklabels=False, range=[0, 1]),
        yaxis=dict(showgrid=False),
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
    )
    
    st.plotly_chart(fig, use_container_width=True)

def get_next_session(plan: PreparationPlan) -> Optional[PreparationSession]:
    """Retourne la prochaine s√©ance non compl√©t√©e"""
    for session in plan.sessions:
        if not session.completed:
            return session
    return None

def display_session_card(session: PreparationSession, is_next: bool = False):
    """Affiche une carte de s√©ance"""
    card_class = "prep-card fade-in" if is_next else "question-card"
    
    st.markdown(f"""
    <div class="{card_class}">
        <h4>{session.title}</h4>
        <p><strong>Dur√©e:</strong> {session.duration_minutes} minutes</p>
        <p><strong>Questions:</strong> {len(session.questions)} | <strong>Exercices:</strong> {len(session.exercises)}</p>
    </div>
    """, unsafe_allow_html=True)
    
    if is_next:
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚ñ∂Ô∏è Commencer la s√©ance", type="primary", use_container_width=True):
                st.session_state.preparation_state['current_session'] = session.session_number
                st.session_state.selected_tab = 2
                st.rerun()
        with col2:
            if st.button("üìã Voir le d√©tail", use_container_width=True):
                st.session_state.show_session_detail = session.session_number

def display_quick_stats(plan: PreparationPlan):
    """Affiche les statistiques rapides"""
    completed = sum(1 for s in plan.sessions if s.completed)
    
    # Mini graphique en donut
    fig = go.Figure(data=[go.Pie(
        values=[completed, plan.total_sessions - completed],
        labels=['Compl√©t√©es', 'Restantes'],
        hole=.7,
        marker_colors=['#48bb78', '#e2e8f0']
    )])
    
    fig.update_traces(
        textinfo='none',
        hovertemplate='%{label}: %{value}<extra></extra>'
    )
    
    fig.update_layout(
        height=200,
        margin=dict(l=0, r=0, t=0, b=0),
        showlegend=False,
        annotations=[dict(
            text=f'{completed}/{plan.total_sessions}',
            x=0.5, y=0.5,
            font_size=24,
            showarrow=False
        )]
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Stats textuelles
    if completed > 0:
        avg_duration = sum(s.duration_minutes for s in plan.sessions if s.completed) / completed
        st.info(f"‚è±Ô∏è Dur√©e moyenne: {avg_duration:.0f} min/s√©ance")

def display_quick_actions(plan: PreparationPlan):
    """Affiche les actions rapides"""
    actions = []
    
    # D√©terminer les actions pertinentes
    next_session = get_next_session(plan)
    if next_session:
        if st.button("üöÄ S√©ance suivante", use_container_width=True):
            st.session_state.preparation_state['current_session'] = next_session.session_number
            st.session_state.selected_tab = 2
            st.rerun()
    
    if any(s.completed for s in plan.sessions):
        if st.button("üìä Voir l'analyse", use_container_width=True):
            st.session_state.selected_tab = 3
            st.rerun()
    
    if st.button("üìÑ Export PDF", use_container_width=True):
        export_plan_as_pdf(plan)

def display_new_preparation():
    """Interface de cr√©ation d'un nouveau plan"""
    st.markdown("### ‚ú® Cr√©ation d'un nouveau plan de pr√©paration")
    
    # Stepper pour guider l'utilisateur
    if 'creation_step' not in st.session_state:
        st.session_state.creation_step = 1
    
    # Afficher le stepper
    display_creation_stepper()
    
    # Contenu selon l'√©tape
    if st.session_state.creation_step == 1:
        display_step1_basics()
    elif st.session_state.creation_step == 2:
        display_step2_details()
    elif st.session_state.creation_step == 3:
        display_step3_ai_config()
    elif st.session_state.creation_step == 4:
        display_step4_review()

def display_creation_stepper():
    """Affiche le stepper de cr√©ation"""
    steps = [
        "üéØ Informations de base",
        "üìã D√©tails du cas",
        "ü§ñ Configuration IA",
        "‚úÖ Validation"
    ]
    
    cols = st.columns(len(steps))
    for i, (col, step) in enumerate(zip(cols, steps)):
        with col:
            is_active = i + 1 == st.session_state.creation_step
            is_completed = i + 1 < st.session_state.creation_step
            
            if is_active:
                st.markdown(f"**{step}**")
            elif is_completed:
                st.markdown(f"‚úì ~~{step}~~")
            else:
                st.markdown(f"<span style='color: #a0aec0;'>{step}</span>", unsafe_allow_html=True)

def display_step1_basics():
    """√âtape 1 : Informations de base"""
    st.markdown("#### üéØ Informations de base")
    
    col1, col2 = st.columns(2)
    
    with col1:
        prep_type = st.selectbox(
            "Type de proc√©dure",
            ["audition", "interrogatoire", "comparution", "confrontation", "expertise"],
            format_func=lambda x: {
                "audition": "üëÆ Audition police/gendarmerie",
                "interrogatoire": "üë®‚Äç‚öñÔ∏è Interrogatoire juge d'instruction",
                "comparution": "‚öñÔ∏è Comparution tribunal",
                "confrontation": "ü§ù Confrontation",
                "expertise": "üî¨ Expertise psychologique/psychiatrique"
            }.get(x, x.title()),
            key="step1_prep_type"
        )
        
        target_date = st.date_input(
            "Date de la proc√©dure",
            value=datetime.now().date() + timedelta(days=30),
            min_value=datetime.now().date(),
            key="step1_target_date"
        )
        
        nb_sessions = st.slider(
            "Nombre de s√©ances souhait√©es",
            min_value=3,
            max_value=15,
            value=7,
            help="Plus vous avez de temps, plus le nombre de s√©ances peut √™tre √©lev√©",
            key="step1_nb_sessions"
        )
    
    with col2:
        client_profile = st.selectbox(
            "Profil psychologique du client",
            ["anxieux", "confiant", "agressif", "fragile", "technique"],
            format_func=lambda x: {
                "anxieux": "üò∞ Anxieux - Besoin de r√©assurance",
                "confiant": "üòä Confiant - Maintenir la vigilance",
                "agressif": "üò† Agressif - Canaliser l'√©nergie",
                "fragile": "ü•∫ Fragile - Soutien renforc√©",
                "technique": "ü§ì Technique - Approche factuelle"
            }.get(x, x.title()),
            key="step1_profile"
        )
        
        experience = st.select_slider(
            "Exp√©rience judiciaire",
            options=["Aucune", "Limit√©e", "Mod√©r√©e", "Importante"],
            value="Limit√©e",
            key="step1_experience"
        )
        
        strategy = st.selectbox(
            "Strat√©gie de d√©fense",
            ["negation", "justification", "minimisation", "collaboration", "silence"],
            format_func=lambda x: {
                "negation": "‚ùå N√©gation des faits",
                "justification": "‚úÖ Justification/Explication",
                "minimisation": "üìâ Minimisation de l'implication",
                "collaboration": "ü§ù Collaboration mesur√©e",
                "silence": "ü§ê Exercice du droit au silence"
            }.get(x, x.title()),
            key="step1_strategy"
        )
    
    # Navigation
    col1, col2, col3 = st.columns([1, 2, 1])
    with col3:
        if st.button("Suivant ‚û°Ô∏è", type="primary", use_container_width=True):
            # Sauvegarder les donn√©es
            if 'prep_config' not in st.session_state:
                st.session_state.prep_config = {}
            
            st.session_state.prep_config.update({
                'prep_type': prep_type,
                'target_date': target_date,
                'nb_sessions': nb_sessions,
                'client_profile': client_profile,
                'experience': experience,
                'strategy': strategy
            })
            
            st.session_state.creation_step = 2
            st.rerun()

def display_step2_details():
    """√âtape 2 : D√©tails du cas"""
    st.markdown("#### üìã D√©tails du cas")
    
    # Contexte de l'affaire
    with st.expander("üìÇ Contexte de l'affaire", expanded=True):
        infractions = st.text_area(
            "Infractions reproch√©es",
            placeholder="Ex: Abus de biens sociaux, faux et usage de faux, blanchiment...",
            height=100,
            key="step2_infractions"
        )
        
        col1, col2 = st.columns(2)
        
        with col1:
            complexity = st.select_slider(
                "Complexit√© de l'affaire",
                options=["Simple", "Mod√©r√©e", "Complexe", "Tr√®s complexe"],
                value="Mod√©r√©e",
                key="step2_complexity"
            )
            
            media_attention = st.checkbox(
                "üì∞ Affaire m√©diatis√©e",
                help="N√©cessite une pr√©paration sp√©cifique pour g√©rer la pression m√©diatique",
                key="step2_media"
            )
        
        with col2:
            codefendants = st.number_input(
                "Nombre de co-mis en cause",
                min_value=0,
                max_value=20,
                value=0,
                key="step2_codefendants"
            )
            
            victim_type = st.selectbox(
                "Type de victime",
                ["Aucune", "Personne physique", "Personne morale", "√âtat/Administration", "Multiple"],
                key="step2_victim"
            )
    
    # Points sensibles
    with st.expander("‚ö†Ô∏è Points sensibles", expanded=True):
        col1, col2 = st.columns(2)
        
        with col1:
            factual_challenges = st.text_area(
                "Difficult√©s factuelles",
                placeholder="- Incoh√©rences temporelles\n- Absence de preuves directes\n- T√©moignages contradictoires",
                height=120,
                key="step2_factual"
            )
        
        with col2:
            emotional_challenges = st.text_area(
                "Difficult√©s √©motionnelles",
                placeholder="- Gestion du stress\n- Sentiment de culpabilit√©\n- Peur du jugement\n- Relation avec les co-accus√©s",
                height=120,
                key="step2_emotional"
            )
    
    # Domaines prioritaires
    st.markdown("##### üéØ Domaines de travail prioritaires")
    
    focus_areas = st.multiselect(
        "S√©lectionnez les domaines √† privil√©gier",
        [
            "üßò Gestion du stress et des √©motions",
            "üìñ Coh√©rence et fluidit√© du r√©cit",
            "‚ùì R√©ponses aux questions techniques",
            "üëÅÔ∏è Langage corporel et pr√©sentation",
            "ü§ê Gestion des silences et pauses",
            "üé£ Identification des questions pi√®ges",
            "üéØ Maintien de la ligne de d√©fense",
            "üó£Ô∏è Techniques de communication",
            "‚öñÔ∏è Compr√©hension de la proc√©dure",
            "ü§ù Gestion des confrontations"
        ],
        default=[
            "üßò Gestion du stress et des √©motions",
            "üìñ Coh√©rence et fluidit√© du r√©cit",
            "üé£ Identification des questions pi√®ges"
        ],
        key="step2_focus"
    )
    
    # Navigation
    col1, col2, col3 = st.columns([1, 2, 1])
    with col1:
        if st.button("‚¨ÖÔ∏è Pr√©c√©dent", use_container_width=True):
            st.session_state.creation_step = 1
            st.rerun()
    
    with col3:
        if st.button("Suivant ‚û°Ô∏è", type="primary", use_container_width=True):
            # Sauvegarder les donn√©es
            st.session_state.prep_config.update({
                'infractions': infractions,
                'complexity': complexity,
                'media_attention': media_attention,
                'codefendants': codefendants,
                'victim_type': victim_type,
                'factual_challenges': factual_challenges,
                'emotional_challenges': emotional_challenges,
                'focus_areas': focus_areas
            })
            
            st.session_state.creation_step = 3
            st.rerun()

def display_step3_ai_config():
    """√âtape 3 : Configuration des IA"""
    st.markdown("#### ü§ñ Configuration de l'intelligence artificielle")
    
    if not LLMS_AVAILABLE:
        st.warning("‚ö†Ô∏è Les mod√®les d'IA ne sont pas disponibles. Configuration simul√©e.")
        
        # Configuration simul√©e
        st.info("Dans la version compl√®te, vous pourrez configurer plusieurs mod√®les d'IA")
        
        models_simulation = st.multiselect(
            "Mod√®les disponibles (simulation)",
            ["GPT-4", "Claude 3", "Gemini Pro", "Mistral Large"],
            default=["GPT-4", "Claude 3"],
            key="step3_models_sim"
        )
        
        fusion_mode = st.checkbox(
            "üîÄ Activer le mode fusion",
            value=True,
            help="Combine les r√©ponses de plusieurs IA pour une meilleure qualit√©",
            key="step3_fusion_sim"
        )
    else:
        # Configuration r√©elle avec MultiLLMManager
        llm_manager = MultiLLMManager()
        available_models = list(llm_manager.clients.keys())
        
        st.markdown("##### ü§ñ S√©lection des mod√®les")
        
        # Affichage des mod√®les sous forme de badges
        selected_models = []
        cols = st.columns(min(len(available_models), 4))
        
        for i, model in enumerate(available_models):
            with cols[i % 4]:
                model_key = f"model_{model}"
                if st.checkbox(
                    model.replace("_", " ").title(),
                    value=True,
                    key=f"step3_{model_key}"
                ):
                    selected_models.append(model)
        
        if selected_models:
            st.success(f"‚úÖ {len(selected_models)} mod√®les s√©lectionn√©s")
            
            # Mode fusion
            fusion_mode = st.checkbox(
                "üîÄ Activer le mode fusion des IA",
                value=len(selected_models) > 1,
                help="Combine les r√©ponses de plusieurs IA pour optimiser la qualit√©",
                key="step3_fusion"
            )
            
            if fusion_mode and len(selected_models) > 1:
                fusion_strategy = st.radio(
                    "Strat√©gie de fusion",
                    ["consensus", "best_answer", "synthesis"],
                    format_func=lambda x: {
                        "consensus": "ü§ù Consensus - Privil√©gie les points communs",
                        "best_answer": "üèÜ Meilleure r√©ponse - S√©lectionne la plus pertinente",
                        "synthesis": "üîÑ Synth√®se - Combine toutes les r√©ponses"
                    }.get(x, x),
                    key="step3_fusion_strategy"
                )
            else:
                fusion_strategy = None
        else:
            st.error("‚ö†Ô∏è S√©lectionnez au moins un mod√®le")
            fusion_mode = False
            fusion_strategy = None
    
    # Param√®tres avanc√©s
    with st.expander("‚öôÔ∏è Param√®tres avanc√©s", expanded=False):
        col1, col2 = st.columns(2)
        
        with col1:
            temperature = st.slider(
                "Cr√©ativit√© des r√©ponses",
                min_value=0.0,
                max_value=1.0,
                value=0.7,
                step=0.1,
                help="Plus la valeur est √©lev√©e, plus les r√©ponses seront vari√©es",
                key="step3_temperature"
            )
            
            max_retries = st.number_input(
                "Tentatives en cas d'erreur",
                min_value=1,
                max_value=5,
                value=3,
                key="step3_retries"
            )
        
        with col2:
            response_length = st.select_slider(
                "Longueur des r√©ponses",
                options=["Concise", "Standard", "D√©taill√©e", "Tr√®s d√©taill√©e"],
                value="D√©taill√©e",
                key="step3_length"
            )
            
            language_style = st.selectbox(
                "Style de langage",
                ["Formel", "Semi-formel", "Accessible", "Tr√®s accessible"],
                index=2,
                key="step3_style"
            )
    
    # Navigation
    col1, col2, col3 = st.columns([1, 2, 1])
    with col1:
        if st.button("‚¨ÖÔ∏è Pr√©c√©dent", use_container_width=True):
            st.session_state.creation_step = 2
            st.rerun()
    
    with col3:
        if st.button("Suivant ‚û°Ô∏è", type="primary", use_container_width=True):
            # Sauvegarder la configuration IA
            if LLMS_AVAILABLE:
                ai_config = {
                    'models': selected_models,
                    'fusion_mode': fusion_mode,
                    'fusion_strategy': fusion_strategy,
                    'temperature': temperature,
                    'max_retries': max_retries,
                    'response_length': response_length,
                    'language_style': language_style
                }
            else:
                ai_config = {
                    'models': models_simulation if 'models_simulation' in locals() else [],
                    'fusion_mode': fusion_mode if 'fusion_mode' in locals() else False,
                    'temperature': 0.7
                }
            
            st.session_state.prep_config['ai_config'] = ai_config
            st.session_state.creation_step = 4
            st.rerun()

def display_step4_review():
    """√âtape 4 : R√©vision et validation"""
    st.markdown("#### ‚úÖ Validation du plan de pr√©paration")
    
    config = st.session_state.prep_config
    
    # R√©sum√© visuel
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("##### üìã R√©sum√© de votre plan")
        
        # Carte de r√©sum√© avec style
        st.markdown(f"""
        <div class="prep-card">
            <h4>üéØ {config['prep_type'].replace('_', ' ').title()}</h4>
            <p><strong>üìÖ Date cible:</strong> {config['target_date'].strftime('%d/%m/%Y')}</p>
            <p><strong>üìö Nombre de s√©ances:</strong> {config['nb_sessions']}</p>
            <p><strong>üë§ Profil client:</strong> {config['client_profile'].title()}</p>
            <p><strong>üéØ Strat√©gie:</strong> {config['strategy'].replace('_', ' ').title()}</p>
            <p><strong>üî• Complexit√©:</strong> {config.get('complexity', 'Mod√©r√©e')}</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Domaines de travail
        if config.get('focus_areas'):
            st.markdown("##### üéØ Domaines prioritaires")
            for area in config['focus_areas']:
                st.write(f"‚Ä¢ {area}")
    
    with col2:
        # Configuration IA
        st.markdown("##### ü§ñ Configuration IA")
        
        ai_config = config.get('ai_config', {})
        if ai_config.get('models'):
            st.info(f"**Mod√®les:** {len(ai_config['models'])}")
            for model in ai_config['models']:
                st.write(f"‚Ä¢ {model}")
            
            if ai_config.get('fusion_mode'):
                st.success("‚úÖ Mode fusion activ√©")
        else:
            st.warning("‚ö†Ô∏è Aucun mod√®le configur√©")
        
        # Estimation du temps
        total_minutes = config['nb_sessions'] * 120  # 2h par d√©faut
        total_hours = total_minutes / 60
        
        st.markdown("##### ‚è±Ô∏è Estimation")
        st.metric("Dur√©e totale", f"{total_hours:.1f} heures")
        
        days_available = (config['target_date'] - datetime.now().date()).days
        sessions_per_week = (config['nb_sessions'] * 7) / days_available if days_available > 0 else 0
        
        if sessions_per_week > 3:
            st.warning(f"‚ö†Ô∏è Rythme intensif: {sessions_per_week:.1f} s√©ances/semaine")
        else:
            st.success(f"‚úÖ Rythme adapt√©: {sessions_per_week:.1f} s√©ances/semaine")
    
    # Actions finales
    st.markdown("---")
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col1:
        if st.button("‚¨ÖÔ∏è Pr√©c√©dent", use_container_width=True):
            st.session_state.creation_step = 3
            st.rerun()
    
    with col2:
        # Options suppl√©mentaires
        save_as_template = st.checkbox(
            "üíæ Sauvegarder comme mod√®le",
            help="R√©utiliser cette configuration pour d'autres clients"
        )
        
        send_notifications = st.checkbox(
            "üìß Activer les notifications",
            value=True,
            help="Recevoir des rappels pour les s√©ances"
        )
    
    with col3:
        if st.button("üöÄ Cr√©er le plan", type="primary", use_container_width=True):
            with st.spinner("Cr√©ation du plan personnalis√©..."):
                # Cr√©er le plan
                plan = create_preparation_plan_from_config(config)
                
                if plan:
                    # Sauvegarder
                    st.session_state.preparation_state['current_plan'] = plan
                    
                    if save_as_template:
                        save_plan_template(config)
                    
                    if send_notifications:
                        setup_notifications(plan)
                    
                    # R√©initialiser et rediriger
                    st.session_state.creation_step = 1
                    del st.session_state.prep_config
                    
                    st.success("‚úÖ Plan cr√©√© avec succ√®s!")
                    st.balloons()
                    
                    time.sleep(2)
                    st.session_state.selected_tab = 0
                    st.rerun()

def create_preparation_plan_from_config(config: dict) -> PreparationPlan:
    """Cr√©e un plan de pr√©paration √† partir de la configuration"""
    
    # G√©n√©rer les s√©ances
    sessions = []
    
    # Th√®mes par type de pr√©paration
    themes_templates = get_themes_by_type(config['prep_type'])
    
    # Adapter au nombre de s√©ances
    if config['nb_sessions'] > len(themes_templates):
        themes_templates.extend([
            "R√©vision et consolidation",
            "Points sensibles approfondis",
            "Simulation compl√©mentaire"
        ] * ((config['nb_sessions'] - len(themes_templates)) // 3 + 1))
    
    themes = themes_templates[:config['nb_sessions']]
    
    # Cr√©er chaque s√©ance
    for i in range(config['nb_sessions']):
        # G√©n√©rer le contenu avec IA si disponible
        if LLMS_AVAILABLE and config.get('ai_config', {}).get('models'):
            questions = generate_ai_questions(
                session_num=i+1,
                theme=themes[i],
                config=config
            )
        else:
            questions = generate_default_session_questions(themes[i])
        
        exercises = generate_session_exercises_enhanced(
            themes[i],
            config['client_profile'],
            config.get('focus_areas', [])
        )
        
        session = PreparationSession(
            session_number=i + 1,
            title=f"S√©ance {i + 1}: {themes[i]}",
            theme=themes[i],
            objectives=generate_session_objectives_enhanced(themes[i], config),
            duration_minutes=120,  # Par d√©faut
            questions=questions,
            exercises=exercises,
            key_points=generate_key_points(themes[i], config),
            homework=generate_homework_enhanced(i + 1, themes[i], config),
            ai_models_used=config.get('ai_config', {}).get('models', [])
        )
        
        sessions.append(session)
    
    # Cr√©er le plan
    plan = PreparationPlan(
        total_sessions=config['nb_sessions'],
        sessions=sessions,
        prep_type=config['prep_type'],
        client_profile=config['client_profile'],
        strategy=config['strategy'],
        created_date=datetime.now(),
        target_date=config['target_date'],
        ai_models_config=config.get('ai_config', {})
    )
    
    return plan

def get_themes_by_type(prep_type: str) -> List[str]:
    """Retourne les th√®mes selon le type de pr√©paration"""
    themes = {
        "audition": [
            "Cadre juridique et droits fondamentaux",
            "Construction du r√©cit factuel",
            "Questions sur les faits",
            "Gestion des questions pi√®ges",
            "Communication non-verbale",
            "Simulation d'audition compl√®te",
            "D√©briefing et ajustements"
        ],
        "interrogatoire": [
            "Proc√©dure d'instruction et droits",
            "Strat√©gie face au magistrat",
            "R√©cit d√©fensif structur√©",
            "Gestion des confrontations aux preuves",
            "Questions techniques approfondies",
            "Simulation d'interrogatoire",
            "Pr√©paration psychologique finale"
        ],
        "comparution": [
            "D√©roulement de l'audience",
            "Pr√©sentation personnelle impactante",
            "Exposition claire des faits",
            "R√©ponses au tribunal",
            "Gestion de la partie civile",
            "D√©claration finale",
            "R√©p√©tition g√©n√©rale"
        ],
        "confrontation": [
            "Enjeux et cadre de la confrontation",
            "Maintien de sa version",
            "Gestion des accusations directes",
            "Techniques de d√©stabilisation",
            "Communication assertive",
            "Jeux de r√¥le intensifs",
            "Strat√©gies adaptatives"
        ],
        "expertise": [
            "Objectifs de l'expertise",
            "Pr√©paration du discours",
            "Questions psychologiques types",
            "Coh√©rence avec le dossier",
            "Tests et √©valuations",
            "Simulation d'expertise",
            "Consolidation finale"
        ]
    }
    
    return themes.get(prep_type, themes["audition"])

def generate_ai_questions(session_num: int, theme: str, config: dict) -> List[Dict[str, str]]:
    """G√©n√®re des questions avec l'IA"""
    if not LLMS_AVAILABLE:
        return generate_default_session_questions(theme)
    
    llm_manager = MultiLLMManager()
    ai_config = config.get('ai_config', {})
    
    prompt = f"""G√©n√®re 15 questions pr√©cises et pertinentes pour la s√©ance {session_num} de pr√©paration.
CONTEXTE:
- Type: {config['prep_type']}
- Th√®me: {theme}
- Profil: {config['client_profile']}
- Strat√©gie: {config['strategy']}
- Infractions: {config.get('infractions', 'Non pr√©cis√©es')}
- Complexit√©: {config.get('complexity', 'Mod√©r√©e')}

Format pour chaque question:
1. Question principale
2. R√©ponse sugg√©r√©e adapt√©e √† la strat√©gie
3. 2-3 variantes de la question
4. Points d'attention/pi√®ges
5. Niveau de difficult√© (1-5)
"""
    
    system_prompt = """Tu es un expert en pr√©paration judiciaire avec 20 ans d'exp√©rience.
Tu connais parfaitement les techniques d'interrogatoire et les strat√©gies de d√©fense.
G√©n√®re des questions r√©alistes et adapt√©es au profil du client."""
    
    questions = []
    
    if ai_config.get('fusion_mode') and len(ai_config.get('models', [])) > 1:
        # Mode fusion
        all_responses = []
        
        for model in ai_config['models']:
            response = llm_manager.query_single_llm(
                model,
                prompt,
                system_prompt,
                temperature=ai_config.get('temperature', 0.7)
            )
            
            if response['success']:
                all_responses.append(response['response'])
        
        if all_responses:
            # Fusionner les r√©ponses
            if ai_config.get('fusion_strategy') == 'consensus':
                questions = merge_questions_consensus(all_responses)
            elif ai_config.get('fusion_strategy') == 'best_answer':
                questions = select_best_questions(all_responses)
            else:  # synthesis
                questions = synthesize_questions(all_responses)
    else:
        # Mode simple
        model = ai_config['models'][0] if ai_config.get('models') else list(llm_manager.clients.keys())[0]
        
        response = llm_manager.query_single_llm(
            model,
            prompt,
            system_prompt,
            temperature=ai_config.get('temperature', 0.7)
        )
        
        if response['success']:
            questions = parse_ai_questions(response['response'])
    
    # Fallback si pas de questions
    if not questions:
        questions = generate_default_session_questions(theme)
    
    return questions

def generate_default_session_questions(theme: str) -> List[Dict[str, str]]:
    """G√©n√®re des questions par d√©faut pour une s√©ance"""
    
    questions_templates = {
        "Cadre juridique et droits fondamentaux": [
            {
                'question': "Connaissez-vous vos droits lors d'une audition ?",
                'answer': "J'ai le droit de me taire, d'√™tre assist√© par un avocat, et d'√™tre inform√© des faits qui me sont reproch√©s.",
                'variants': ["Quels sont vos droits ?", "Savez-vous ce que vous pouvez faire ou ne pas faire ?"],
                'attention_points': "Ne pas h√©siter, montrer qu'on conna√Æt ses droits",
                'difficulty': 2
            },
            {
                'question': "Souhaitez-vous faire des d√©clarations ?",
                'answer': "Je souhaite d'abord consulter mon avocat avant toute d√©claration.",
                'variants': ["Voulez-vous vous exprimer ?", "Avez-vous quelque chose √† dire ?"],
                'attention_points': "Question d'ouverture classique, rester prudent",
                'difficulty': 3
            }
        ]
    }
    
    # Retourner les questions du th√®me ou des questions g√©n√©riques
    return questions_templates.get(theme, [
        {
            'question': f"Question type sur {theme}",
            'answer': "R√©ponse √† adapter selon le cas",
            'variants': [],
            'attention_points': "√Ä personnaliser",
            'difficulty': 3
        }
    ] * 5)

def parse_ai_questions(response: str) -> List[Dict[str, str]]:
    """Parse la r√©ponse de l'IA pour extraire les questions"""
    questions = []
    current_question = None
    
    lines = response.split('\n')
    
    for line in lines:
        line = line.strip()
        
        # D√©tecter une nouvelle question
        if re.match(r'^\d+\.?\s*Question|^Question\s*\d+', line, re.IGNORECASE):
            if current_question:
                questions.append(current_question)
            
            current_question = {
                'question': re.sub(r'^\d+\.?\s*Question\s*\d*:?\s*', '', line, flags=re.IGNORECASE).strip(),
                'answer': '',
                'variants': [],
                'attention_points': '',
                'difficulty': 3
            }
        
        elif current_question:
            # Parser les diff√©rents √©l√©ments
            if any(marker in line.lower() for marker in ['r√©ponse:', 'r:', 'answer:']):
                current_question['answer'] = re.sub(r'^(r√©ponse|r|answer)\s*:?\s*', '', line, flags=re.IGNORECASE).strip()
            
            elif any(marker in line.lower() for marker in ['variante', 'variant']):
                variant = re.sub(r'(variante|variant)\s*\d*\s*:?\s*', '', line, flags=re.IGNORECASE).strip()
                if variant:
                    current_question['variants'].append(variant)
            
            elif any(marker in line.lower() for marker in ['attention', 'pi√®ge', 'trap']):
                current_question['attention_points'] = re.sub(r'^(attention|pi√®ge|trap)\s*:?\s*', '', line, flags=re.IGNORECASE).strip()
            
            elif any(marker in line.lower() for marker in ['difficult√©', 'difficulty', 'niveau']):
                match = re.search(r'\d', line)
                if match:
                    current_question['difficulty'] = int(match.group())
    
    # Ajouter la derni√®re question
    if current_question:
        questions.append(current_question)
    
    return questions

def merge_questions_consensus(responses: List[str]) -> List[Dict[str, str]]:
    """Fusionne les questions en privil√©giant le consensus"""
    all_questions = []
    
    for response in responses:
        questions = parse_ai_questions(response)
        all_questions.extend(questions)
    
    # Grouper les questions similaires
    merged = []
    seen = set()
    
    for q in all_questions:
        q_lower = q['question'].lower()
        if q_lower not in seen:
            seen.add(q_lower)
            # Chercher les variantes dans les autres r√©ponses
            similar = [other for other in all_questions if other['question'].lower() == q_lower]
            
            if len(similar) > 1:
                # Fusionner les r√©ponses
                q['answer'] = max([s['answer'] for s in similar], key=len)
                q['variants'] = list(set(sum([s['variants'] for s in similar], [])))
                q['difficulty'] = round(sum(s['difficulty'] for s in similar) / len(similar))
            
            merged.append(q)
    
    return merged[:15]  # Limiter √† 15 questions

def select_best_questions(responses: List[str]) -> List[Dict[str, str]]:
    """S√©lectionne les meilleures questions parmi toutes les r√©ponses"""
    all_questions = []
    
    for response in responses:
        questions = parse_ai_questions(response)
        all_questions.extend(questions)
    
    # Scorer les questions
    for q in all_questions:
        score = 0
        # Crit√®res de qualit√©
        if len(q['question']) > 20:
            score += 1
        if q['answer']:
            score += 2
        if q['variants']:
            score += 1
        if q['attention_points']:
            score += 2
        
        q['_score'] = score
    
    # Trier par score et prendre les meilleures
    all_questions.sort(key=lambda x: x.get('_score', 0), reverse=True)
    
    # Retirer le score temporaire
    for q in all_questions:
        q.pop('_score', None)
    
    return all_questions[:15]

def synthesize_questions(responses: List[str]) -> List[Dict[str, str]]:
    """Synth√©tise toutes les r√©ponses en un ensemble coh√©rent"""
    # Combiner toutes les questions
    all_questions = []
    
    for response in responses:
        questions = parse_ai_questions(response)
        all_questions.extend(questions)
    
    # √âliminer les doublons exacts
    unique_questions = []
    seen_questions = set()
    
    for q in all_questions:
        q_key = q['question'].lower().strip()
        if q_key not in seen_questions:
            seen_questions.add(q_key)
            unique_questions.append(q)
    
    # Enrichir avec les meilleures parties de chaque r√©ponse
    for i, q in enumerate(unique_questions):
        # Trouver toutes les versions de cette question
        similar = [
            other for other in all_questions 
            if other['question'].lower().strip() == q['question'].lower().strip()
        ]
        
        if similar:
            # Prendre la meilleure r√©ponse
            best_answer = max([s['answer'] for s in similar if s['answer']], key=len, default=q['answer'])
            q['answer'] = best_answer
            
            # Combiner toutes les variantes uniques
            all_variants = sum([s['variants'] for s in similar], [])
            q['variants'] = list(set(all_variants))[:3]
            
            # Combiner les points d'attention
            attention_points = [s['attention_points'] for s in similar if s['attention_points']]
            if attention_points:
                q['attention_points'] = " | ".join(set(attention_points))
    
    return unique_questions[:15]

def generate_session_exercises_enhanced(theme: str, profile: str, focus_areas: List[str]) -> List[Dict[str, Any]]:
    """G√©n√®re des exercices am√©lior√©s pour une s√©ance"""
    
    exercises = []
    
    # Base d'exercices par th√®me
    theme_exercises = {
        "stress": [
            {
                "title": "Coh√©rence cardiaque",
                "description": "Respiration rythm√©e 5-5-5 pour r√©guler le stress",
                "duration": 5,
                "type": "relaxation",
                "difficulty": 1,
                "instructions": [
                    "Inspirez pendant 5 secondes",
                    "Expirez pendant 5 secondes",
                    "R√©p√©tez pendant 5 minutes"
                ]
            },
            {
                "title": "Scan corporel",
                "description": "D√©tection et rel√¢chement des tensions",
                "duration": 10,
                "type": "mindfulness",
                "difficulty": 2
            }
        ],
        "communication": [
            {
                "title": "Reformulation active",
                "description": "S'entra√Æner √† reformuler les questions avant de r√©pondre",
                "duration": 15,
                "type": "practice",
                "difficulty": 3,
                "scenario": "Face √† une question complexe, reformulez pour clarifier"
            }
        ],
        "coherence": [
            {
                "title": "Timeline interactive",
                "description": "Cr√©er une chronologie visuelle des √©v√©nements",
                "duration": 20,
                "type": "organization",
                "difficulty": 2,
                "tools": ["Post-it", "Tableau blanc", "Application timeline"]
            }
        ]
    }
    
    # Mapper les focus areas aux exercices
    area_mapping = {
        "üßò Gestion du stress et des √©motions": "stress",
        "üìñ Coh√©rence et fluidit√© du r√©cit": "coherence",
        "üó£Ô∏è Techniques de communication": "communication"
    }
    
    # Ajouter les exercices pertinents
    for area in focus_areas:
        category = area_mapping.get(area)
        if category and category in theme_exercises:
            exercises.extend(theme_exercises[category])
    
    # Exercices sp√©cifiques au profil
    profile_exercises = {
        "anxieux": {
            "title": "Ancrage positif",
            "description": "Cr√©er un ancrage mental pour retrouver le calme",
            "duration": 10,
            "type": "cognitive",
            "difficulty": 2
        },
        "agressif": {
            "title": "Stop and think",
            "description": "Technique de pause r√©flexive avant r√©ponse",
            "duration": 5,
            "type": "control",
            "difficulty": 3
        }
    }
    
    if profile in profile_exercises and len(exercises) < 5:
        exercises.append(profile_exercises[profile])
    
    # Limiter et varier les types
    return exercises[:5]

def generate_session_objectives_enhanced(theme: str, config: dict) -> List[str]:
    """G√©n√®re des objectifs am√©lior√©s pour une s√©ance"""
    
    base_objectives = {
        "Cadre juridique et droits fondamentaux": [
            "‚úÖ Ma√Ætriser parfaitement ses droits en proc√©dure",
            "üìö Comprendre le cadre l√©gal et ses implications",
            "üéØ Identifier les enjeux sp√©cifiques √† son cas",
            "üí° Savoir quand et comment exercer ses droits"
        ]
    }
    
    objectives = base_objectives.get(theme, [
        f"‚úÖ Ma√Ætriser les aspects essentiels de : {theme}",
        "üìà Progresser dans la pr√©paration globale",
        "üí™ Renforcer la confiance en soi",
        "üéØ Atteindre les objectifs fix√©s"
    ])
    
    # Personnaliser selon le profil
    if config['client_profile'] == 'anxieux':
        objectives.append("üßò Pratiquer des techniques de gestion du stress adapt√©es")
    elif config['client_profile'] == 'technique':
        objectives.append("üìä Approfondir les aspects techniques et factuels")
    
    return objectives[:5]

def generate_key_points(theme: str, config: dict) -> List[str]:
    """G√©n√®re les points cl√©s pour une s√©ance"""
    
    key_points = [
        f"üéØ Focus principal : {theme}",
        f"‚öñÔ∏è Strat√©gie √† maintenir : {config['strategy']}",
        "üìù Prendre des notes sur les difficult√©s rencontr√©es",
        "‚úÖ Valider la compr√©hension avant de passer au suivant"
    ]
    
    # Ajouter des points sp√©cifiques
    if config.get('media_attention'):
        key_points.append("üì∞ Anticiper les questions li√©es √† la m√©diatisation")
    
    if config.get('codefendants', 0) > 0:
        key_points.append("ü§ù Maintenir la coh√©rence avec la d√©fense collective")
    
    return key_points

def generate_homework_enhanced(session_num: int, theme: str, config: dict) -> str:
    """G√©n√®re des devoirs personnalis√©s entre les s√©ances"""
    
    homework_base = {
        1: "üìñ Relire et m√©moriser ses droits, cr√©er une fiche aide-m√©moire personnelle",
        2: "üìÖ √âtablir une chronologie d√©taill√©e avec dates, lieux et personnes",
        3: "üéôÔ∏è S'enregistrer en r√©pondant aux questions cl√©s (audio ou vid√©o)",
        4: "üé£ Lister 10 questions pi√®ges possibles et pr√©parer les r√©ponses",
        5: "üé≠ Pratiquer devant miroir : posture, regard, gestuelle",
        6: "üéÆ Simulation compl√®te avec un proche jouant l'enqu√™teur",
        7: "üßò R√©vision g√©n√©rale + exercices de relaxation"
    }
    
    homework = homework_base.get(session_num, f"üìù R√©viser les acquis de la s√©ance {session_num}")
    
    # Personnaliser selon le profil
    profile_additions = {
        "anxieux": " + 15 min de m√©ditation quotidienne",
        "technique": " + cr√©er un glossaire des termes techniques",
        "fragile": " + tenir un journal de progression positive"
    }
    
    if config['client_profile'] in profile_additions:
        homework += profile_additions[config['client_profile']]
    
    return homework

def display_sessions_management():
    """Gestion des s√©ances avec interface am√©lior√©e"""
    st.markdown("### üìÖ Gestion des s√©ances")
    
    plan = st.session_state.preparation_state.get('current_plan')
    
    if not plan:
        st.info("üëÜ Cr√©ez d'abord un plan de pr√©paration")
        return
    
    # Vue d'ensemble interactive
    display_sessions_overview(plan)
    
    # S√©lecteur de s√©ance am√©lior√©
    st.markdown("#### üìö S√©lectionner une s√©ance")
    
    # Affichage en grille
    cols = st.columns(4)
    selected_session = None
    
    for i, session in enumerate(plan.sessions):
        with cols[i % 4]:
            # Statut visuel
            if session.completed:
                status_icon = "‚úÖ"
                status_color = "#48bb78"
                status_text = f"Score: {session.score*5:.1f}/5" if session.score else "Compl√©t√©e"
            else:
                status_icon = "‚è≥" if i == 0 or (i > 0 and plan.sessions[i-1].completed) else "üîí"
                status_color = "#f6e05e" if status_icon == "‚è≥" else "#cbd5e0"
                status_text = "Disponible" if status_icon == "‚è≥" else "Verrouill√©e"
            
            # Carte de s√©ance cliquable
            if st.button(
                f"{status_icon} S√©ance {session.session_number}\n{session.theme[:20]}...\n{status_text}",
                key=f"session_card_{i}",
                use_container_width=True,
                disabled=(status_icon == "üîí")
            ):
                selected_session = i
    
    # D√©tail de la s√©ance s√©lectionn√©e
    if selected_session is not None or 'current_session_view' in st.session_state:
        if selected_session is not None:
            st.session_state.current_session_view = selected_session
        
        session_idx = st.session_state.current_session_view
        session = plan.sessions[session_idx]
        
        st.markdown("---")
        display_session_detail(session, session_idx, plan)

def display_sessions_overview(plan: PreparationPlan):
    """Vue d'ensemble des s√©ances avec visualisation am√©lior√©e"""
    
    # Timeline interactive
    fig = create_interactive_timeline(plan)
    st.plotly_chart(fig, use_container_width=True)

def create_interactive_timeline(plan: PreparationPlan) -> go.Figure:
    """Cr√©e une timeline interactive des s√©ances"""
    
    # Calculer les positions
    total_days = (plan.target_date - plan.created_date.date()).days if plan.target_date else 30
    
    # Donn√©es pour le graphique
    x_positions = []
    y_positions = []
    colors = []
    texts = []
    sizes = []
    
    for i, session in enumerate(plan.sessions):
        # Position X (date estim√©e)
        progress = (i + 1) / (plan.total_sessions + 1)
        estimated_date = plan.created_date + timedelta(days=int(total_days * progress))
        x_positions.append(estimated_date)
        
        # Position Y (altern√©e pour √©viter le chevauchement)
        y_positions.append(1 + (i % 2) * 0.5)
        
        # Couleur selon statut
        if session.completed:
            colors.append('#48bb78')
            size = 20
        elif i == 0 or (i > 0 and plan.sessions[i-1].completed):
            colors.append('#f6e05e')
            size = 18
        else:
            colors.append('#cbd5e0')
            size = 15
        
        sizes.append(size)
        
        # Texte
        status = "‚úÖ" if session.completed else ("‚è≥" if size == 18 else "üîí")
        texts.append(f"{status} S{session.session_number}<br>{session.theme[:25]}...")
    
    # Cr√©er le graphique
    fig = go.Figure()
    
    # Ligne de base
    fig.add_trace(go.Scatter(
        x=[plan.created_date, plan.target_date or (plan.created_date + timedelta(days=total_days))],
        y=[1.25, 1.25],
        mode='lines',
        line=dict(color='#e2e8f0', width=3),
        showlegend=False
    ))
    
    # Points des s√©ances
    fig.add_trace(go.Scatter(
        x=x_positions,
        y=y_positions,
        mode='markers+text',
        marker=dict(
            size=sizes,
            color=colors,
            line=dict(width=2, color='white')
        ),
        text=texts,
        textposition="top center",
        showlegend=False,
        hovertemplate='%{text}<extra></extra>'
    ))
    
    # Aujourd'hui
    fig.add_vline(
        x=datetime.now(), 
        line_dash="dash", 
        line_color="red",
        annotation_text="Aujourd'hui",
        annotation_position="top"
    )
    
    # Mise en page
    fig.update_layout(
        height=250,
        xaxis=dict(
            showgrid=False,
            zeroline=False,
            range=[plan.created_date - timedelta(days=5), 
                   (plan.target_date or plan.created_date + timedelta(days=total_days)) + timedelta(days=5)]
        ),
        yaxis=dict(
            showgrid=False,
            showticklabels=False,
            zeroline=False,
            range=[0.5, 2.5]
        ),
        plot_bgcolor='white',
        margin=dict(l=0, r=0, t=30, b=0)
    )
    
    return fig

def display_session_detail(session: PreparationSession, session_idx: int, plan: PreparationPlan):
    """Affiche le d√©tail d'une s√©ance avec interface am√©lior√©e"""
    
    # En-t√™te de la s√©ance
    col1, col2, col3 = st.columns([3, 1, 1])
    
    with col1:
        st.markdown(f"## {session.title}")
    
    with col2:
        if session.completed:
            st.success(f"‚úÖ Score: {session.score*5:.1f}/5")
        else:
            st.info("‚è≥ √Ä faire")
    
    with col3:
        if session.completed:
            st.metric("Date", session.completion_date.strftime("%d/%m"))
    
    # Tabs pour le contenu
    tabs = st.tabs([
        "üìã Vue d'ensemble",
        "‚ùì Questions IA",
        "üéØ Exercices",
        "üìù Notes",
        "üìä √âvaluation",
        "ü§ñ IA utilis√©es"
    ])
    
    with tabs[0]:
        display_session_overview_enhanced(session)
    
    with tabs[1]:
        display_session_questions_ai(session, plan)
    
    with tabs[2]:
        display_session_exercises_interactive(session)
    
    with tabs[3]:
        display_session_notes_enhanced(session, session_idx)
    
    with tabs[4]:
        if session.completed:
            display_session_results(session)
        else:
            display_session_completion(session, session_idx, plan)
    
    with tabs[5]:
        display_session_ai_info(session, plan)

def display_session_overview_enhanced(session: PreparationSession):
    """Vue d'ensemble am√©lior√©e de la s√©ance"""
    
    # M√©triques visuelles
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("‚è±Ô∏è Dur√©e", f"{session.duration_minutes} min")
    
    with col2:
        st.metric("‚ùì Questions", len(session.questions))
    
    with col3:
        st.metric("üéØ Exercices", len(session.exercises))
    
    with col4:
        difficulty_avg = sum(q.get('difficulty', 3) for q in session.questions) / len(session.questions) if session.questions else 3
        st.metric("üî• Difficult√©", f"{difficulty_avg:.1f}/5")
    
    # Objectifs avec progression
    st.markdown("### üéØ Objectifs de la s√©ance")
    
    for i, obj in enumerate(session.objectives):
        col1, col2 = st.columns([4, 1])
        
        with col1:
            st.write(obj)
        
        with col2:
            if session.completed:
                # Supposer que les objectifs sont atteints si la s√©ance est compl√©t√©e
                st.success("‚úÖ")
            else:
                st.write("‚≠ï")
    
    # Points cl√©s avec mise en valeur
    if session.key_points:
        st.markdown("### üìå Points cl√©s √† retenir")
        
        for point in session.key_points:
            st.info(f"üí° {point}")
    
    # Devoir avec rappel
    if session.homework:
        st.markdown("### üìù Travail personnel")
        
        st.warning(f"üìö **√Ä faire avant la prochaine s√©ance:**\n\n{session.homework}")

def display_session_questions_ai(session: PreparationSession, plan: PreparationPlan):
    """Affiche les questions avec fonctionnalit√©s IA avanc√©es"""
    
    st.markdown(f"### ‚ùì {len(session.questions)} questions g√©n√©r√©es par IA")
    
    # Options d'affichage et de pratique
    col1, col2, col3 = st.columns(3)
    
    with col1:
        display_mode = st.selectbox(
            "Mode d'affichage",
            ["üìÑ Liste compl√®te", "üéØ Mode pratique", "üÉè Flashcards", "üéÆ Quiz interactif"],
            key=f"questions_mode_{session.session_number}"
        )
    
    with col2:
        difficulty_filter = st.select_slider(
            "Filtrer par difficult√©",
            options=["Toutes", "‚≠ê", "‚≠ê‚≠ê", "‚≠ê‚≠ê‚≠ê", "‚≠ê‚≠ê‚≠ê‚≠ê", "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"],
            value="Toutes",
            key=f"diff_filter_ai_{session.session_number}"
        )
    
    with col3:
        if LLMS_AVAILABLE and plan.ai_models_config.get('models'):
            regenerate_with_ai = st.button(
                "üîÑ R√©g√©n√©rer avec IA",
                key=f"regen_questions_{session.session_number}"
            )
            
            if regenerate_with_ai:
                with st.spinner("G√©n√©ration de nouvelles questions..."):
                    new_questions = generate_ai_questions(
                        session.session_number,
                        session.theme,
                        {'ai_config': plan.ai_models_config}
                    )
                    session.questions = new_questions
                    st.success("‚úÖ Questions r√©g√©n√©r√©es!")
                    st.rerun()
    
    # Filtrer les questions
    filtered_questions = filter_questions_by_difficulty(session.questions, difficulty_filter)
    
    # Affichage selon le mode
    if display_mode == "üìÑ Liste compl√®te":
        display_questions_list(filtered_questions, session)
    elif display_mode == "üéØ Mode pratique":
        display_practice_mode(filtered_questions, session)
    elif display_mode == "üÉè Flashcards":
        display_flashcards_mode(filtered_questions, session)
    else:  # Quiz interactif
        display_quiz_mode(filtered_questions, session)

def filter_questions_by_difficulty(questions: List[Dict], filter_value: str) -> List[Dict]:
    """Filtre les questions par difficult√©"""
    if filter_value == "Toutes":
        return questions
    
    # Convertir le filtre en nombre
    difficulty_map = {"‚≠ê": 1, "‚≠ê‚≠ê": 2, "‚≠ê‚≠ê‚≠ê": 3, "‚≠ê‚≠ê‚≠ê‚≠ê": 4, "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê": 5}
    target_difficulty = difficulty_map.get(filter_value, 3)
    
    return [q for q in questions if q.get('difficulty', 3) == target_difficulty]

def display_questions_list(questions: List[Dict], session: PreparationSession):
    """Affiche la liste compl√®te des questions"""
    
    for i, q in enumerate(questions, 1):
        with st.expander(
            f"Q{i}: {q['question'][:60]}... {'‚≠ê' * q.get('difficulty', 3)}",
            expanded=(i <= 3)  # Premi√®res questions ouvertes
        ):
            # Question
            st.markdown(f"**‚ùì Question compl√®te:**")
            st.info(q['question'])
            
            # R√©ponse sugg√©r√©e
            st.markdown("**‚úÖ R√©ponse sugg√©r√©e:**")
            st.success(q.get('answer', 'R√©ponse √† personnaliser selon votre cas'))
            
            # Variantes
            if q.get('variants'):
                st.markdown("**üîÑ Variantes possibles:**")
                for v in q['variants']:
                    st.write(f"‚Ä¢ {v}")
            
            # Points d'attention
            if q.get('attention_points'):
                st.warning(f"‚ö†Ô∏è **Attention:** {q['attention_points']}")
            
            # Actions
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("üéØ S'entra√Æner", key=f"train_q_{session.session_number}_{i}"):
                    st.session_state.practice_question = q
                    st.session_state.practice_mode = True
            
            with col2:
                if st.button("üìù Prendre des notes", key=f"notes_q_{session.session_number}_{i}"):
                    if f"q_notes_{session.session_number}_{i}" not in st.session_state:
                        st.session_state[f"q_notes_{session.session_number}_{i}"] = ""
                    
                    notes = st.text_area(
                        "Vos notes",
                        value=st.session_state[f"q_notes_{session.session_number}_{i}"],
                        key=f"q_notes_area_{session.session_number}_{i}"
                    )
                    
                    if st.button("üíæ Sauvegarder", key=f"save_q_notes_{session.session_number}_{i}"):
                        st.session_state[f"q_notes_{session.session_number}_{i}"] = notes
                        st.success("Notes sauvegard√©es!")
            
            with col3:
                if LLMS_AVAILABLE:
                    if st.button("ü§ñ Am√©liorer avec IA", key=f"improve_q_{session.session_number}_{i}"):
                        improved = improve_question_with_ai(q)
                        if improved:
                            session.questions[i-1] = improved
                            st.success("Question am√©lior√©e!")
                            st.rerun()

def display_practice_mode(questions: List[Dict], session: PreparationSession):
    """Mode pratique interactif"""
    
    if not questions:
        st.warning("Aucune question disponible avec ces crit√®res")
        return
    
    # Initialiser l'index de pratique
    if f'practice_idx_{session.session_number}' not in st.session_state:
        st.session_state[f'practice_idx_{session.session_number}'] = 0
    
    idx = st.session_state[f'practice_idx_{session.session_number}'] % len(questions)
    current_q = questions[idx]
    
    # Affichage de la question
    st.markdown(f"### Question {idx + 1}/{len(questions)}")
    
    # Barre de progression
    progress = (idx + 1) / len(questions)
    st.progress(progress)
    
    # Question avec style
    st.markdown(f"""
    <div class="question-card" style="font-size: 1.2em; padding: 30px;">
        {current_q['question']}
    </div>
    """, unsafe_allow_html=True)
    
    # Difficult√©
    st.write(f"Difficult√©: {'‚≠ê' * current_q.get('difficulty', 3)}")
    
    # Zone de r√©ponse
    user_answer = st.text_area(
        "Votre r√©ponse:",
        height=150,
        placeholder="Prenez le temps de formuler votre r√©ponse...",
        key=f"practice_answer_{session.session_number}_{idx}"
    )
    
    # Chronom√®tre optionnel
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("‚è±Ô∏è Activer chronom√®tre", key=f"timer_{session.session_number}_{idx}"):
            st.session_state[f'timer_start_{session.session_number}'] = datetime.now()
    
    with col2:
        if f'timer_start_{session.session_number}' in st.session_state:
            elapsed = (datetime.now() - st.session_state[f'timer_start_{session.session_number}']).seconds
            st.metric("Temps √©coul√©", f"{elapsed//60}:{elapsed%60:02d}")
    
    # Actions
    st.markdown("---")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üëÅÔ∏è Voir la r√©ponse", key=f"show_{session.session_number}_{idx}"):
            st.success(f"**R√©ponse sugg√©r√©e:**\n\n{current_q.get('answer', 'Pas de r√©ponse type')}")
            
            if current_q.get('attention_points'):
                st.warning(f"‚ö†Ô∏è {current_q['attention_points']}")
    
    with col2:
        if st.button("üîÑ Variantes", key=f"variants_{session.session_number}_{idx}"):
            if current_q.get('variants'):
                st.info("**Autres formulations:**")
                for v in current_q['variants']:
                    st.write(f"‚Ä¢ {v}")
    
    with col3:
        if st.button("‚û°Ô∏è Suivante", key=f"next_{session.session_number}_{idx}", type="primary"):
            st.session_state[f'practice_idx_{session.session_number}'] = idx + 1
            st.rerun()
    
    with col4:
        if st.button("üìä R√©sultats", key=f"results_{session.session_number}"):
            display_practice_results(session)

def display_flashcards_mode(questions: List[Dict], session: PreparationSession):
    """Mode flashcards interactif"""
    
    if not questions:
        st.warning("Aucune question disponible")
        return
    
    # Index de la carte
    if f'flash_idx_{session.session_number}' not in st.session_state:
        st.session_state[f'flash_idx_{session.session_number}'] = 0
    
    idx = st.session_state[f'flash_idx_{session.session_number}'] % len(questions)
    current_q = questions[idx]
    
    # √âtat de la carte (recto/verso)
    if f'card_flipped_{session.session_number}' not in st.session_state:
        st.session_state[f'card_flipped_{session.session_number}'] = False
    
    # Affichage de la carte
    st.markdown(f"### Carte {idx + 1}/{len(questions)}")
    
    # Carte avec animation CSS
    card_content = current_q['question'] if not st.session_state[f'card_flipped_{session.session_number}'] else current_q.get('answer', 'Pas de r√©ponse')
    card_color = "#667eea" if not st.session_state[f'card_flipped_{session.session_number}'] else "#48bb78"
    
    st.markdown(f"""
    <div style="
        background: {card_color};
        color: white;
        padding: 40px;
        border-radius: 15px;
        min-height: 250px;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        font-size: 1.3em;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 10px 20px rgba(0,0,0,0.2);
    ">
        {card_content}
    </div>
    """, unsafe_allow_html=True)
    
    # Contr√¥les
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("‚¨ÖÔ∏è Pr√©c√©dente", key=f"prev_flash_{session.session_number}"):
            st.session_state[f'flash_idx_{session.session_number}'] = idx - 1
            st.session_state[f'card_flipped_{session.session_number}'] = False
            st.rerun()
    
    with col2:
        if st.button("üîÑ Retourner", key=f"flip_flash_{session.session_number}", type="primary"):
            st.session_state[f'card_flipped_{session.session_number}'] = not st.session_state[f'card_flipped_{session.session_number}']
            st.rerun()
    
    with col3:
        if st.button("‚û°Ô∏è Suivante", key=f"next_flash_{session.session_number}"):
            st.session_state[f'flash_idx_{session.session_number}'] = idx + 1
            st.session_state[f'card_flipped_{session.session_number}'] = False
            st.rerun()
    
    with col4:
        if st.button("üîÄ M√©langer", key=f"shuffle_flash_{session.session_number}"):
            import random
            random.shuffle(questions)
            st.session_state[f'flash_idx_{session.session_number}'] = 0
            st.rerun()

def display_quiz_mode(questions: List[Dict], session: PreparationSession):
    """Mode quiz interactif avec scoring"""
    
    if not questions:
        st.warning("Aucune question disponible")
        return
    
    # Initialiser le quiz
    quiz_key = f'quiz_{session.session_number}'
    if quiz_key not in st.session_state:
        st.session_state[quiz_key] = {
            'current': 0,
            'answers': {},
            'scores': {},
            'started': False,
            'completed': False
        }
    
    quiz = st.session_state[quiz_key]
    
    if not quiz['started']:
        # Page de d√©marrage
        st.markdown("""
        <div class="prep-card" style="text-align: center;">
            <h3>üéÆ Quiz Interactif</h3>
            <p>Testez vos connaissances avec ce quiz de {len(questions)} questions</p>
            <p>Vous pourrez √©valuer vos r√©ponses et obtenir un score final</p>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("üöÄ Commencer le quiz", type="primary", use_container_width=True):
            quiz['started'] = True
            st.rerun()
    
    elif quiz['completed']:
        # Page de r√©sultats
        display_quiz_results(quiz, questions)
        
        if st.button("üîÑ Recommencer", use_container_width=True):
            st.session_state[quiz_key] = {
                'current': 0,
                'answers': {},
                'scores': {},
                'started': False,
                'completed': False
            }
            st.rerun()
    
    else:
        # Quiz en cours
        current_idx = quiz['current']
        current_q = questions[current_idx]
        
        # Progress bar
        progress = (current_idx + 1) / len(questions)
        st.progress(progress)
        st.markdown(f"### Question {current_idx + 1}/{len(questions)}")
        
        # Question
        st.markdown(f"""
        <div class="question-card" style="font-size: 1.2em;">
            {current_q['question']}
        </div>
        """, unsafe_allow_html=True)
        
        # R√©ponse
        answer = st.text_area(
            "Votre r√©ponse:",
            value=quiz['answers'].get(current_idx, ''),
            height=150,
            key=f"quiz_answer_{session.session_number}_{current_idx}"
        )
        
        # Auto-√©valuation
        st.markdown("#### Auto-√©valuation")
        
        col1, col2 = st.columns(2)
        
        with col1:
            confidence = st.select_slider(
                "Confiance dans votre r√©ponse",
                options=["Tr√®s faible", "Faible", "Moyenne", "Bonne", "Excellente"],
                value="Moyenne",
                key=f"quiz_conf_{session.session_number}_{current_idx}"
            )
        
        with col2:
            if st.button("üëÅÔ∏è Voir la r√©ponse type", key=f"quiz_hint_{current_idx}"):
                st.info(current_q.get('answer', 'Pas de r√©ponse type'))
        
        # Navigation
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if current_idx > 0:
                if st.button("‚¨ÖÔ∏è Pr√©c√©dente", key=f"quiz_prev_{current_idx}"):
                    quiz['answers'][current_idx] = answer
                    quiz['current'] = current_idx - 1
                    st.rerun()
        
        with col3:
            if current_idx < len(questions) - 1:
                if st.button("Suivante ‚û°Ô∏è", key=f"quiz_next_{current_idx}", type="primary"):
                    quiz['answers'][current_idx] = answer
                    quiz['scores'][current_idx] = confidence
                    quiz['current'] = current_idx + 1
                    st.rerun()
            else:
                if st.button("‚úÖ Terminer", key=f"quiz_finish", type="primary"):
                    quiz['answers'][current_idx] = answer
                    quiz['scores'][current_idx] = confidence
                    quiz['completed'] = True
                    st.rerun()

def display_quiz_results(quiz: dict, questions: List[Dict]):
    """Affiche les r√©sultats du quiz"""
    
    st.markdown("### üèÜ R√©sultats du quiz")
    
    # Calculer le score
    confidence_scores = {
        "Tr√®s faible": 1,
        "Faible": 2,
        "Moyenne": 3,
        "Bonne": 4,
        "Excellente": 5
    }
    
    total_score = sum(confidence_scores.get(score, 3) for score in quiz['scores'].values())
    max_score = len(questions) * 5
    percentage = (total_score / max_score) * 100 if max_score > 0 else 0
    
    # Affichage du score
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Score total", f"{total_score}/{max_score}")
    
    with col2:
        st.metric("Pourcentage", f"{percentage:.1f}%")
    
    with col3:
        avg_confidence = total_score / len(questions) if questions else 0
        st.metric("Confiance moyenne", f"{avg_confidence:.1f}/5")
    
    # Graphique de performance
    fig = go.Figure(go.Bar(
        x=list(range(1, len(questions) + 1)),
        y=[confidence_scores.get(quiz['scores'].get(i, 'Moyenne'), 3) for i in range(len(questions))],
        marker_color=['#48bb78' if confidence_scores.get(quiz['scores'].get(i, 'Moyenne'), 3) >= 4 else '#f6e05e' if confidence_scores.get(quiz['scores'].get(i, 'Moyenne'), 3) >= 3 else '#fc8181' for i in range(len(questions))]
    ))
    
    fig.update_layout(
        title="Performance par question",
        xaxis_title="Question",
        yaxis_title="Score de confiance",
        yaxis_range=[0, 5.5],
        height=300
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Recommandations
    st.markdown("### üí° Recommandations")
    
    if percentage >= 80:
        st.success("üåü Excellent travail! Vous ma√Ætrisez bien le sujet.")
    elif percentage >= 60:
        st.info("üìà Bonne progression! Continuez √† pratiquer les questions moins ma√Ætris√©es.")
    else:
        st.warning("‚ö†Ô∏è Des r√©visions suppl√©mentaires sont recommand√©es.")
    
    # Questions √† revoir
    weak_questions = [i for i, score in quiz['scores'].items() if confidence_scores.get(score, 3) <= 2]
    
    if weak_questions:
        st.markdown("#### üìö Questions √† revoir prioritairement")
        
        for idx in weak_questions[:5]:  # Limiter √† 5
            q = questions[idx]
            with st.expander(f"Question {idx + 1}: {q['question'][:50]}..."):
                st.write(f"**Votre r√©ponse:** {quiz['answers'].get(idx, 'Pas de r√©ponse')}")
                st.info(f"**R√©ponse sugg√©r√©e:** {q.get('answer', 'Non disponible')}")
                if q.get('attention_points'):
                    st.warning(f"‚ö†Ô∏è {q['attention_points']}")

def improve_question_with_ai(question: Dict) -> Optional[Dict]:
    """Am√©liore une question avec l'IA"""
    if not LLMS_AVAILABLE:
        return None
    
    llm_manager = MultiLLMManager()
    
    prompt = f"""Am√©liore cette question d'interrogatoire en la rendant plus pr√©cise et pertinente:
Question actuelle: {question['question']}
R√©ponse actuelle: {question.get('answer', '')}

Fournis:
1. Une version am√©lior√©e de la question
2. Une r√©ponse mieux formul√©e
3. 3 variantes de la question
4. Les pi√®ges √† √©viter
5. Maintiens le niveau de difficult√©: {question.get('difficulty', 3)}/5
"""
    
    response = llm_manager.query_single_llm(
        list(llm_manager.clients.keys())[0],
        prompt,
        "Tu es un expert en interrogatoires judiciaires.",
        temperature=0.7
    )
    
    if response['success']:
        # Parser et retourner la question am√©lior√©e
        improved = parse_improved_question(response['response'])
        if improved:
            improved['difficulty'] = question.get('difficulty', 3)
            return improved
    
    return None

def parse_improved_question(response: str) -> Optional[Dict]:
    """Parse une question am√©lior√©e par l'IA"""
    # Impl√©mentation simplifi√©e
    lines = response.split('\n')
    
    improved = {
        'question': '',
        'answer': '',
        'variants': [],
        'attention_points': ''
    }
    
    for line in lines:
        line = line.strip()
        if 'question' in line.lower() and not improved['question']:
            improved['question'] = line.split(':', 1)[-1].strip()
        elif 'r√©ponse' in line.lower() and not improved['answer']:
            improved['answer'] = line.split(':', 1)[-1].strip()
        elif 'variante' in line.lower():
            improved['variants'].append(line.split(':', 1)[-1].strip())
        elif 'pi√®ge' in line.lower() or 'attention' in line.lower():
            improved['attention_points'] = line.split(':', 1)[-1].strip()
    
    return improved if improved['question'] else None

def display_session_exercises_interactive(session: PreparationSession):
    """Affiche les exercices de mani√®re interactive"""
    
    st.markdown(f"### üéØ {len(session.exercises)} exercices pratiques")
    
    # Vue d'ensemble des exercices
    exercise_types = {}
    for ex in session.exercises:
        ex_type = ex.get('type', 'general')
        if ex_type not in exercise_types:
            exercise_types[ex_type] = []
        exercise_types[ex_type].append(ex)
    
    # Afficher par type
    for ex_type, exercises in exercise_types.items():
        st.markdown(f"#### {get_exercise_type_icon(ex_type)} {ex_type.title()}")
        
        for i, exercise in enumerate(exercises):
            with st.expander(f"{exercise['title']} ({exercise.get('duration', 10)} min)", expanded=False):
                display_single_exercise(exercise, session.session_number, i)

def get_exercise_type_icon(ex_type: str) -> str:
    """Retourne l'ic√¥ne pour un type d'exercice"""
    icons = {
        'relaxation': 'üòå',
        'mindfulness': 'üßò',
        'practice': 'üéØ',
        'organization': 'üìä',
        'communication': 'üí¨',
        'cognitive': 'üß†',
        'study': 'üìö',
        'control': 'üéÆ',
        'confidence': 'üí™',
        'general': 'üìù'
    }
    return icons.get(ex_type, 'üìù')

def display_single_exercise(exercise: Dict, session_num: int, exercise_idx: int):
    """Affiche un exercice unique"""
    
    # Description
    st.write(exercise['description'])
    
    # Instructions d√©taill√©es si disponibles
    if exercise.get('instructions'):
        st.markdown("**üìã Instructions:**")
        for instruction in exercise['instructions']:
            st.write(f"‚Ä¢ {instruction}")
    
    # Outils n√©cessaires
    if exercise.get('tools'):
        st.info(f"üõ†Ô∏è **Mat√©riel:** {', '.join(exercise['tools'])}")
    
    # Sc√©nario si applicable
    if exercise.get('scenario'):
        st.markdown("**üé¨ Sc√©nario:**")
        st.write(exercise['scenario'])
    
    # Interface selon le type
    if exercise['type'] == 'relaxation':
        display_relaxation_interface(exercise, session_num, exercise_idx)
    elif exercise['type'] == 'practice':
        display_practice_interface(exercise, session_num, exercise_idx)
    elif exercise['type'] == 'organization':
        display_organization_interface(exercise, session_num, exercise_idx)
    else:
        display_generic_exercise_interface(exercise, session_num, exercise_idx)
    
    # Suivi de progression
    completed_key = f"exercise_completed_{session_num}_{exercise_idx}"
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.checkbox("‚úÖ Exercice compl√©t√©", key=completed_key):
            st.success("Bravo! Exercice marqu√© comme compl√©t√©")
    
    with col2:
        rating = st.select_slider(
            "√âvaluation",
            options=["üòü Difficile", "üòê Moyen", "üòä Facile"],
            value="üòê Moyen",
            key=f"exercise_rating_{session_num}_{exercise_idx}"
        )

def display_relaxation_interface(exercise: Dict, session_num: int, idx: int):
    """Interface sp√©cifique pour les exercices de relaxation"""
    
    # Timer de relaxation
    duration = exercise.get('duration', 5)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("‚ñ∂Ô∏è D√©marrer", key=f"start_relax_{session_num}_{idx}"):
            st.session_state[f'relax_active_{session_num}_{idx}'] = True
            st.session_state[f'relax_start_{session_num}_{idx}'] = datetime.now()
    
    with col2:
        if st.button("‚è∏Ô∏è Pause", key=f"pause_relax_{session_num}_{idx}"):
            st.session_state[f'relax_active_{session_num}_{idx}'] = False
    
    with col3:
        if st.button("üîÑ R√©initialiser", key=f"reset_relax_{session_num}_{idx}"):
            if f'relax_start_{session_num}_{idx}' in st.session_state:
                del st.session_state[f'relax_start_{session_num}_{idx}']
    
    # Affichage du timer
    if f'relax_start_{session_num}_{idx}' in st.session_state:
        elapsed = (datetime.now() - st.session_state[f'relax_start_{session_num}_{idx}']).seconds
        remaining = max(0, duration * 60 - elapsed)
        
        mins, secs = divmod(remaining, 60)
        
        st.markdown(f"""
        <div style="text-align: center; font-size: 48px; color: #667eea; font-weight: bold;">
            {mins:02d}:{secs:02d}
        </div>
        """, unsafe_allow_html=True)
        
        if remaining == 0:
            st.balloons()
            st.success("‚úÖ Exercice termin√©!")
    
    # Guide audio simul√©
    with st.expander("üéß Guide audio"):
        st.info("Dans la version compl√®te, un guide audio vous accompagnera pendant l'exercice")

def display_practice_interface(exercise: Dict, session_num: int, idx: int):
    """Interface pour les exercices de pratique"""
    
    # Zone de pratique
    practice_text = st.text_area(
        "Zone de pratique",
        height=200,
        placeholder="Utilisez cet espace pour pratiquer l'exercice...",
        key=f"practice_area_{session_num}_{idx}"
    )
    
    # Outils de pratique
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üéôÔ∏è Simuler un enregistrement", key=f"record_{session_num}_{idx}"):
            st.info("üî¥ Enregistrement simul√© en cours...")
    
    with col2:
        if st.button("üìù G√©n√©rer un exemple", key=f"example_{session_num}_{idx}"):
            st.write("Exemple: 'Je comprends votre question. Permettez-moi de clarifier...'")

def display_organization_interface(exercise: Dict, session_num: int, idx: int):
    """Interface pour les exercices d'organisation"""
    
    st.markdown("#### üóÇÔ∏è Organisez vos id√©es")
    
    # Cr√©er des zones d'organisation
    categories = ["Faits principaux", "Dates cl√©s", "Personnes", "Preuves"]
    
    organized_data = {}
    
    for category in categories:
        with st.expander(f"üìÅ {category}", expanded=True):
            content = st.text_area(
                f"Contenu pour {category}",
                height=80,
                key=f"org_{session_num}_{idx}_{category}"
            )
            organized_data[category] = content
    
    # Actions
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üíæ Sauvegarder l'organisation", key=f"save_org_{session_num}_{idx}"):
            st.session_state[f'organized_{session_num}_{idx}'] = organized_data
            st.success("Organisation sauvegard√©e!")
    
    with col2:
        if st.button("üìä Visualiser", key=f"viz_org_{session_num}_{idx}"):
            # Cr√©er une visualisation simple
            fig = go.Figure()
            
            for i, (cat, content) in enumerate(organized_data.items()):
                if content:
                    lines = content.split('\n')
                    fig.add_trace(go.Scatter(
                        x=[cat] * len(lines),
                        y=list(range(len(lines))),
                        mode='markers+text',
                        text=lines,
                        textposition="middle right",
                        name=cat
                    ))
            
            fig.update_layout(
                title="Organisation visuelle",
                xaxis_title="Cat√©gories",
                yaxis_title="√âl√©ments",
                height=400
            )
            
            st.plotly_chart(fig, use_container_width=True)

def display_generic_exercise_interface(exercise: Dict, session_num: int, idx: int):
    """Interface g√©n√©rique pour les exercices"""
    
    # Espace de travail
    work_content = st.text_area(
        "Espace de travail",
        height=250,
        placeholder="Utilisez cet espace pour r√©aliser l'exercice...",
        key=f"generic_work_{session_num}_{idx}"
    )
    
    # Outils g√©n√©riques
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìã Copier le mod√®le", key=f"copy_template_{session_num}_{idx}"):
            st.info("Mod√®le copi√© dans le presse-papiers (simul√©)")
    
    with col2:
        if st.button("üí° Obtenir un indice", key=f"hint_{session_num}_{idx}"):
            st.info("Concentrez-vous sur l'objectif principal de l'exercice")
    
    with col3:
        if st.button("‚úÖ Valider", key=f"validate_{session_num}_{idx}"):
            if work_content:
                st.success("Travail valid√©!")
            else:
                st.warning("Compl√©tez l'exercice avant de valider")

def display_session_notes_enhanced(session: PreparationSession, session_idx: int):
    """Syst√®me de notes am√©lior√©"""
    
    st.markdown("### üìù Notes et observations")
    
    # R√©cup√©rer ou initialiser les notes
    notes_key = f"session_notes_{session_idx}"
    if notes_key not in st.session_state:
        st.session_state[notes_key] = {
            'general': session.notes,
            'strengths': '',
            'weaknesses': '',
            'improvements': '',
            'personal': ''
        }
    
    notes = st.session_state[notes_key]
    
    # Onglets pour diff√©rents types de notes
    note_tabs = st.tabs(["üìù G√©n√©ral", "üí™ Points forts", "‚ö†Ô∏è √Ä am√©liorer", "üìà Progr√®s", "üîí Personnel"])
    
    with note_tabs[0]:
        notes['general'] = st.text_area(
            "Notes g√©n√©rales sur la s√©ance",
            value=notes['general'],
            height=200,
            placeholder="Notez vos observations g√©n√©rales...",
            key=f"notes_general_{session_idx}"
        )
    
    with note_tabs[1]:
        notes['strengths'] = st.text_area(
            "Points forts identifi√©s",
            value=notes['strengths'],
            height=150,
            placeholder="- Bonne gestion du stress\n- R√©ponses claires et concises\n- ...",
            key=f"notes_strengths_{session_idx}"
        )
    
    with note_tabs[2]:
        notes['weaknesses'] = st.text_area(
            "Points √† am√©liorer",
            value=notes['weaknesses'],
            height=150,
            placeholder="- H√©sitations sur les dates\n- Langage corporel √† travailler\n- ...",
            key=f"notes_weaknesses_{session_idx}"
        )
    
    with note_tabs[3]:
        notes['improvements'] = st.text_area(
            "Progr√®s constat√©s",
            value=notes['improvements'],
            height=150,
            placeholder="√âvolutions positives depuis la derni√®re s√©ance...",
            key=f"notes_improvements_{session_idx}"
        )
    
    with note_tabs[4]:
        notes['personal'] = st.text_area(
            "Notes personnelles confidentielles",
            value=notes['personal'],
            height=150,
            placeholder="Notes priv√©es qui ne seront pas partag√©es...",
            key=f"notes_personal_{session_idx}",
            help="Ces notes restent strictement personnelles"
        )
    
    # Actions
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üíæ Sauvegarder tout", key=f"save_all_notes_{session_idx}", type="primary"):
            st.session_state[notes_key] = notes
            session.notes = notes['general']  # Sauvegarder dans la session
            st.success("‚úÖ Notes sauvegard√©es!")
    
    with col2:
        if st.button("üìã Utiliser un mod√®le", key=f"template_notes_{session_idx}"):
            template = {
                'general': "## R√©sum√© de la s√©ance\n\n## Points cl√©s abord√©s\n\n## Questions travaill√©es\n",
                'strengths': "- Communication claire\n- Maintien du contact visuel\n- Coh√©rence du r√©cit",
                'weaknesses': "- Gestion du stress\n- Pr√©cision des dates\n- R√©ponses trop longues",
                'improvements': "Par rapport √† la s√©ance pr√©c√©dente:\n- Meilleure fluidit√©\n- Plus de confiance",
                'personal': ""
            }
            st.session_state[notes_key] = template
            st.rerun()
    
    with col3:
        if st.button("üóëÔ∏è Effacer tout", key=f"clear_notes_{session_idx}"):
            if st.checkbox("Confirmer l'effacement", key=f"confirm_clear_{session_idx}"):
                st.session_state[notes_key] = {
                    'general': '',
                    'strengths': '',
                    'weaknesses': '',
                    'improvements': '',
                    'personal': ''
                }
                st.rerun()
    
    # Export des notes
    with st.expander("üì§ Exporter les notes"):
        export_format = st.radio(
            "Format d'export",
            ["üìÑ Texte simple", "üìù Markdown", "üìä PDF"],
            horizontal=True,
            key=f"export_format_{session_idx}"
        )
        
        if st.button("üíæ Exporter", key=f"export_notes_{session_idx}"):
            export_content = format_notes_for_export(notes, session, export_format)
            
            file_extension = {
                "üìÑ Texte simple": "txt",
                "üìù Markdown": "md",
                "üìä PDF": "pdf"
            }[export_format]
            
            st.download_button(
                "T√©l√©charger",
                export_content,
                f"notes_seance_{session.session_number}_{datetime.now().strftime('%Y%m%d')}.{file_extension}",
                f"text/{file_extension}",
                key=f"download_notes_{session_idx}"
            )

def format_notes_for_export(notes: dict, session: PreparationSession, format_type: str) -> str:
    """Formate les notes pour l'export"""
    
    content = f"""Notes de la {session.title}
Date: {datetime.now().strftime('%d/%m/%Y %H:%M')}
{'=' * 50}

NOTES G√âN√âRALES:
{notes['general']}

POINTS FORTS:
{notes['strengths']}

POINTS √Ä AM√âLIORER:
{notes['weaknesses']}

PROGR√àS CONSTAT√âS:
{notes['improvements']}
"""
    
    if format_type == "üìù Markdown":
        content = content.replace('=' * 50, '---')
        content = content.replace('NOTES G√âN√âRALES:', '## Notes g√©n√©rales')
        content = content.replace('POINTS FORTS:', '## Points forts')
        content = content.replace('POINTS √Ä AM√âLIORER:', '## Points √† am√©liorer')
        content = content.replace('PROGR√àS CONSTAT√âS:', '## Progr√®s constat√©s')
    
    return content

def display_session_completion(session: PreparationSession, session_idx: int, plan: PreparationPlan):
    """Interface de compl√©tion de s√©ance am√©lior√©e"""
    
    st.markdown("### üèÅ Compl√©ter la s√©ance")
    
    # V√©rifications pr√©alables
    checks = {
        "questions": len([q for q in session.questions if f"practice_answer_{session.session_number}_{i}" in st.session_state for i in range(len(session.questions))]) > 0,
        "exercises": any(f"exercise_completed_{session.session_number}_{i}" in st.session_state for i in range(len(session.exercises))),
        "notes": bool(st.session_state.get(f"session_notes_{session_idx}", {}).get('general'))
    }
    
    # Afficher l'√©tat de compl√©tion
    st.markdown("#### ‚úÖ Checklist de compl√©tion")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if checks['questions']:
            st.success("‚úÖ Questions pratiqu√©es")
        else:
            st.warning("‚ö†Ô∏è Pratiquez au moins une question")
    
    with col2:
        if checks['exercises']:
            st.success("‚úÖ Exercices r√©alis√©s")
        else:
            st.warning("‚ö†Ô∏è Compl√©tez au moins un exercice")
    
    with col3:
        if checks['notes']:
            st.success("‚úÖ Notes prises")
        else:
            st.info("üí° Prenez des notes (optionnel)")
    
    # Auto-√©valuation d√©taill√©e
    st.markdown("#### üìä Auto-√©valuation")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # √âvaluation par domaine
        st.markdown("##### √âvaluation par comp√©tence")
        
        competences = {
            "Ma√Ætrise du contenu": st.slider("Ma√Ætrise du contenu", 1, 5, 3, key=f"comp_content_{session_idx}"),
            "Gestion du stress": st.slider("Gestion du stress", 1, 5, 3, key=f"comp_stress_{session_idx}"),
            "Clart√© des r√©ponses": st.slider("Clart√© des r√©ponses", 1, 5, 3, key=f"comp_clarity_{session_idx}"),
            "Confiance g√©n√©rale": st.slider("Confiance g√©n√©rale", 1, 5, 3, key=f"comp_confidence_{session_idx}")
        }
        
        avg_score = sum(competences.values()) / len(competences)
    
    with col2:
        # Feedback qualitatif
        st.markdown("##### Ressenti g√©n√©ral")
        
        feeling = st.radio(
            "Comment vous sentez-vous ?",
            ["üòü Difficile", "üòê Correct", "üòä Bien", "üåü Excellent"],
            index=1,
            key=f"feeling_{session_idx}"
        )
        
        objectives_met = st.multiselect(
            "Objectifs atteints",
            session.objectives,
            default=session.objectives[:2],
            key=f"objectives_check_{session_idx}"
        )
        
        needs_review = st.checkbox(
            "üìö Cette s√©ance n√©cessite une r√©vision",
            key=f"needs_review_{session_idx}"
        )
    
    # Commentaire final
    final_comments = st.text_area(
        "Commentaires sur la s√©ance",
        placeholder="Notez vos impressions, difficult√©s, r√©ussites...",
        height=100,
        key=f"final_comments_{session_idx}"
    )
    
    # Validation finale
    st.markdown("---")
    
    ready_to_complete = all(checks.values()) or st.checkbox(
        "Forcer la compl√©tion (non recommand√©)",
        key=f"force_complete_{session_idx}"
    )
    
    if st.button(
        "‚úÖ Valider et terminer la s√©ance",
        type="primary",
        disabled=not ready_to_complete,
        use_container_width=True,
        key=f"complete_session_{session_idx}"
    ):
        # Mettre √† jour la s√©ance
        session.completed = True
        session.completion_date = datetime.now()
        session.score = avg_score / 5
        
        # Sauvegarder l'√©valuation d√©taill√©e
        evaluation_data = {
            'competences': competences,
            'feeling': feeling,
            'objectives_met': objectives_met,
            'needs_review': needs_review,
            'comments': final_comments,
            'checks': checks
        }
        
        if 'session_evaluations' not in st.session_state:
            st.session_state.session_evaluations = {}
        
        st.session_state.session_evaluations[session_idx] = evaluation_data
        
        # Mettre √† jour la progression globale
        completed_count = sum(1 for s in plan.sessions if s.completed)
        plan.overall_progress = completed_count / plan.total_sessions
        
        # Feedback et c√©l√©bration
        st.success(f"üéâ Bravo! S√©ance {session.session_number} compl√©t√©e avec un score de {avg_score:.1f}/5")
        st.balloons()
        
        # Proposer la suite
        if session_idx < len(plan.sessions) - 1:
            st.markdown("### üöÄ Prochaine √©tape")
            
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("‚û°Ô∏è Passer √† la s√©ance suivante", type="primary"):
                    st.session_state.current_session_view = session_idx + 1
                    st.rerun()
            
            with col2:
                if st.button("üìä Voir ma progression"):
                    st.session_state.selected_tab = 3
                    st.rerun()
        else:
            st.success("üèÜ F√©licitations! Vous avez termin√© toutes les s√©ances!")
            
            if st.button("üìä Voir le bilan complet", type="primary"):
                st.session_state.selected_tab = 3
                st.rerun()

def display_session_results(session: PreparationSession):
    """Affiche les r√©sultats d'une s√©ance compl√©t√©e"""
    
    st.markdown("### ‚úÖ S√©ance compl√©t√©e")
    
    # R√©cup√©rer l'√©valuation
    evaluation = st.session_state.get('session_evaluations', {}).get(session.session_number - 1)
    
    if not evaluation:
        st.info("Aucune √©valuation d√©taill√©e disponible")
        return
    
    # M√©triques principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Score global", f"{session.score*5:.1f}/5 ‚≠ê")
    
    with col2:
        st.metric("Date", session.completion_date.strftime("%d/%m/%Y"))
    
    with col3:
        st.metric("Objectifs", f"{len(evaluation['objectives_met'])}/{len(session.objectives)}")
    
    with col4:
        feeling_emoji = evaluation['feeling'].split()[0]
        st.metric("Ressenti", feeling_emoji)
    
    # Graphique radar des comp√©tences
    if evaluation.get('competences'):
        fig = create_competences_radar(evaluation['competences'])
        st.plotly_chart(fig, use_container_width=True)
    
    # D√©tails
    with st.expander("üìä Voir les d√©tails de l'√©valuation"):
        st.markdown("#### Comp√©tences √©valu√©es")
        for comp, score in evaluation['competences'].items():
            st.write(f"‚Ä¢ {comp}: {'‚≠ê' * score}")
        
        if evaluation.get('comments'):
            st.markdown("#### Commentaires")
            st.info(evaluation['comments'])
        
        if evaluation.get('needs_review'):
            st.warning("üìö Cette s√©ance a √©t√© marqu√©e pour r√©vision")
    
    # Actions
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üìù Modifier l'√©valuation", key=f"edit_eval_{session.session_number}"):
            session.completed = False
            st.rerun()
    
    with col2:
        if st.button("üì§ Exporter le rapport", key=f"export_eval_{session.session_number}"):
            report = generate_session_report(session, evaluation)
            st.download_button(
                "üíæ T√©l√©charger",
                report,
                f"rapport_seance_{session.session_number}_{datetime.now().strftime('%Y%m%d')}.pdf",
                "application/pdf"
            )

def create_competences_radar(competences: dict) -> go.Figure:
    """Cr√©e un graphique radar des comp√©tences"""
    
    categories = list(competences.keys())
    values = list(competences.values())
    
    fig = go.Figure()
    
    fig.add_trace(go.Scatterpolar(
        r=values,
        theta=categories,
        fill='toself',
        name='Comp√©tences',
        line_color='#667eea'
    ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 5]
            )),
        title="√âvaluation des comp√©tences",
        height=400
    )
    
    return fig

def generate_session_report(session: PreparationSession, evaluation: dict) -> bytes:
    """G√©n√®re un rapport PDF pour une s√©ance"""
    
    # Simuler la g√©n√©ration PDF
    report = f"""RAPPORT DE S√âANCE
{'=' * 50}
{session.title}
Date: {session.completion_date.strftime('%d/%m/%Y') if session.completion_date else 'N/A'}
Score: {session.score*5:.1f}/5

COMP√âTENCES √âVALU√âES:
"""
    
    for comp, score in evaluation.get('competences', {}).items():
        report += f"- {comp}: {score}/5\n"
    
    report += f"""
OBJECTIFS ATTEINTS:
- {len(evaluation.get('objectives_met', []))} sur {len(session.objectives)}

RESSENTI: {evaluation.get('feeling', 'Non renseign√©')}

COMMENTAIRES:
{evaluation.get('comments', 'Aucun commentaire')}

{'=' * 50}
G√©n√©r√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}
"""
    
    return report.encode('utf-8')

def display_session_ai_info(session: PreparationSession, plan: PreparationPlan):
    """Affiche les informations sur les IA utilis√©es"""
    
    st.markdown("### ü§ñ Intelligence Artificielle")
    
    if not session.ai_models_used and not plan.ai_models_config:
        st.info("Cette s√©ance n'utilise pas d'IA ou l'IA n'est pas configur√©e")
        return
    
    # Mod√®les utilis√©s
    st.markdown("#### ü§ñ Mod√®les utilis√©s pour cette s√©ance")
    
    if session.ai_models_used:
        cols = st.columns(len(session.ai_models_used))
        for i, model in enumerate(session.ai_models_used):
            with cols[i]:
                st.info(f"‚úÖ {model}")
    
    # Configuration globale
    if plan.ai_models_config:
        with st.expander("‚öôÔ∏è Configuration IA du plan"):
            config = plan.ai_models_config
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write(f"**Mode fusion:** {'‚úÖ Activ√©' if config.get('fusion_mode') else '‚ùå D√©sactiv√©'}")
                if config.get('fusion_strategy'):
                    st.write(f"**Strat√©gie:** {config['fusion_strategy']}")
                st.write(f"**Temp√©rature:** {config.get('temperature', 0.7)}")
            
            with col2:
                st.write(f"**Longueur r√©ponses:** {config.get('response_length', 'Standard')}")
                st.write(f"**Style:** {config.get('language_style', 'Accessible')}")
    
    # R√©g√©n√©ration avec IA
    if LLMS_AVAILABLE and session.questions:
        st.markdown("#### üîÑ R√©g√©n√©ration intelligente")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üîÑ R√©g√©n√©rer toutes les questions", key=f"regen_all_{session.session_number}"):
                with st.spinner("R√©g√©n√©ration en cours..."):
                    # Simuler la r√©g√©n√©ration
                    time.sleep(2)
                    st.success("‚úÖ Questions r√©g√©n√©r√©es avec succ√®s!")
        
        with col2:
            if st.button("üéØ Optimiser avec fusion IA", key=f"optimize_{session.session_number}"):
                with st.spinner("Optimisation par fusion..."):
                    time.sleep(2)
                    st.success("‚úÖ Questions optimis√©es!")

def display_analytics():
    """Affiche les analytics d√©taill√©s"""
    st.markdown("### üìä Analytics & Insights")
    
    plan = st.session_state.preparation_state.get('current_plan')
    
    if not plan:
        st.info("Cr√©ez un plan pour voir les analytics")
        return
    
    # M√©triques globales
    display_global_metrics(plan)
    
    # Tabs d'analyse
    tabs = st.tabs([
        "üìà Progression",
        "üéØ Performance",
        "‚è±Ô∏è Temps",
        "üí° Insights IA",
        "üìä Comparaisons"
    ])
    
    with tabs[0]:
        display_progression_analytics(plan)
    
    with tabs[1]:
        display_performance_analytics(plan)
    
    with tabs[2]:
        display_time_analytics(plan)
    
    with tabs[3]:
        display_ai_insights(plan)
    
    with tabs[4]:
        display_comparison_analytics(plan)

def display_global_metrics(plan: PreparationPlan):
    """Affiche les m√©triques globales"""
    
    # Calculer les m√©triques
    completed = sum(1 for s in plan.sessions if s.completed)
    total_questions = sum(len(s.questions) for s in plan.sessions)
    total_exercises = sum(len(s.exercises) for s in plan.sessions)
    avg_score = sum(s.score for s in plan.sessions if s.completed and s.score) / completed if completed > 0 else 0
    
    # Affichage en colonnes
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric(
            "Progression",
            f"{plan.overall_progress*100:.0f}%",
            f"{completed}/{plan.total_sessions} s√©ances"
        )
    
    with col2:
        st.metric(
            "Score moyen",
            f"{avg_score*5:.1f}/5",
            "‚≠ê" * int(avg_score*5)
        )
    
    with col3:
        st.metric(
            "Questions totales",
            total_questions,
            f"~{total_questions//plan.total_sessions} par s√©ance"
        )
    
    with col4:
        st.metric(
            "Exercices totaux",
            total_exercises,
            f"~{total_exercises//plan.total_sessions} par s√©ance"
        )
    
    with col5:
        if plan.target_date:
            days_left = (plan.target_date - datetime.now().date()).days
            st.metric(
                "Temps restant",
                f"{days_left} jours",
                "‚ö†Ô∏è Urgent" if days_left < 7 else "‚úÖ OK"
            )

def display_progression_analytics(plan: PreparationPlan):
    """Analyse de progression d√©taill√©e"""
    
    st.markdown("#### üìà Analyse de progression")
    
    # Graphique de progression temporelle
    fig = create_progression_timeline(plan)
    st.plotly_chart(fig, use_container_width=True)
    
    # Analyse par p√©riode
    st.markdown("##### üìÖ Rythme de progression")
    
    completed_sessions = [s for s in plan.sessions if s.completed]
    
    if len(completed_sessions) > 1:
        # Calculer le rythme
        first_date = completed_sessions[0].completion_date
        last_date = completed_sessions[-1].completion_date
        days_span = (last_date - first_date).days
        
        if days_span > 0:
            sessions_per_week = (len(completed_sessions) * 7) / days_span
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Rythme actuel", f"{sessions_per_week:.1f} s√©ances/semaine")
            
            with col2:
                recommended_rhythm = plan.total_sessions * 7 / ((plan.target_date - plan.created_date.date()).days if plan.target_date else 30)
                st.metric("Rythme recommand√©", f"{recommended_rhythm:.1f} s√©ances/semaine")
            
            with col3:
                if sessions_per_week < recommended_rhythm * 0.8:
                    st.error("‚ö†Ô∏è Acc√©l√©rer le rythme")
                elif sessions_per_week > recommended_rhythm * 1.2:
                    st.success("‚úÖ Excellent rythme")
                else:
                    st.info("üëç Rythme adapt√©")
    
    # Pr√©dictions
    if completed > 0 and plan.target_date:
        st.markdown("##### üîÆ Pr√©dictions")
        
        # Estimer la date de fin
        avg_days_between = days_span / len(completed_sessions) if len(completed_sessions) > 1 else 3
        remaining_sessions = plan.total_sessions - completed
        estimated_days = remaining_sessions * avg_days_between
        estimated_completion = datetime.now() + timedelta(days=int(estimated_days))
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.info(f"**Date de fin estim√©e:** {estimated_completion.strftime('%d/%m/%Y')}")
        
        with col2:
            if estimated_completion.date() > plan.target_date:
                st.error(f"‚ö†Ô∏è Retard pr√©vu de {(estimated_completion.date() - plan.target_date).days} jours")
            else:
                st.success(f"‚úÖ Fin pr√©vue {(plan.target_date - estimated_completion.date()).days} jours avant l'√©ch√©ance")

def create_progression_timeline(plan: PreparationPlan) -> go.Figure:
    """Cr√©e un graphique de progression temporelle"""
    
    # Pr√©parer les donn√©es
    dates = []
    progress = []
    scores = []
    
    for i, session in enumerate(plan.sessions):
        if session.completed and session.completion_date:
            dates.append(session.completion_date)
            progress.append((i + 1) / plan.total_sessions * 100)
            scores.append(session.score * 20 if session.score else None)
    
    # Cr√©er le graphique
    fig = go.Figure()
    
    # Ligne de progression
    fig.add_trace(go.Scatter(
        x=dates,
        y=progress,
        mode='lines+markers',
        name='Progression',
        line=dict(color='#667eea', width=3),
        marker=dict(size=10)
    ))
    
    # Ligne des scores
    if any(scores):
        fig.add_trace(go.Scatter(
            x=dates,
            y=scores,
            mode='lines+markers',
            name='Score (%)',
            line=dict(color='#48bb78', width=2, dash='dot'),
            marker=dict(size=8),
            yaxis='y2'
        ))
    
    # Projection
    if dates and plan.target_date:
        last_date = dates[-1]
        remaining_days = (plan.target_date - last_date.date()).days
        projected_dates = [last_date + timedelta(days=i) for i in range(0, remaining_days, 3)]
        projected_progress = [progress[-1] + (100 - progress[-1]) * (i / remaining_days) for i in range(0, remaining_days, 3)]
        
        fig.add_trace(go.Scatter(
            x=projected_dates,
            y=projected_progress,
            mode='lines',
            name='Projection',
            line=dict(color='gray', dash='dash'),
            showlegend=True
        ))
    
    fig.update_layout(
        title="Progression temporelle",
        xaxis_title="Date",
        yaxis_title="Progression (%)",
        yaxis2=dict(
            title="Score (%)",
            overlaying='y',
            side='right',
            range=[0, 100]
        ),
        height=400,
        hovermode='x unified'
    )
    
    return fig

def display_performance_analytics(plan: PreparationPlan):
    """Analyse de performance d√©taill√©e"""
    
    st.markdown("#### üéØ Analyse de performance")
    
    # Donn√©es de performance
    completed_sessions = [s for s in plan.sessions if s.completed and s.score]
    
    if not completed_sessions:
        st.info("Compl√©tez des s√©ances pour voir l'analyse de performance")
        return
    
    # Graphique d'√©volution des scores
    fig = go.Figure()
    
    scores = [s.score * 5 for s in completed_sessions]
    session_numbers = [s.session_number for s in completed_sessions]
    
    fig.add_trace(go.Scatter(
        x=session_numbers,
        y=scores,
        mode='lines+markers',
        name='Score',
        line=dict(color='#667eea', width=3),
        marker=dict(size=12)
    ))
    
    # Ligne de tendance
    if len(scores) > 2:
        import numpy as np
        z = np.polyfit(session_numbers, scores, 1)
        p = np.poly1d(z)
        
        fig.add_trace(go.Scatter(
            x=session_numbers,
            y=p(session_numbers),
            mode='lines',
            name='Tendance',
            line=dict(color='red', dash='dash')
        ))
    
    # Zones de performance
    fig.add_hrect(y0=4, y1=5, fillcolor="green", opacity=0.1, annotation_text="Excellent")
    fig.add_hrect(y0=3, y1=4, fillcolor="yellow", opacity=0.1, annotation_text="Bon")
    fig.add_hrect(y0=0, y1=3, fillcolor="red", opacity=0.1, annotation_text="√Ä am√©liorer")
    
    fig.update_layout(
        title="√âvolution des scores",
        xaxis_title="Num√©ro de s√©ance",
        yaxis_title="Score (/5)",
        yaxis_range=[0, 5.5],
        height=400
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Analyse par th√®me
    st.markdown("##### üìä Performance par th√®me")
    
    theme_scores = {}
    for session in completed_sessions:
        theme_type = categorize_theme(session.theme)
        if theme_type not in theme_scores:
            theme_scores[theme_type] = []
        theme_scores[theme_type].append(session.score * 5)
    
    # Calculer les moyennes
    theme_averages = {theme: sum(scores)/len(scores) for theme, scores in theme_scores.items()}
    
    # Afficher en barres
    fig2 = go.Figure(go.Bar(
        x=list(theme_averages.keys()),
        y=list(theme_averages.values()),
        marker_color=['#48bb78' if v >= 4 else '#f6e05e' if v >= 3 else '#fc8181' for v in theme_averages.values()]
    ))
    
    fig2.update_layout(
        title="Score moyen par type de th√®me",
        xaxis_title="Th√®me",
        yaxis_title="Score moyen (/5)",
        yaxis_range=[0, 5.5],
        height=300
    )
    
    st.plotly_chart(fig2, use_container_width=True)
    
    # Recommandations personnalis√©es
    st.markdown("##### üí° Recommandations bas√©es sur la performance")
    
    weakest_theme = min(theme_averages, key=theme_averages.get)
    strongest_theme = max(theme_averages, key=theme_averages.get)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.success(f"**Point fort:** {strongest_theme} ({theme_averages[strongest_theme]:.1f}/5)")
        st.write("Continuez sur cette lanc√©e et partagez vos techniques")
    
    with col2:
        st.warning(f"**√Ä renforcer:** {weakest_theme} ({theme_averages[weakest_theme]:.1f}/5)")
        st.write("Consacrez plus de temps √† ce domaine")

def categorize_theme(theme: str) -> str:
    """Cat√©gorise un th√®me de s√©ance"""
    
    theme_lower = theme.lower()
    
    if any(word in theme_lower for word in ['droit', 'juridique', 'proc√©dure', 'cadre']):
        return "Aspects juridiques"
    elif any(word in theme_lower for word in ['r√©cit', 'chronologie', 'fait', 'histoire']):
        return "Construction narrative"
    elif any(word in theme_lower for word in ['question', 'r√©ponse', 'pi√®ge']):
        return "Questions-R√©ponses"
    elif any(word in theme_lower for word in ['stress', '√©motion', 'psychologique']):
        return "Gestion √©motionnelle"
    elif any(word in theme_lower for word in ['simulation', 'pratique', 'exercice']):
        return "Mise en pratique"
    elif any(word in theme_lower for word in ['communication', 'verbal', 'langage']):
        return "Communication"
    else:
        return "Autres"

def display_time_analytics(plan: PreparationPlan):
    """Analyse temporelle d√©taill√©e"""
    
    st.markdown("#### ‚è±Ô∏è Analyse temporelle")
    
    # Temps total investi
    completed_sessions = [s for s in plan.sessions if s.completed]
    total_minutes = sum(s.duration_minutes for s in completed_sessions)
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Temps total investi", f"{total_minutes//60}h {total_minutes%60}min")
    
    with col2:
        avg_duration = total_minutes / len(completed_sessions) if completed_sessions else 0
        st.metric("Dur√©e moyenne/s√©ance", f"{avg_duration:.0f} min")
    
    with col3:
        planned_total = sum(s.duration_minutes for s in plan.sessions)
        st.metric("Temps total pr√©vu", f"{planned_total//60}h")
    
    with col4:
        completion_rate = (total_minutes / planned_total * 100) if planned_total > 0 else 0
        st.metric("Taux de r√©alisation", f"{completion_rate:.1f}%")
    
    # R√©partition du temps
    if completed_sessions:
        st.markdown("##### üìä R√©partition du temps par activit√©")
        
        # Estimer la r√©partition (simulation)
        time_distribution = {
            "Questions-R√©ponses": 0.4,
            "Exercices pratiques": 0.3,
            "R√©vision/Notes": 0.2,
            "Pauses": 0.1
        }
        
        fig = go.Figure(go.Pie(
            labels=list(time_distribution.keys()),
            values=[v * total_minutes for v in time_distribution.values()],
            hole=0.4
        ))
        
        fig.update_layout(
            title="R√©partition estim√©e du temps",
            height=350
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # Efficacit√© temporelle
    st.markdown("##### ‚ö° Efficacit√© temporelle")
    
    if len(completed_sessions) > 1:
        # Calculer l'efficacit√© (score/temps)
        efficiency_data = []
        
        for session in completed_sessions:
            if session.score:
                efficiency = (session.score * 5) / (session.duration_minutes / 60)  # Score par heure
                efficiency_data.append({
                    'session': f"S{session.session_number}",
                    'efficiency': efficiency,
                    'score': session.score * 5,
                    'duration': session.duration_minutes
                })
        
        if efficiency_data:
            fig2 = go.Figure()
            
            fig2.add_trace(go.Bar(
                x=[d['session'] for d in efficiency_data],
                y=[d['efficiency'] for d in efficiency_data],
                name='Efficacit√© (score/heure)',
                marker_color='#667eea'
            ))
            
            fig2.update_layout(
                title="Efficacit√© par s√©ance",
                xaxis_title="S√©ance",
                yaxis_title="Score par heure",
                height=300
            )
            
            st.plotly_chart(fig2, use_container_width=True)
            
            # Insights
            best_efficiency = max(efficiency_data, key=lambda x: x['efficiency'])
            worst_efficiency = min(efficiency_data, key=lambda x: x['efficiency'])
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.success(f"**Meilleure efficacit√©:** {best_efficiency['session']} ({best_efficiency['efficiency']:.1f} pts/h)")
            
            with col2:
                st.info(f"**√Ä optimiser:** {worst_efficiency['session']} ({worst_efficiency['efficiency']:.1f} pts/h)")

def display_ai_insights(plan: PreparationPlan):
    """Affiche les insights g√©n√©r√©s par l'IA"""
    
    st.markdown("#### üí° Insights Intelligence Artificielle")
    
    if not LLMS_AVAILABLE:
        st.info("Les insights IA ne sont pas disponibles. Configurez les mod√®les d'IA.")
        return
    
    # G√©n√©rer des insights
    if st.button("ü§ñ G√©n√©rer des insights IA", key="generate_insights"):
        with st.spinner("Analyse en cours par l'IA..."):
            insights = generate_ai_insights_for_plan(plan)
            
            if insights:
                st.session_state.ai_insights = insights
    
    # Afficher les insights
    if 'ai_insights' in st.session_state:
        insights = st.session_state.ai_insights
        
        # Points forts
        with st.expander("üí™ Points forts identifi√©s", expanded=True):
            for point in insights.get('strengths', []):
                st.success(f"‚úÖ {point}")
        
        # Points d'am√©lioration
        with st.expander("üìà Axes d'am√©lioration", expanded=True):
            for point in insights.get('improvements', []):
                st.warning(f"‚ö†Ô∏è {point}")
        
        # Recommandations
        with st.expander("üéØ Recommandations personnalis√©es", expanded=True):
            for rec in insights.get('recommendations', []):
                st.info(f"üí° {rec}")
        
        # Pr√©dictions
        with st.expander("üîÆ Pr√©dictions", expanded=False):
            for pred in insights.get('predictions', []):
                st.write(f"‚Ä¢ {pred}")

def generate_ai_insights_for_plan(plan: PreparationPlan) -> Dict[str, List[str]]:
    """G√©n√®re des insights IA pour le plan"""
    
    # Simuler la g√©n√©ration d'insights
    completed = sum(1 for s in plan.sessions if s.completed)
    avg_score = sum(s.score for s in plan.sessions if s.completed and s.score) / completed if completed > 0 else 0
    
    insights = {
        'strengths': [],
        'improvements': [],
        'recommendations': [],
        'predictions': []
    }
    
    # Analyser les points forts
    if avg_score > 0.8:
        insights['strengths'].append("Excellente progression g√©n√©rale avec des scores √©lev√©s constants")
    if completed > plan.total_sessions * 0.7:
        insights['strengths'].append("Tr√®s bon rythme de progression, proche de l'objectif")
    
    # Points d'am√©lioration
    if avg_score < 0.6:
        insights['improvements'].append("Les scores moyens indiquent un besoin de renforcement")
    if plan.target_date:
        days_left = (plan.target_date - datetime.now().date()).days
        if days_left < 10 and completed < plan.total_sessions * 0.8:
            insights['improvements'].append("Rythme insuffisant par rapport √† l'√©ch√©ance proche")
    
    # Recommandations
    insights['recommendations'].append(f"Concentrez-vous sur les s√©ances de type '{plan.prep_type}' pour maximiser l'impact")
    if plan.client_profile == 'anxieux':
        insights['recommendations'].append("Int√©grez plus d'exercices de relaxation avant chaque s√©ance")
    
    # Pr√©dictions
    if completed > 0:
        estimated_final_score = avg_score * 5 * 1.1  # Projection optimiste
        insights['predictions'].append(f"Score final estim√©: {min(estimated_final_score, 5):.1f}/5")
    
    return insights

def display_comparison_analytics(plan: PreparationPlan):
    """Affiche des comparaisons et benchmarks"""
    
    st.markdown("#### üìä Comparaisons & Benchmarks")
    
    # Comparaison avec des moyennes (simul√©es)
    benchmarks = {
        'progression': {
            'votre_score': plan.overall_progress * 100,
            'moyenne': 65,
            'top_10': 85
        },
        'score_moyen': {
            'votre_score': sum(s.score*5 for s in plan.sessions if s.completed and s.score) / sum(1 for s in plan.sessions if s.completed) if any(s.completed for s in plan.sessions) else 0,
            'moyenne': 3.5,
            'top_10': 4.5
        },
        'temps_par_seance': {
            'votre_score': 120,  # minutes
            'moyenne': 90,
            'top_10': 120
        }
    }
    
    # Graphiques de comparaison
    for metric, values in benchmarks.items():
        fig = go.Figure()
        
        categories = ['Vous', 'Moyenne', 'Top 10%']
        metric_values = [values['votre_score'], values['moyenne'], values['top_10']]
        colors = ['#667eea', '#e2e8f0', '#48bb78']
        
        fig.add_trace(go.Bar(
            x=categories,
            y=metric_values,
            marker_color=colors
        ))
        
        fig.update_layout(
            title=metric.replace('_', ' ').title(),
            yaxis_title="Valeur",
            height=300
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # Positionnement global
    st.markdown("##### üèÜ Votre positionnement")
    
    overall_position = calculate_overall_position(benchmarks)
    
    if overall_position >= 80:
        st.success(f"üåü Excellent! Vous √™tes dans le top {100-overall_position:.0f}% des utilisateurs")
    elif overall_position >= 60:
        st.info(f"üëç Bien! Vous √™tes dans le top {100-overall_position:.0f}% des utilisateurs")
    else:
        st.warning(f"üìà En progression. Position actuelle: top {100-overall_position:.0f}%")

def calculate_overall_position(benchmarks: Dict) -> float:
    """Calcule la position globale par rapport aux benchmarks"""
    
    scores = []
    for metric, values in benchmarks.items():
        if values['top_10'] != values['moyenne']:
            normalized = (values['votre_score'] - values['moyenne']) / (values['top_10'] - values['moyenne'])
            scores.append(min(max(normalized * 100, 0), 100))
    
    return sum(scores) / len(scores) if scores else 50

def display_ai_configuration():
    """Configuration avanc√©e de l'IA"""
    
    st.markdown("### ü§ñ Configuration Intelligence Artificielle")
    
    if not LLMS_AVAILABLE:
        st.warning("Les mod√®les d'IA ne sont pas disponibles dans cette version")
        display_ai_simulation()
        return
    
    # Configuration actuelle
    current_config = st.session_state.preparation_state.get('ai_config', {})
    
    # S√©lection des mod√®les
    st.markdown("#### ü§ñ Mod√®les disponibles")
    
    llm_manager = MultiLLMManager()
    available_models = list(llm_manager.clients.keys())
    
    # Affichage en grille avec statut
    model_cols = st.columns(min(len(available_models), 3))
    
    selected_models = current_config.get('models', [])
    
    for i, model in enumerate(available_models):
        with model_cols[i % 3]:
            is_selected = model in selected_models
            
            # Card style pour chaque mod√®le
            st.markdown(f"""
            <div class="ai-model-badge" style="
                background: {'#667eea' if is_selected else '#e2e8f0'};
                color: {'white' if is_selected else 'black'};
                padding: 20px;
                border-radius: 10px;
                text-align: center;
                margin: 10px 0;
            ">
                <h4>{model.replace('_', ' ').title()}</h4>
                <p>{'‚úÖ Actif' if is_selected else '‚≠ï Inactif'}</p>
            </div>
            """, unsafe_allow_html=True)
            
            if st.button(
                "D√©sactiver" if is_selected else "Activer",
                key=f"toggle_model_{model}",
                use_container_width=True
            ):
                if is_selected:
                    selected_models.remove(model)
                else:
                    selected_models.append(model)
                
                current_config['models'] = selected_models
                st.session_state.preparation_state['ai_config'] = current_config
                st.rerun()
    
    # Mode fusion
    st.markdown("#### üîÄ Mode Fusion des IA")
    
    col1, col2 = st.columns(2)
    
    with col1:
        fusion_enabled = st.checkbox(
            "Activer le mode fusion",
            value=current_config.get('fusion_mode', False),
            help="Combine les r√©ponses de plusieurs IA pour une qualit√© optimale",
            key="fusion_toggle"
        )
        
        if fusion_enabled and len(selected_models) < 2:
            st.warning("‚ö†Ô∏è S√©lectionnez au moins 2 mod√®les pour le mode fusion")
            fusion_enabled = False
    
    with col2:
        if fusion_enabled:
            fusion_strategy = st.selectbox(
                "Strat√©gie de fusion",
                ["consensus", "best_answer", "synthesis"],
                format_func=lambda x: {
                    "consensus": "ü§ù Consensus - Points communs",
                    "best_answer": "üèÜ Meilleure r√©ponse",
                    "synthesis": "üîÑ Synth√®se compl√®te"
                }.get(x, x),
                index=["consensus", "best_answer", "synthesis"].index(current_config.get('fusion_strategy', 'synthesis')),
                key="fusion_strategy_select"
            )
        else:
            fusion_strategy = None
    
    # Param√®tres avanc√©s
    with st.expander("‚öôÔ∏è Param√®tres avanc√©s", expanded=True):
        col1, col2 = st.columns(2)
        
        with col1:
            temperature = st.slider(
                "üå°Ô∏è Temp√©rature (cr√©ativit√©)",
                min_value=0.0,
                max_value=1.0,
                value=current_config.get('temperature', 0.7),
                step=0.1,
                help="0 = R√©ponses d√©terministes, 1 = Maximum de cr√©ativit√©",
                key="ai_temperature"
            )
            
            max_tokens = st.number_input(
                "üìè Longueur max des r√©ponses",
                min_value=500,
                max_value=4000,
                value=current_config.get('max_tokens', 2000),
                step=500,
                key="ai_max_tokens"
            )
        
        with col2:
            response_style = st.selectbox(
                "üí¨ Style de r√©ponse",
                ["professional", "friendly", "educational", "empathetic"],
                format_func=lambda x: {
                    "professional": "üëî Professionnel",
                    "friendly": "üòä Amical",
                    "educational": "üéì P√©dagogique",
                    "empathetic": "‚ù§Ô∏è Empathique"
                }.get(x, x),
                index=0,
                key="ai_style"
            )
            
            language_complexity = st.select_slider(
                "üìñ Complexit√© du langage",
                options=["simple", "intermediate", "advanced", "expert"],
                value=current_config.get('language_complexity', 'intermediate'),
                format_func=lambda x: {
                    "simple": "Simple",
                    "intermediate": "Interm√©diaire",
                    "advanced": "Avanc√©",
                    "expert": "Expert"
                }.get(x, x),
                key="ai_complexity"
            )
    
    # Test de configuration
    st.markdown("#### üß™ Tester la configuration")
    
    test_prompt = st.text_area(
        "Question test",
        value="Comment g√©rer le stress lors d'un interrogatoire ?",
        height=100,
        key="test_prompt"
    )
    
    if st.button("üöÄ Tester avec la configuration actuelle", key="test_ai_config"):
        if selected_models:
            with st.spinner("Test en cours..."):
                test_results = test_ai_configuration(
                    test_prompt,
                    selected_models,
                    fusion_enabled,
                    fusion_strategy,
                    temperature
                )
                
                # Afficher les r√©sultats
                for model, result in test_results.items():
                    with st.expander(f"R√©ponse de {model}"):
                        st.write(result)
        else:
            st.error("S√©lectionnez au moins un mod√®le")
    
    # Sauvegarder la configuration
    st.markdown("---")
    
    if st.button("üíæ Sauvegarder la configuration", type="primary", key="save_ai_config"):
        current_config.update({
            'models': selected_models,
            'fusion_mode': fusion_enabled,
            'fusion_strategy': fusion_strategy,
            'temperature': temperature,
            'max_tokens': max_tokens,
            'response_style': response_style,
            'language_complexity': language_complexity
        })
        
        st.session_state.preparation_state['ai_config'] = current_config
        st.success("‚úÖ Configuration IA sauvegard√©e!")

def display_ai_simulation():
    """Affiche une simulation de configuration IA"""
    
    st.info("ü§ñ Simulation de configuration IA (version d√©mo)")
    
    # Mod√®les simul√©s
    simulated_models = ["GPT-4", "Claude 3", "Gemini Pro", "Mistral Large", "LLaMA 2"]
    
    selected = st.multiselect(
        "S√©lectionnez les mod√®les √† utiliser",
        simulated_models,
        default=simulated_models[:2],
        key="simulated_models"
    )
    
    if len(selected) > 1:
        fusion_mode = st.checkbox("Activer le mode fusion", value=True, key="sim_fusion")
        
        if fusion_mode:
            st.success(f"‚úÖ Mode fusion activ√© avec {len(selected)} mod√®les")
    
    # D√©monstration
    if st.button("üéØ Voir une d√©monstration", key="demo_ai"):
        st.markdown("##### Exemple de fusion IA")
        
        with st.spinner("G√©n√©ration des r√©ponses..."):
            time.sleep(2)
        
        # R√©ponses simul√©es
        demo_responses = {
            "GPT-4": "Pour g√©rer le stress, je recommande la respiration profonde et la pr√©paration mentale...",
            "Claude 3": "La gestion du stress passe par une pr√©paration rigoureuse et des techniques de relaxation...",
            "Consensus": "**Synth√®se:** Les deux IA s'accordent sur l'importance de la respiration et de la pr√©paration..."
        }
        
        for model, response in demo_responses.items():
            with st.expander(f"R√©ponse {model}"):
                st.write(response)

def test_ai_configuration(prompt: str, models: List[str], fusion: bool, 
                         strategy: str, temperature: float) -> Dict[str, str]:
    """Teste la configuration IA avec un prompt"""
    
    if not LLMS_AVAILABLE:
        return {"Simulation": "R√©ponse simul√©e pour le test"}
    
    llm_manager = MultiLLMManager()
    results = {}
    
    # Tester chaque mod√®le
    for model in models:
        response = llm_manager.query_single_llm(
            model,
            prompt,
            "Tu es un expert en pr√©paration judiciaire.",
            temperature=temperature
        )
        
        if response['success']:
            results[model] = response['response'][:500] + "..."  # Limiter la longueur
        else:
            results[model] = f"Erreur: {response.get('error', 'Inconnue')}"
    
    # Si fusion activ√©e, ajouter le r√©sultat fusionn√©
    if fusion and len(results) > 1:
        if strategy == "consensus":
            results["Fusion (Consensus)"] = "Points communs identifi√©s entre les r√©ponses..."
        elif strategy == "best_answer":
            results["Fusion (Meilleure)"] = max(results.values(), key=len)
        else:
            results["Fusion (Synth√®se)"] = "Synth√®se compl√®te des diff√©rentes approches..."
    
    return results

def display_resources():
    """Affiche la biblioth√®que de ressources am√©lior√©e"""
    
    st.markdown("### üìö Centre de Ressources")
    
    # Cat√©gories de ressources
    resource_tabs = st.tabs([
        "üìñ Guides",
        "üé• Vid√©os",
        "üìù Templates",
        "üéì Formations",
        "üîó Liens utiles",
        "üíæ Mes ressources"
    ])
    
    with resource_tabs[0]:
        display_guides_library()
    
    with resource_tabs[1]:
        display_video_library()
    
    with resource_tabs[2]:
        display_templates_library()
    
    with resource_tabs[3]:
        display_training_library()
    
    with resource_tabs[4]:
        display_useful_links()
    
    with resource_tabs[5]:
        display_personal_resources()

def display_guides_library():
    """Affiche la biblioth√®que de guides"""
    
    st.markdown("#### üìñ Guides de pr√©paration")
    
    # Filtre par type
    guide_type = st.selectbox(
        "Type de guide",
        ["Tous", "D√©butant", "Interm√©diaire", "Avanc√©", "Sp√©cialis√©"],
        key="guide_filter"
    )
    
    # Liste des guides
    guides = [
        {
            "title": "Guide complet de l'audition libre",
            "level": "D√©butant",
            "pages": 25,
            "description": "Tout ce qu'il faut savoir sur le d√©roulement d'une audition libre",
            "topics": ["Droits", "Proc√©dure", "Conseils pratiques"],
            "rating": 4.8
        },
        {
            "title": "Ma√Ætriser l'interrogatoire d'instruction",
            "level": "Avanc√©",
            "pages": 45,
            "description": "Techniques avanc√©es pour faire face au juge d'instruction",
            "topics": ["Strat√©gie", "Communication", "Pi√®ges √† √©viter"],
            "rating": 4.9
        },
        {
            "title": "Gestion du stress en proc√©dure p√©nale",
            "level": "Tous niveaux",
            "pages": 30,
            "description": "Techniques psychologiques pour g√©rer l'anxi√©t√©",
            "topics": ["Relaxation", "Pr√©paration mentale", "Exercices"],
            "rating": 4.7
        }
    ]
    
    # Affichage des guides
    for guide in guides:
        if guide_type == "Tous" or guide["level"] == guide_type:
            with st.expander(f"{guide['title']} - {guide['level']}"):
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.write(guide['description'])
                    st.write(f"**Sujets couverts:** {', '.join(guide['topics'])}")
                    st.write(f"**Pages:** {guide['pages']} | **Note:** {'‚≠ê' * int(guide['rating'])}")
                
                with col2:
                    if st.button("üì• T√©l√©charger", key=f"dl_guide_{guide['title']}"):
                        # Simuler le t√©l√©chargement
                        st.success("Guide ajout√© √† vos ressources!")
                    
                    if st.button("üëÅÔ∏è Aper√ßu", key=f"preview_{guide['title']}"):
                        st.info("Aper√ßu disponible dans la version compl√®te")

def display_video_library():
    """Affiche la biblioth√®que vid√©o"""
    
    st.markdown("#### üé• Vid√©oth√®que de formation")
    
    # Cat√©gories
    video_categories = {
        "Simulations": [
            {"title": "Simulation d'audition comment√©e", "duration": "45 min", "level": "Interm√©diaire"},
            {"title": "Interrogatoire type avec avocat", "duration": "60 min", "level": "Avanc√©"}
        ],
        "Techniques": [
            {"title": "G√©rer les questions pi√®ges", "duration": "30 min", "level": "Tous"},
            {"title": "Communication non-verbale", "duration": "25 min", "level": "D√©butant"}
        ],
        "T√©moignages": [
            {"title": "Retours d'exp√©rience clients", "duration": "20 min", "level": "Tous"},
            {"title": "Conseils d'avocats experts", "duration": "35 min", "level": "Avanc√©"}
        ]
    }
    
    for category, videos in video_categories.items():
        st.markdown(f"##### {category}")
        
        cols = st.columns(3)
        for i, video in enumerate(videos):
            with cols[i % 3]:
                st.markdown(f"""
                <div style="
                    border: 1px solid #e2e8f0;
                    border-radius: 10px;
                    padding: 15px;
                    text-align: center;
                    height: 150px;
                ">
                    <h5>üé¨ {video['title']}</h5>
                    <p>{video['duration']} - {video['level']}</p>
                </div>
                """, unsafe_allow_html=True)
                
                if st.button("‚ñ∂Ô∏è Regarder", key=f"watch_{video['title']}"):
                    st.info("Vid√©o disponible dans la version compl√®te")

def display_templates_library():
    """Affiche la biblioth√®que de templates"""
    
    st.markdown("#### üìù Mod√®les et documents types")
    
    templates = {
        "Pr√©paration": [
            "üìÖ Chronologie type √† compl√©ter",
            "‚úÖ Checklist pr√©-audition",
            "üìù Journal de pr√©paration quotidien"
        ],
        "Communication": [
            "üí¨ Phrases types de r√©ponse",
            "üéØ Formulations recommand√©es",
            "‚ö†Ô∏è Expressions √† √©viter"
        ],
        "Organisation": [
            "üìä Tableau de suivi des s√©ances",
            "üóÇÔ∏è Classeur de documents",
            "üìã Fiche de synth√®se rapide"
        ]
    }
    
    for category, items in templates.items():
        with st.expander(f"üìÅ {category}"):
            for item in items:
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.write(item)
                
                with col2:
                    if st.button("üì•", key=f"dl_template_{item}"):
                        # Cr√©er un template simple
                        template_content = f"# {item}\n\nMod√®le √† personnaliser selon votre cas.\n\n---\n"
                        st.download_button(
                            "üíæ",
                            template_content,
                            f"{item.replace(' ', '_')}.md",
                            "text/markdown",
                            key=f"download_{item}"
                        )

def display_training_library():
    """Affiche les formations disponibles"""
    
    st.markdown("#### üéì Formations sp√©cialis√©es")
    
    trainings = [
        {
            "title": "Masterclass : Pr√©paration compl√®te √† l'interrogatoire",
            "duration": "8 heures",
            "format": "En ligne",
            "price": "299‚Ç¨",
            "includes": ["Vid√©os HD", "Exercices pratiques", "Support personnalis√©", "Certificat"]
        },
        {
            "title": "Workshop : Gestion du stress judiciaire",
            "duration": "4 heures",
            "format": "Pr√©sentiel/Visio",
            "price": "149‚Ç¨",
            "includes": ["Techniques pratiques", "Groupe de 6 max", "Suivi 1 mois"]
        }
    ]
    
    for training in trainings:
        with st.expander(training['title']):
            col1, col2 = st.columns([2, 1])
            
            with col1:
                st.write(f"**Dur√©e:** {training['duration']}")
                st.write(f"**Format:** {training['format']}")
                st.write("**Inclus:**")
                for item in training['includes']:
                    st.write(f"‚Ä¢ {item}")
            
            with col2:
                st.metric("Prix", training['price'])
                if st.button("üéì S'inscrire", key=f"enroll_{training['title']}"):
                    st.info("Inscription disponible sur le site web")

def display_useful_links():
    """Affiche les liens utiles"""
    
    st.markdown("#### üîó Liens et ressources externes")
    
    links = {
        "Ressources officielles": {
            "Code de proc√©dure p√©nale": "Articles sur les droits fondamentaux",
            "Service-public.fr": "Fiches pratiques sur les proc√©dures",
            "Minist√®re de la Justice": "Guides officiels"
        },
        "Associations d'aide": {
            "France Victimes": "Soutien aux victimes",
            "Ordre des avocats": "Annuaire et conseils",
            "AIVI": "Aide juridictionnelle"
        },
        "Outils pratiques": {
            "Calculateur de d√©lais": "D√©lais de proc√©dure",
            "Mod√®les de courriers": "Courriers types justice",
            "Lexique juridique": "Comprendre les termes"
        }
    }
    
    for category, items in links.items():
        st.markdown(f"##### {category}")
        
        for title, description in items.items():
            col1, col2 = st.columns([3, 1])
            
            with col1:
                st.write(f"**{title}** - {description}")
            
            with col2:
                st.button("üîó Visiter", key=f"link_{title}")

def display_personal_resources():
    """Gestion des ressources personnelles"""
    
    st.markdown("#### üíæ Mes ressources personnelles")
    
    # Upload de documents
    uploaded_file = st.file_uploader(
        "Ajouter un document",
        type=['pdf', 'doc', 'docx', 'txt'],
        key="upload_resource"
    )
    
    if uploaded_file:
        if st.button("üíæ Sauvegarder", key="save_uploaded"):
            # Sauvegarder dans session state
            if 'personal_resources' not in st.session_state:
                st.session_state.personal_resources = []
            
            st.session_state.personal_resources.append({
                'name': uploaded_file.name,
                'size': uploaded_file.size,
                'date': datetime.now()
            })
            
            st.success(f"‚úÖ {uploaded_file.name} ajout√© √† vos ressources")
    
    # Afficher les ressources
    if 'personal_resources' in st.session_state and st.session_state.personal_resources:
        st.markdown("##### üìÅ Vos documents")
        
        for i, resource in enumerate(st.session_state.personal_resources):
            col1, col2, col3 = st.columns([3, 1, 1])
            
            with col1:
                st.write(f"üìÑ {resource['name']}")
            
            with col2:
                st.write(f"{resource['size']//1024} KB")
            
            with col3:
                if st.button("üóëÔ∏è", key=f"delete_resource_{i}"):
                    st.session_state.personal_resources.pop(i)
                    st.rerun()
    else:
        st.info("Aucune ressource personnelle. Ajoutez vos documents ci-dessus.")

def display_settings():
    """Affiche les param√®tres du module"""
    
    st.markdown("### ‚öôÔ∏è Param√®tres")
    
    settings_tabs = st.tabs([
        "üë§ Profil",
        "üîî Notifications",
        "üé® Apparence",
        "üíæ Donn√©es",
        "üîê S√©curit√©"
    ])
    
    with settings_tabs[0]:
        display_profile_settings()
    
    with settings_tabs[1]:
        display_notification_settings()
    
    with settings_tabs[2]:
        display_appearance_settings()
    
    with settings_tabs[3]:
        display_data_settings()
    
    with settings_tabs[4]:
        display_security_settings()

def display_profile_settings():
    """Param√®tres du profil utilisateur"""
    
    st.markdown("#### üë§ Param√®tres du profil")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.text_input("Nom", value="Client", key="profile_name")
        st.text_input("Email", value="client@example.com", key="profile_email")
        st.selectbox(
            "R√¥le",
            ["Client", "Avocat", "Collaborateur"],
            key="profile_role"
        )
    
    with col2:
        st.date_input("Date de naissance", key="profile_dob")
        st.text_input("T√©l√©phone", key="profile_phone")
        st.selectbox(
            "Langue pr√©f√©r√©e",
            ["Fran√ßais", "English", "Espa√±ol"],
            key="profile_language"
        )
    
    if st.button("üíæ Sauvegarder le profil", type="primary", key="save_profile"):
        st.success("‚úÖ Profil mis √† jour!")

def display_notification_settings():
    """Param√®tres de notifications"""
    
    st.markdown("#### üîî Param√®tres de notifications")
    
    # Notifications par email
    st.markdown("##### üìß Notifications par email")
    
    email_notifs = {
        "Rappels de s√©ance": st.checkbox("Rappels de s√©ance", value=True, key="notif_reminders"),
        "Rapports hebdomadaires": st.checkbox("Rapports hebdomadaires", value=True, key="notif_weekly"),
        "Nouveaux contenus": st.checkbox("Nouveaux contenus disponibles", value=False, key="notif_content"),
        "Mises √† jour syst√®me": st.checkbox("Mises √† jour syst√®me", value=False, key="notif_system")
    }
    
    # Timing des rappels
    st.markdown("##### ‚è∞ Timing des rappels")
    
    col1, col2 = st.columns(2)
    
    with col1:
        reminder_time = st.time_input(
            "Heure des rappels quotidiens",
            value=datetime.strptime("09:00", "%H:%M").time(),
            key="reminder_time"
        )
    
    with col2:
        reminder_advance = st.selectbox(
            "Rappel avant s√©ance",
            ["1 heure", "2 heures", "1 jour", "2 jours"],
            index=2,
            key="reminder_advance"
        )
    
    # Notifications push
    st.markdown("##### üì± Notifications push")
    
    push_enabled = st.checkbox(
        "Activer les notifications push",
        value=False,
        help="N√©cessite l'application mobile",
        key="push_enabled"
    )
    
    if push_enabled:
        st.info("Configuration disponible dans l'application mobile")

def display_appearance_settings():
    """Param√®tres d'apparence"""
    
    st.markdown("#### üé® Apparence")
    
    # Th√®me
    theme = st.selectbox(
        "Th√®me",
        ["üåû Clair", "üåô Sombre", "üé® Automatique"],
        key="theme_select"
    )
    
    # Taille de police
    font_size = st.select_slider(
        "Taille du texte",
        options=["Petite", "Normale", "Grande", "Tr√®s grande"],
        value="Normale",
        key="font_size"
    )
    
    # Densit√© d'affichage
    display_density = st.radio(
        "Densit√© d'affichage",
        ["Compacte", "Confortable", "Spacieuse"],
        index=1,
        horizontal=True,
        key="display_density"
    )
    
    # Animations
    animations = st.checkbox(
        "Activer les animations",
        value=True,
        key="animations_enabled"
    )
    
    # Aper√ßu
    st.markdown("##### üëÅÔ∏è Aper√ßu")
    
    st.info("Les modifications d'apparence seront appliqu√©es apr√®s rechargement")

def display_data_settings():
    """Param√®tres de donn√©es"""
    
    st.markdown("#### üíæ Gestion des donn√©es")
    
    # Export de donn√©es
    st.markdown("##### üì§ Export des donn√©es")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìä Exporter analytics", key="export_analytics"):
            st.info("Export des analytics en cours...")
    
    with col2:
        if st.button("üìù Exporter notes", key="export_notes"):
            st.info("Export des notes en cours...")
    
    with col3:
        if st.button("üì¶ Export complet", key="export_all"):
            data = export_all_data()
            st.download_button(
                "üíæ T√©l√©charger",
                data,
                f"export_complet_{datetime.now().strftime('%Y%m%d')}.json",
                "application/json"
            )
    
    # Import de donn√©es
    st.markdown("##### üì• Import de donn√©es")
    
    uploaded_backup = st.file_uploader(
        "Importer une sauvegarde",
        type=['json'],
        key="import_backup"
    )
    
    if uploaded_backup:
        if st.button("üì• Importer", key="import_data"):
            st.success("‚úÖ Donn√©es import√©es avec succ√®s!")
    
    # Suppression de donn√©es
    st.markdown("##### üóëÔ∏è Suppression de donn√©es")
    
    with st.expander("‚ö†Ô∏è Zone dangereuse", expanded=False):
        st.warning("Ces actions sont irr√©versibles!")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üóëÔ∏è Effacer l'historique", key="clear_history"):
                if st.checkbox("Confirmer l'effacement de l'historique"):
                    st.info("Historique effac√©")
        
        with col2:
            if st.button("‚ò†Ô∏è Tout effacer", key="clear_all"):
                if st.checkbox("Je comprends que TOUTES mes donn√©es seront perdues"):
                    st.session_state.clear()
                    st.success("Toutes les donn√©es ont √©t√© effac√©es")
                    st.rerun()

def display_security_settings():
    """Param√®tres de s√©curit√©"""
    
    st.markdown("#### üîê S√©curit√©")
    
    # Authentification
    st.markdown("##### üîë Authentification")
    
    two_factor = st.checkbox(
        "Activer l'authentification √† deux facteurs",
        value=False,
        key="2fa_enabled"
    )
    
    if two_factor:
        st.info("Configuration 2FA disponible dans la version compl√®te")
    
    # Sessions
    st.markdown("##### üíª Sessions actives")
    
    sessions = [
        {"device": "Chrome - Windows", "location": "Paris, France", "last_active": "Il y a 5 minutes"},
        {"device": "Safari - iPhone", "location": "Paris, France", "last_active": "Il y a 2 heures"}
    ]
    
    for session in sessions:
        col1, col2, col3 = st.columns([2, 1, 1])
        
        with col1:
            st.write(f"**{session['device']}** - {session['location']}")
        
        with col2:
            st.write(session['last_active'])
        
        with col3:
            st.button("D√©connecter", key=f"logout_{session['device']}")
    
    # Confidentialit√©
    st.markdown("##### üîí Confidentialit√©")
    
    privacy_settings = {
        "Partager les statistiques anonymes": st.checkbox("Partager les statistiques", value=True, key="share_stats"),
        "Historique de navigation": st.checkbox("Conserver l'historique", value=True, key="keep_history"),
        "Suggestions personnalis√©es": st.checkbox("Suggestions IA", value=True, key="ai_suggestions")
    }

def export_all_data() -> str:
    """Exporte toutes les donn√©es du module"""
    
    export_data = {
        'export_date': datetime.now().isoformat(),
        'version': '2.0',
        'module': 'preparation_client',
        'data': {
            'preparation_state': st.session_state.get('preparation_state', {}),
            'session_evaluations': st.session_state.get('session_evaluations', {}),
            'personal_resources': st.session_state.get('personal_resources', []),
            'ai_insights': st.session_state.get('ai_insights', {})
        }
    }
    
    return json.dumps(export_data, ensure_ascii=False, indent=2)

def export_plan_as_pdf(plan: PreparationPlan):
    """Exporte le plan en PDF"""
    
    # G√©n√©rer le contenu
    content = f"""PLAN DE PR√âPARATION
{'=' * 60}

Type: {plan.prep_type}
Profil client: {plan.client_profile}
Strat√©gie: {plan.strategy}
Date cr√©ation: {plan.created_date.strftime('%d/%m/%Y')}
Date cible: {plan.target_date.strftime('%d/%m/%Y') if plan.target_date else 'Non d√©finie'}
Progression: {plan.overall_progress*100:.0f}%

S√âANCES
{'=' * 60}
"""
    
    for session in plan.sessions:
        status = "‚úÖ Compl√©t√©e" if session.completed else "‚è≥ En attente"
        content += f"""
S√©ance {session.session_number}: {session.title}
Statut: {status}
Dur√©e: {session.duration_minutes} minutes
Questions: {len(session.questions)}
Exercices: {len(session.exercises)}
{'Score: ' + str(session.score*5) + '/5' if session.completed and session.score else ''}

Objectifs:
"""
        for obj in session.objectives:
            content += f"- {obj}\n"
        
        if session.homework:
            content += f"\nDevoir: {session.homework}\n"
        
        content += "\n" + "-" * 60 + "\n"
    
    # T√©l√©charger
    st.download_button(
        "üíæ T√©l√©charger PDF",
        content.encode('utf-8'),
        f"plan_preparation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
        "text/plain",
        key="download_plan_pdf"
    )

def save_plan_template(config: dict):
    """Sauvegarde un plan comme mod√®le"""
    
    if 'plan_templates' not in st.session_state:
        st.session_state.plan_templates = []
    
    template = {
        'name': f"Mod√®le {config['prep_type']} - {config['client_profile']}",
        'config': config,
        'created': datetime.now()
    }
    
    st.session_state.plan_templates.append(template)

def setup_notifications(plan: PreparationPlan):
    """Configure les notifications pour le plan"""
    
    # Simuler la configuration
    st.toast("üîî Notifications activ√©es pour ce plan")

def display_practice_results(session: PreparationSession):
    """Affiche les r√©sultats de pratique"""
    
    st.markdown("### üìä R√©sultats de pratique")
    
    # Statistiques de pratique (simul√©es)
    stats = {
        'questions_practiced': 12,
        'avg_time_per_question': 45,  # secondes
        'confidence_evolution': [60, 65, 70, 75, 80, 85],
        'difficult_questions': 3
    }
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Questions pratiqu√©es", stats['questions_practiced'])
    
    with col2:
        st.metric("Temps moyen/question", f"{stats['avg_time_per_question']}s")
    
    with col3:
        st.metric("Questions difficiles", stats['difficult_questions'])
    
    with col4:
        improvement = stats['confidence_evolution'][-1] - stats['confidence_evolution'][0]
        st.metric("Progression confiance", f"+{improvement}%")
    
    # Graphique d'√©volution
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=list(range(1, len(stats['confidence_evolution']) + 1)),
        y=stats['confidence_evolution'],
        mode='lines+markers',
        name='Confiance (%)',
        line=dict(color='#667eea', width=3)
    ))
    
    fig.update_layout(
        title="√âvolution de la confiance pendant la pratique",
        xaxis_title="Nombre de questions",
        yaxis_title="Niveau de confiance (%)",
        height=300
    )
    
    st.plotly_chart(fig, use_container_width=True)

# Point d'entr√©e pour le lazy loading
if __name__ == "__main__":
    run()