# modules/comparison.py
"""Module de comparaison de documents juridiques"""

import streamlit as st
from datetime import datetime
from typing import List, Dict, Any, Optional, Tuple
import re
from collections import defaultdict, Counter
from difflib import SequenceMatcher

try:
    import pandas as pd
    PANDAS_AVAILABLE = True
except ImportError:
    PANDAS_AVAILABLE = False

try:
    import plotly.graph_objects as go
    import plotly.express as px
    PLOTLY_AVAILABLE = True
except ImportError:
    PLOTLY_AVAILABLE = False

from managers.multi_llm_manager import MultiLLMManager
from utils.helpers import extract_entities, clean_key

def process_comparison_request(query: str, analysis: dict):
    """Traite une demande de comparaison"""
    
    st.markdown("### üîÑ Comparaison de documents")
    
    # Collecter les documents √† comparer
    documents = collect_documents_for_comparison(analysis)
    
    if len(documents) < 2:
        st.warning("‚ö†Ô∏è Au moins 2 documents sont n√©cessaires pour une comparaison")
        return
    
    # Configuration
    config = display_comparison_config_interface(documents, analysis)
    
    if st.button("üöÄ Lancer la comparaison", key="start_comparison", type="primary"):
        with st.spinner("üîÑ Comparaison en cours..."):
            comparison_result = generate_comparison(documents, config, analysis)
            
            if comparison_result:
                st.session_state.comparison_result = comparison_result
                display_comparison_results(comparison_result)

def collect_documents_for_comparison(analysis: dict) -> List[Dict[str, Any]]:
    """Collecte les documents pour la comparaison"""
    documents = []
    
    # Documents locaux
    for doc_id, doc in st.session_state.get('azure_documents', {}).items():
        documents.append({
            'id': doc_id,
            'title': doc.title,
            'content': doc.content,
            'source': doc.source,
            'metadata': doc.metadata
        })
    
    # Filtrer selon le contexte
    if analysis.get('reference'):
        ref_lower = analysis['reference'].lower()
        documents = [d for d in documents if ref_lower in d['title'].lower() or ref_lower in d.get('source', '').lower()]
    
    return documents

def display_comparison_config_interface(documents: List[Dict[str, Any]], analysis: dict) -> dict:
    """Interface de configuration pour la comparaison"""
    
    config = {}
    
    # Type de comparaison
    config['comparison_type'] = st.selectbox(
        "üîç Type de comparaison",
        ["auditions", "expertises", "contrats", "versions", "declarations", "documents_generique"],
        format_func=lambda x: {
            "auditions": "üìã Comparaison d'auditions/t√©moignages",
            "expertises": "üî¨ Comparaison d'expertises",
            "contrats": "üìÑ Comparaison de contrats",
            "versions": "üìë Comparaison de versions",
            "declarations": "üí¨ Comparaison de d√©clarations",
            "documents_generique": "üìÑ Comparaison g√©n√©rique"
        }.get(x, x.title()),
        key="comparison_type_select"
    )
    
    # Options de comparaison
    col1, col2 = st.columns(2)
    
    with col1:
        config['detail_level'] = st.select_slider(
            "Niveau de d√©tail",
            options=["R√©sum√©", "Standard", "D√©taill√©", "Tr√®s d√©taill√©"],
            value="D√©taill√©",
            key="comparison_detail"
        )
        
        config['focus_differences'] = st.checkbox(
            "Focus sur les diff√©rences",
            value=True,
            key="focus_differences"
        )
    
    with col2:
        config['chronological'] = st.checkbox(
            "Analyse chronologique",
            value=config['comparison_type'] in ['auditions', 'declarations'],
            key="chronological_analysis"
        )
        
        config['highlight_contradictions'] = st.checkbox(
            "Mettre en √©vidence les contradictions",
            value=True,
            key="highlight_contradictions"
        )
    
    # S√©lection des documents
    with st.expander("üìÑ Documents √† comparer", expanded=True):
        st.info("S√©lectionnez au moins 2 documents")
        
        selected_docs = []
        for i, doc in enumerate(documents):
            is_selected = st.checkbox(
                f"üìÑ {doc['title']}",
                value=i < 2,  # S√©lectionner les 2 premiers par d√©faut
                key=f"select_doc_compare_{i}"
            )
            if is_selected:
                selected_docs.append(doc)
        
        config['selected_documents'] = selected_docs
    
    # Options avanc√©es
    with st.expander("‚öôÔ∏è Options avanc√©es", expanded=False):
        config['similarity_threshold'] = st.slider(
            "Seuil de similarit√©",
            0.0, 1.0, 0.7,
            help="Pour d√©tecter les passages similaires",
            key="similarity_threshold"
        )
        
        config['min_change_length'] = st.number_input(
            "Longueur minimale des changements",
            min_value=10,
            max_value=200,
            value=50,
            help="En caract√®res",
            key="min_change_length"
        )
        
        config['include_metadata'] = st.checkbox(
            "Inclure les m√©tadonn√©es",
            value=True,
            key="include_metadata_compare"
        )
    
    return config

def generate_comparison(documents: List[Dict[str, Any]], config: dict, analysis: dict) -> Dict[str, Any]:
    """G√©n√®re la comparaison des documents"""
    
    # Analyse basique
    basic_comparison = perform_basic_comparison(documents, config)
    
    # Analyse IA si disponible
    if len(documents) <= 5:  # Limiter pour l'IA
        ai_comparison = perform_ai_comparison(documents, config, analysis)
        if ai_comparison:
            basic_comparison = merge_comparisons(basic_comparison, ai_comparison)
    
    # Cr√©er les visualisations
    visualizations = create_comparison_visualizations(basic_comparison, config)
    
    return {
        'type': config['comparison_type'],
        'document_count': len(documents),
        'documents': [{'id': d['id'], 'title': d['title']} for d in documents],
        'comparison': basic_comparison,
        'visualizations': visualizations,
        'config': config,
        'timestamp': datetime.now()
    }

def perform_basic_comparison(documents: List[Dict[str, Any]], config: dict) -> Dict[str, Any]:
    """Effectue une comparaison basique des documents"""
    
    comparison = {
        'convergences': [],
        'divergences': [],
        'evolutions': [],
        'statistics': {},
        'entities_comparison': {},
        'timeline': []
    }
    
    # Extraire les entit√©s de chaque document
    doc_entities = {}
    for doc in documents:
        entities = extract_entities(doc['content'])
        doc_entities[doc['id']] = entities
    
    # Comparer les entit√©s
    comparison['entities_comparison'] = compare_entities(doc_entities)
    
    # Analyse du contenu
    if config['comparison_type'] == 'auditions':
        comparison.update(compare_testimonies(documents, config))
    elif config['comparison_type'] == 'contrats':
        comparison.update(compare_contracts(documents, config))
    elif config['comparison_type'] == 'expertises':
        comparison.update(compare_expertises(documents, config))
    else:
        comparison.update(generic_comparison(documents, config))
    
    # Statistiques globales
    comparison['statistics'] = calculate_comparison_statistics(comparison, documents)
    
    return comparison

def compare_entities(doc_entities: Dict[str, Dict]) -> Dict[str, Any]:
    """Compare les entit√©s entre documents"""
    
    all_persons = set()
    all_organizations = set()
    all_locations = set()
    all_dates = set()
    
    # Collecter toutes les entit√©s
    for entities in doc_entities.values():
        all_persons.update(entities.get('persons', []))
        all_organizations.update(entities.get('organizations', []))
        all_locations.update(entities.get('locations', []))
        all_dates.update(entities.get('dates', []))
    
    # Analyser la pr√©sence dans chaque document
    entity_presence = {
        'persons': {},
        'organizations': {},
        'locations': {},
        'dates': {}
    }
    
    for person in all_persons:
        entity_presence['persons'][person] = []
        for doc_id, entities in doc_entities.items():
            if person in entities.get('persons', []):
                entity_presence['persons'][person].append(doc_id)
    
    # M√™me logique pour les autres types
    for org in all_organizations:
        entity_presence['organizations'][org] = []
        for doc_id, entities in doc_entities.items():
            if org in entities.get('organizations', []):
                entity_presence['organizations'][org].append(doc_id)
    
    return {
        'all_entities': {
            'persons': list(all_persons),
            'organizations': list(all_organizations),
            'locations': list(all_locations),
            'dates': list(all_dates)
        },
        'presence_matrix': entity_presence,
        'common_entities': {
            'persons': [p for p, docs in entity_presence['persons'].items() if len(docs) > 1],
            'organizations': [o for o, docs in entity_presence['organizations'].items() if len(docs) > 1]
        }
    }

def compare_testimonies(documents: List[Dict[str, Any]], config: dict) -> Dict[str, Any]:
    """Compare sp√©cifiquement des t√©moignages/auditions"""
    
    comparison = {
        'convergences': [],
        'divergences': [],
        'evolutions': []
    }
    
    # Points cl√©s √† comparer dans les t√©moignages
    key_aspects = [
        'chronologie', 'acteurs', 'lieux', 'actions', 
        'motivations', 'contradictions'
    ]
    
    # Analyser chaque aspect
    for aspect in key_aspects:
        aspect_data = extract_testimony_aspect(documents, aspect)
        
        # Identifier convergences et divergences
        if all_similar(aspect_data.values()):
            comparison['convergences'].append({
                'aspect': aspect,
                'point': f"Accord sur {aspect}",
                'details': summarize_aspect(aspect_data),
                'documents': list(aspect_data.keys())
            })
        else:
            comparison['divergences'].append({
                'aspect': aspect,
                'point': f"Divergence sur {aspect}",
                'details': explain_differences(aspect_data),
                'documents': list(aspect_data.keys())
            })
    
    # D√©tecter les √©volutions (si chronologique)
    if config.get('chronological'):
        comparison['evolutions'] = detect_testimony_evolution(documents)
    
    return comparison

def compare_contracts(documents: List[Dict[str, Any]], config: dict) -> Dict[str, Any]:
    """Compare sp√©cifiquement des contrats"""
    
    comparison = {
        'convergences': [],
        'divergences': [],
        'clauses_comparison': {}
    }
    
    # √âl√©ments contractuels √† comparer
    contract_elements = [
        'parties', 'objet', 'dur√©e', 'montant', 'conditions',
        'obligations', 'p√©nalit√©s', 'r√©siliation'
    ]
    
    for element in contract_elements:
        element_data = {}
        
        for doc in documents:
            # Extraire l'√©l√©ment du contrat
            extracted = extract_contract_element(doc['content'], element)
            element_data[doc['id']] = extracted
        
        # Comparer
        if all_similar(element_data.values()):
            comparison['convergences'].append({
                'element': element,
                'point': f"{element.capitalize()} identique",
                'details': element_data[documents[0]['id']],
                'documents': list(element_data.keys())
            })
        else:
            comparison['divergences'].append({
                'element': element,
                'point': f"{element.capitalize()} diff√©rent",
                'details': element_data,
                'documents': list(element_data.keys())
            })
    
    # Analyse des clauses
    comparison['clauses_comparison'] = compare_contract_clauses(documents)
    
    return comparison

def compare_expertises(documents: List[Dict[str, Any]], config: dict) -> Dict[str, Any]:
    """Compare sp√©cifiquement des expertises"""
    
    comparison = {
        'convergences': [],
        'divergences': [],
        'methodologies': {},
        'conclusions': {}
    }
    
    # √âl√©ments d'expertise √† comparer
    expertise_elements = [
        'm√©thodologie', 'observations', 'analyses', 'conclusions',
        'recommandations', 'r√©serves'
    ]
    
    for element in expertise_elements:
        element_data = {}
        
        for doc in documents:
            extracted = extract_expertise_element(doc['content'], element)
            element_data[doc['title']] = extracted
        
        # Analyser les similarit√©s/diff√©rences
        if element == 'conclusions':
            comparison['conclusions'] = element_data
            
            # V√©rifier si les conclusions convergent
            if conclusions_agree(element_data.values()):
                comparison['convergences'].append({
                    'point': "Conclusions convergentes",
                    'details': "Les experts arrivent aux m√™mes conclusions",
                    'data': element_data
                })
            else:
                comparison['divergences'].append({
                    'point': "Conclusions divergentes",
                    'details': "Les experts ont des conclusions diff√©rentes",
                    'data': element_data
                })
        
        elif element == 'm√©thodologie':
            comparison['methodologies'] = element_data
    
    return comparison

def generic_comparison(documents: List[Dict[str, Any]], config: dict) -> Dict[str, Any]:
    """Comparaison g√©n√©rique de documents"""
    
    comparison = {
        'convergences': [],
        'divergences': [],
        'similarity_matrix': {}
    }
    
    # Calcul de similarit√© entre tous les documents
    for i, doc1 in enumerate(documents):
        for j, doc2 in enumerate(documents[i+1:], i+1):
            similarity = calculate_text_similarity(doc1['content'], doc2['content'])
            
            key = f"{doc1['title']} vs {doc2['title']}"
            comparison['similarity_matrix'][key] = {
                'score': similarity,
                'similar_passages': find_similar_passages(
                    doc1['content'], 
                    doc2['content'],
                    config['similarity_threshold']
                ),
                'different_passages': find_different_passages(
                    doc1['content'],
                    doc2['content'],
                    config['similarity_threshold']
                )
            }
    
    # Identifier les points de convergence et divergence
    for key, data in comparison['similarity_matrix'].items():
        # Convergences
        for passage in data['similar_passages'][:5]:  # Top 5
            comparison['convergences'].append({
                'documents': key,
                'point': "Passage similaire",
                'details': passage['text'][:200] + "...",
                'similarity': passage['score']
            })
        
        # Divergences
        for passage in data['different_passages'][:5]:  # Top 5
            comparison['divergences'].append({
                'documents': key,
                'point': "Passage diff√©rent",
                'details': {
                    'doc1': passage['text1'][:200] + "...",
                    'doc2': passage['text2'][:200] + "..."
                }
            })
    
    return comparison

def perform_ai_comparison(documents: List[Dict[str, Any]], config: dict, analysis: dict) -> Optional[Dict[str, Any]]:
    """Effectue une comparaison enrichie par l'IA"""
    
    llm_manager = MultiLLMManager()
    if not llm_manager.clients:
        return None
    
    # Construire le prompt selon le type
    if config['comparison_type'] == 'auditions':
        prompt = build_testimony_comparison_prompt(documents, config)
    elif config['comparison_type'] == 'expertises':
        prompt = build_expertise_comparison_prompt(documents, config)
    else:
        prompt = build_generic_comparison_prompt(documents, config)
    
    try:
        provider = list(llm_manager.clients.keys())[0]
        response = llm_manager.query_single_llm(
            provider,
            prompt,
            "Tu es un expert en analyse comparative de documents juridiques.",
            temperature=0.3
        )
        
        if response['success']:
            return parse_ai_comparison_response(response['response'], config)
            
    except Exception as e:
        st.error(f"Erreur IA: {str(e)}")
    
    return None

def build_testimony_comparison_prompt(documents: List[Dict[str, Any]], config: dict) -> str:
    """Construit le prompt pour comparer des t√©moignages"""
    
    prompt = """Compare ces t√©moignages/auditions en identifiant :

1. CONVERGENCES
   - Points sur lesquels les t√©moins s'accordent
   - √âl√©ments factuels confirm√©s
   - Chronologie commune

2. DIVERGENCES
   - Contradictions flagrantes
   - Versions diff√©rentes des faits
   - Incoh√©rences temporelles

3. √âVOLUTIONS
   - Changements dans les d√©clarations
   - Nouveaux √©l√©ments apparus
   - R√©tractations ou modifications

4. CR√âDIBILIT√â
   - Coh√©rence interne de chaque t√©moignage
   - √âl√©ments v√©rifiables
   - Indices de sinc√©rit√©/mensonge

T√âMOIGNAGES √Ä COMPARER:
"""
    
    for doc in documents:
        prompt += f"\n\n--- {doc['title']} ---\n{doc['content'][:2000]}..."
    
    prompt += "\n\nFournis une analyse structur√©e et objective."
    
    return prompt

def build_expertise_comparison_prompt(documents: List[Dict[str, Any]], config: dict) -> str:
    """Construit le prompt pour comparer des expertises"""
    
    prompt = """Compare ces expertises en analysant :

1. M√âTHODOLOGIES
   - Approches utilis√©es
   - Protocoles suivis
   - Outils et techniques

2. OBSERVATIONS
   - Constats communs
   - Observations divergentes
   - Donn√©es collect√©es

3. ANALYSES
   - Interpr√©tations convergentes
   - Points de d√©saccord
   - Raisonnements diff√©rents

4. CONCLUSIONS
   - Conclusions identiques
   - Conclusions oppos√©es
   - Nuances et r√©serves

EXPERTISES √Ä COMPARER:
"""
    
    for doc in documents:
        prompt += f"\n\n--- {doc['title']} ---\n{doc['content'][:2000]}..."
    
    return prompt

def build_generic_comparison_prompt(documents: List[Dict[str, Any]], config: dict) -> str:
    """Construit un prompt de comparaison g√©n√©rique"""
    
    detail_instruction = {
        "R√©sum√©": "Fournis un r√©sum√© concis des principales similarit√©s et diff√©rences.",
        "Standard": "Fournis une analyse √©quilibr√©e des points communs et divergents.",
        "D√©taill√©": "Fournis une analyse approfondie avec exemples pr√©cis.",
        "Tr√®s d√©taill√©": "Fournis une analyse exhaustive avec citations et r√©f√©rences."
    }
    
    prompt = f"""Compare ces documents en suivant ces instructions :

NIVEAU DE D√âTAIL : {detail_instruction.get(config['detail_level'], 'Standard')}

Identifie :
1. Points de convergence (√©l√©ments similaires ou identiques)
2. Points de divergence (diff√©rences notables)
3. √âl√©ments pr√©sents dans certains documents mais pas dans d'autres
4. √âvolution ou progression si applicable

DOCUMENTS √Ä COMPARER:
"""
    
    for doc in documents:
        prompt += f"\n\n--- {doc['title']} ---\n{doc['content'][:2000]}..."
    
    if config.get('focus_differences'):
        prompt += "\n\nACCORDE UNE ATTENTION PARTICULI√àRE AUX DIFF√âRENCES ET CONTRADICTIONS."
    
    return prompt

def parse_ai_comparison_response(response: str, config: dict) -> Dict[str, Any]:
    """Parse la r√©ponse de l'IA pour extraire la comparaison"""
    
    comparison = {
        'convergences': [],
        'divergences': [],
        'analysis': response,
        'ai_insights': []
    }
    
    # Extraire les sections
    sections = response.split('\n\n')
    current_section = None
    
    for section in sections:
        section_lower = section.lower()
        
        if 'convergence' in section_lower or 'accord' in section_lower:
            current_section = 'convergences'
        elif 'divergence' in section_lower or 'contradiction' in section_lower:
            current_section = 'divergences'
        elif current_section:
            # Parser les points
            points = extract_comparison_points(section)
            
            if current_section == 'convergences':
                comparison['convergences'].extend(points)
            elif current_section == 'divergences':
                comparison['divergences'].extend(points)
    
    # Extraire les insights
    if 'cr√©dibilit√©' in response.lower() or 'conclusion' in response.lower():
        insights = extract_ai_insights(response)
        comparison['ai_insights'] = insights
    
    return comparison

def merge_comparisons(basic: Dict[str, Any], ai: Dict[str, Any]) -> Dict[str, Any]:
    """Fusionne les comparaisons basique et IA"""
    
    merged = basic.copy()
    
    # Ajouter les √©l√©ments de l'IA
    if ai:
        # Fusionner les convergences
        existing_conv = {c['point'] for c in merged['convergences']}
        for conv in ai.get('convergences', []):
            if conv.get('point') not in existing_conv:
                merged['convergences'].append(conv)
        
        # Fusionner les divergences
        existing_div = {d['point'] for d in merged['divergences']}
        for div in ai.get('divergences', []):
            if div.get('point') not in existing_div:
                merged['divergences'].append(div)
        
        # Ajouter l'analyse IA
        merged['ai_analysis'] = ai.get('analysis', '')
        merged['ai_insights'] = ai.get('ai_insights', [])
    
    return merged

def create_comparison_visualizations(comparison: Dict[str, Any], config: dict) -> Dict[str, Any]:
    """Cr√©e les visualisations pour la comparaison"""
    
    visualizations = {}
    
    if not PLOTLY_AVAILABLE:
        return visualizations
    
    # Graphique des convergences/divergences
    if comparison.get('convergences') or comparison.get('divergences'):
        fig = create_convergence_divergence_chart(comparison)
        visualizations['conv_div_chart'] = fig
    
    # Matrice de similarit√©
    if comparison.get('similarity_matrix'):
        fig = create_similarity_heatmap(comparison['similarity_matrix'])
        visualizations['similarity_heatmap'] = fig
    
    # Timeline si applicable
    if comparison.get('timeline'):
        fig = create_comparison_timeline(comparison['timeline'])
        visualizations['timeline'] = fig
    
    # Graphique des entit√©s
    if comparison.get('entities_comparison'):
        fig = create_entities_comparison_chart(comparison['entities_comparison'])
        visualizations['entities_chart'] = fig
    
    return visualizations

def calculate_comparison_statistics(comparison: Dict[str, Any], documents: List[Dict[str, Any]]) -> Dict[str, Any]:
    """Calcule les statistiques de la comparaison"""
    
    stats = {
        'total_convergences': len(comparison.get('convergences', [])),
        'total_divergences': len(comparison.get('divergences', [])),
        'total_evolutions': len(comparison.get('evolutions', [])),
        'document_count': len(documents),
        'total_words': sum(len(doc['content'].split()) for doc in documents),
        'avg_document_length': sum(len(doc['content']) for doc in documents) / len(documents),
        'reliability_score': 0
    }
    
    # Calculer un score de fiabilit√©
    if stats['total_convergences'] + stats['total_divergences'] > 0:
        stats['reliability_score'] = stats['total_convergences'] / (stats['total_convergences'] + stats['total_divergences'])
    
    # Statistiques des entit√©s
    if comparison.get('entities_comparison'):
        entities = comparison['entities_comparison'].get('all_entities', {})
        stats['total_persons'] = len(entities.get('persons', []))
        stats['total_organizations'] = len(entities.get('organizations', []))
        stats['common_entities'] = len(comparison['entities_comparison'].get('common_entities', {}).get('persons', []))
    
    return stats

def display_comparison_results(comparison_result: Dict[str, Any]):
    """Affiche les r√©sultats de la comparaison"""
    
    # D√©j√† impl√©ment√© dans le module principal
    # Cette fonction est appel√©e depuis l√†-bas
    pass

# Fonctions utilitaires

def extract_testimony_aspect(documents: List[Dict[str, Any]], aspect: str) -> Dict[str, Any]:
    """Extrait un aspect sp√©cifique des t√©moignages"""
    
    aspect_data = {}
    
    for doc in documents:
        content = doc['content'].lower()
        
        if aspect == 'chronologie':
            # Extraire les dates et heures
            dates = re.findall(r'\d{1,2}[/-]\d{1,2}[/-]\d{2,4}', content)
            times = re.findall(r'\d{1,2}h\d{0,2}', content)
            aspect_data[doc['id']] = {'dates': dates, 'times': times}
            
        elif aspect == 'acteurs':
            # Utiliser extract_entities
            entities = extract_entities(doc['content'])
            aspect_data[doc['id']] = entities.get('persons', [])
            
        elif aspect == 'lieux':
            entities = extract_entities(doc['content'])
            aspect_data[doc['id']] = entities.get('locations', [])
            
        # Autres aspects...
    
    return aspect_data

def all_similar(values) -> bool:
    """V√©rifie si toutes les valeurs sont similaires"""
    
    values_list = list(values)
    if not values_list:
        return True
    
    first = values_list[0]
    
    # Comparaison basique
    return all(v == first for v in values_list)

def summarize_aspect(aspect_data: Dict[str, Any]) -> str:
    """R√©sume un aspect convergent"""
    
    # Prendre la premi√®re valeur comme r√©f√©rence
    values = list(aspect_data.values())
    if not values:
        return "Aucune donn√©e"
    
    first = values[0]
    
    if isinstance(first, list):
        return f"√âl√©ments communs : {', '.join(str(v) for v in first[:5])}"
    else:
        return str(first)

def explain_differences(aspect_data: Dict[str, Any]) -> str:
    """Explique les diff√©rences trouv√©es"""
    
    differences = []
    
    items = list(aspect_data.items())
    for i, (doc1, data1) in enumerate(items):
        for doc2, data2 in items[i+1:]:
            if data1 != data2:
                differences.append(f"{doc1}: {data1} vs {doc2}: {data2}")
    
    return " | ".join(differences[:3])  # Limiter √† 3

def detect_testimony_evolution(documents: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """D√©tecte l'√©volution dans les t√©moignages"""
    
    evolutions = []
    
    # Trier par date si possible
    sorted_docs = sorted(documents, key=lambda d: d.get('metadata', {}).get('date', ''))
    
    # Comparer s√©quentiellement
    for i in range(len(sorted_docs) - 1):
        doc1 = sorted_docs[i]
        doc2 = sorted_docs[i + 1]
        
        # Chercher les changements
        changes = find_changes(doc1['content'], doc2['content'])
        
        if changes:
            evolutions.append({
                'from': doc1['title'],
                'to': doc2['title'],
                'changes': changes[:5]  # Top 5 changements
            })
    
    return evolutions

def extract_contract_element(content: str, element: str) -> str:
    """Extrait un √©l√©ment sp√©cifique d'un contrat"""
    
    content_lower = content.lower()
    
    patterns = {
        'parties': r'entre[:\s]+([^,]+),.*?et[:\s]+([^,]+)',
        'objet': r'objet[:\s]+([^\n]+)',
        'dur√©e': r'dur√©e[:\s]+([^\n]+)',
        'montant': r'montant[:\s]+([^\n]+)|prix[:\s]+([^\n]+)',
        'conditions': r'conditions[:\s]+([^\n]+)',
        'obligations': r'obligations[:\s]+([^\n]+)',
        'p√©nalit√©s': r'p√©nalit√©s[:\s]+([^\n]+)',
        'r√©siliation': r'r√©siliation[:\s]+([^\n]+)'
    }
    
    pattern = patterns.get(element, '')
    if pattern:
        match = re.search(pattern, content_lower)
        if match:
            return match.group(0)
    
    return "Non trouv√©"

def compare_contract_clauses(documents: List[Dict[str, Any]]) -> Dict[str, Any]:
    """Compare les clauses entre contrats"""
    
    clauses_comparison = {}
    
    # Identifier les clauses dans chaque document
    for doc in documents:
        clauses = extract_contract_clauses(doc['content'])
        clauses_comparison[doc['title']] = clauses
    
    return clauses_comparison

def extract_contract_clauses(content: str) -> List[str]:
    """Extrait les clauses d'un contrat"""
    
    # Pattern pour les clauses num√©rot√©es
    clause_pattern = r'(?:article|clause)\s*\d+[:\s-]+([^\n]+(?:\n(?!\s*(?:article|clause)\s*\d+)[^\n]+)*)'
    
    clauses = re.findall(clause_pattern, content, re.IGNORECASE | re.MULTILINE)
    
    return [c.strip() for c in clauses]

def extract_expertise_element(content: str, element: str) -> str:
    """Extrait un √©l√©ment d'expertise"""
    
    content_lower = content.lower()
    
    # Chercher la section
    section_start = content_lower.find(element)
    if section_start == -1:
        return "Section non trouv√©e"
    
    # Trouver la fin de la section (prochain titre)
    next_sections = ['m√©thodologie', 'observations', 'analyses', 'conclusions', 'recommandations']
    section_end = len(content)
    
    for next_element in next_sections:
        if next_element != element:
            pos = content_lower.find(next_element, section_start + len(element))
            if pos != -1 and pos < section_end:
                section_end = pos
    
    return content[section_start:section_end].strip()

def conclusions_agree(conclusions: list) -> bool:
    """V√©rifie si les conclusions s'accordent"""
    
    # Analyse s√©mantique simple
    positive_words = ['confirme', 'valide', '√©tabli', 'prouv√©', 'certain']
    negative_words = ['infirme', 'invalide', 'r√©fute', 'impossible', 'exclu']
    
    sentiments = []
    
    for conclusion in conclusions:
        conclusion_lower = str(conclusion).lower()
        
        positive_count = sum(1 for word in positive_words if word in conclusion_lower)
        negative_count = sum(1 for word in negative_words if word in conclusion_lower)
        
        if positive_count > negative_count:
            sentiments.append('positive')
        elif negative_count > positive_count:
            sentiments.append('negative')
        else:
            sentiments.append('neutral')
    
    # V√©rifier si tous les sentiments sont align√©s
    return len(set(sentiments)) == 1

def calculate_text_similarity(text1: str, text2: str) -> float:
    """Calcule la similarit√© entre deux textes"""
    
    # Utiliser SequenceMatcher pour une similarit√© basique
    return SequenceMatcher(None, text1, text2).ratio()

def find_similar_passages(text1: str, text2: str, threshold: float) -> List[Dict[str, Any]]:
    """Trouve les passages similaires entre deux textes"""
    
    similar_passages = []
    
    # Diviser en phrases
    sentences1 = text1.split('.')
    sentences2 = text2.split('.')
    
    for s1 in sentences1:
        if len(s1.strip()) < 20:
            continue
            
        for s2 in sentences2:
            if len(s2.strip()) < 20:
                continue
                
            similarity = SequenceMatcher(None, s1, s2).ratio()
            
            if similarity >= threshold:
                similar_passages.append({
                    'text': s1.strip(),
                    'score': similarity
                })
                break
    
    return sorted(similar_passages, key=lambda x: x['score'], reverse=True)

def find_different_passages(text1: str, text2: str, threshold: float) -> List[Dict[str, Any]]:
    """Trouve les passages diff√©rents entre deux textes"""
    
    different_passages = []
    
    # Diviser en paragraphes
    paragraphs1 = text1.split('\n\n')
    paragraphs2 = text2.split('\n\n')
    
    # Passages uniques au document 1
    for p1 in paragraphs1:
        if len(p1.strip()) < 50:
            continue
            
        max_similarity = 0
        for p2 in paragraphs2:
            similarity = SequenceMatcher(None, p1, p2).ratio()
            max_similarity = max(max_similarity, similarity)
        
        if max_similarity < (1 - threshold):
            different_passages.append({
                'text1': p1.strip(),
                'text2': '[Absent]'
            })
    
    return different_passages[:10]  # Limiter

def find_changes(text1: str, text2: str) -> List[str]:
    """Trouve les changements entre deux textes"""
    
    changes = []
    
    # Utiliser difflib pour trouver les changements
    import difflib
    
    lines1 = text1.split('\n')
    lines2 = text2.split('\n')
    
    differ = difflib.unified_diff(lines1, lines2, lineterm='')
    
    for line in differ:
        if line.startswith('+') and not line.startswith('+++'):
            changes.append(f"Ajout√©: {line[1:]}")
        elif line.startswith('-') and not line.startswith('---'):
            changes.append(f"Supprim√©: {line[1:]}")
    
    return changes

def extract_comparison_points(section: str) -> List[Dict[str, str]]:
    """Extrait les points de comparaison d'une section"""
    
    points = []
    
    # Chercher les points list√©s
    lines = section.split('\n')
    
    for line in lines:
        line = line.strip()
        if line.startswith('-') or line.startswith('‚Ä¢') or re.match(r'^\d+\.', line):
            # Nettoyer et ajouter
            point_text = re.sub(r'^[-‚Ä¢\d.]+\s*', '', line)
            
            points.append({
                'point': point_text[:100],  # Titre court
                'details': point_text
            })
    
    return points

def extract_ai_insights(response: str) -> List[str]:
    """Extrait les insights de l'analyse IA"""
    
    insights = []
    
    # Patterns pour les insights
    insight_patterns = [
        r'[Ii]l appara√Æt que[:\s]+([^\n]+)',
        r'[Oo]n peut conclure[:\s]+([^\n]+)',
        r'[Ll]\'analyse r√©v√®le[:\s]+([^\n]+)',
        r'[Ii]l est notable que[:\s]+([^\n]+)'
    ]
    
    for pattern in insight_patterns:
        matches = re.findall(pattern, response)
        insights.extend(matches)
    
    return insights

# Fonctions de visualisation

def create_convergence_divergence_chart(comparison: Dict[str, Any]) -> go.Figure:
    """Cr√©e un graphique des convergences/divergences"""
    
    labels = ['Convergences', 'Divergences', '√âvolutions']
    values = [
        len(comparison.get('convergences', [])),
        len(comparison.get('divergences', [])),
        len(comparison.get('evolutions', []))
    ]
    
    fig = go.Figure(data=[go.Pie(labels=labels, values=values)])
    
    fig.update_layout(
        title="R√©partition de l'analyse comparative",
        height=400
    )
    
    return fig

def create_similarity_heatmap(similarity_matrix: Dict[str, Dict]) -> go.Figure:
    """Cr√©e une heatmap de similarit√©"""
    
    # Extraire les donn√©es
    comparisons = list(similarity_matrix.keys())
    scores = [data['score'] for data in similarity_matrix.values()]
    
    # Cr√©er la matrice pour la heatmap
    # Pour simplifier, on affiche juste les scores
    fig = go.Figure(data=go.Bar(
        x=comparisons,
        y=scores,
        text=[f"{s:.0%}" for s in scores],
        textposition='auto'
    ))
    
    fig.update_layout(
        title="Scores de similarit√© entre documents",
        xaxis_title="Comparaisons",
        yaxis_title="Similarit√©",
        yaxis_range=[0, 1],
        height=400
    )
    
    return fig

def create_comparison_timeline(timeline_data: List[Dict]) -> go.Figure:
    """Cr√©e une timeline de comparaison"""
    
    # Impl√©menter selon les donn√©es de timeline
    # Pour l'instant, retourner un graphique vide
    fig = go.Figure()
    fig.update_layout(title="Timeline comparative")
    
    return fig

def create_entities_comparison_chart(entities_data: Dict[str, Any]) -> go.Figure:
    """Cr√©e un graphique de comparaison des entit√©s"""
    
    # Donn√©es pour le graphique
    entity_types = ['Personnes', 'Organisations', 'Lieux']
    counts = [
        len(entities_data.get('all_entities', {}).get('persons', [])),
        len(entities_data.get('all_entities', {}).get('organizations', [])),
        len(entities_data.get('all_entities', {}).get('locations', []))
    ]
    
    common_counts = [
        len(entities_data.get('common_entities', {}).get('persons', [])),
        len(entities_data.get('common_entities', {}).get('organizations', [])),
        0  # Pas de lieux communs calcul√©s pour l'instant
    ]
    
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        name='Total',
        x=entity_types,
        y=counts
    ))
    
    fig.add_trace(go.Bar(
        name='Communs',
        x=entity_types,
        y=common_counts
    ))
    
    fig.update_layout(
        title="Entit√©s dans les documents",
        xaxis_title="Type d'entit√©",
        yaxis_title="Nombre",
        barmode='group',
        height=400
    )
    
    return fig