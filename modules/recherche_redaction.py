"""Module de r√©daction de documents juridiques"""

import streamlit as st
from datetime import datetime
from managers.multi_llm_manager import MultiLLMManager
from .recherche_export import create_formatted_docx

def process_redaction_request(query: str, analysis: dict):
    """Traite une demande de r√©daction g√©n√©rale"""
    doc_type = analysis.get('document_type', 'general')
    
    if doc_type == 'plainte':
        parties = analysis.get('parties', [])
        generate_plainte(query, parties)
    elif doc_type == 'conclusions':
        generate_conclusions(query, analysis)
    else:
        st.warning("Type de document non reconnu")

def generate_plainte(query: str, parties: list):
    """G√©n√®re une plainte avec les IA disponibles"""
    
    st.markdown("### üìù G√©n√©ration de la plainte en cours...")
    
    # V√©rifier si on a des IA disponibles
    try:
        llm_manager = MultiLLMManager()
        
        if not llm_manager.clients:
            st.error("‚ùå Aucune IA n'est configur√©e. Veuillez configurer au moins une cl√© API dans les secrets.")
            st.info("Ajoutez une de ces cl√©s dans les secrets Hugging Face : ANTHROPIC_API_KEY, OPENAI_API_KEY, ou GOOGLE_API_KEY")
            return
        
        # Construire le prompt pour la plainte
        prompt = f"""Tu es un avocat expert en droit p√©nal des affaires. 
        
R√©dige une plainte p√©nale contre les soci√©t√©s suivantes : {', '.join(parties)}

Contexte : {query}

La plainte doit inclure :

1. EN-T√äTE
   - Identification du plaignant
   - Identification des mis en cause : {', '.join(parties)}
   - Objet de la plainte

2. EXPOS√â DES FAITS
   - Chronologie d√©taill√©e
   - Description pr√©cise des manquements
   - Pr√©judices subis

3. QUALIFICATION JURIDIQUE
   - Infractions p√©nales caract√©ris√©es
   - Articles du Code p√©nal applicables
   - √âl√©ments constitutifs

4. DEMANDES
   - Constitution de partie civile
   - Demandes d'actes d'enqu√™te
   - √âvaluation provisoire du pr√©judice

5. PI√àCES JOINTES
   - Liste des pi√®ces justificatives

Format professionnel, ton formel, style juridique."""

        # Utiliser la premi√®re IA disponible
        provider = list(llm_manager.clients.keys())[0]
        
        with st.spinner(f"G√©n√©ration avec {provider.value}..."):
            response = llm_manager.query_single_llm(
                provider,
                prompt,
                "Tu es un avocat p√©naliste expert en droit des affaires."
            )
            
            if response['success']:
                # Stocker le r√©sultat
                st.session_state.redaction_result = {
                    'type': 'plainte',
                    'document': response['response'],
                    'timestamp': datetime.now(),
                    'provider': provider.value,
                    'parties': parties
                }
                
                # Afficher le r√©sultat
                st.success("‚úÖ Plainte g√©n√©r√©e avec succ√®s !")
                
                # Zone de texte pour √©diter
                edited_content = st.text_area(
                    "üìÑ Contenu de la plainte (vous pouvez √©diter)",
                    value=response['response'],
                    height=600,
                    key="edit_plainte"
                )
                
                # Boutons d'action
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    # Export Word
                    docx_data = create_formatted_docx(edited_content, 'plainte')
                    st.download_button(
                        "üìÑ T√©l√©charger Word",
                        docx_data,
                        f"plainte_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx",
                        "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                    )
                
                with col2:
                    # Export PDF (si disponible)
                    st.download_button(
                        "üìë T√©l√©charger PDF",
                        edited_content.encode('utf-8'),
                        f"plainte_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                        "text/plain"
                    )
                
                with col3:
                    if st.button("üîÑ R√©g√©n√©rer"):
                        st.session_state.process_query = True
                        st.rerun()
                
            else:
                st.error(f"‚ùå Erreur : {response.get('error', 'Erreur inconnue')}")
                
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la g√©n√©ration : {str(e)}")
        st.info("V√©rifiez que les cl√©s API sont bien configur√©es dans les secrets")

def generate_conclusions(query: str, analysis: dict):
    """G√©n√®re des conclusions"""
    st.info("üöß G√©n√©ration de conclusions en cours d'impl√©mentation")
    # TODO: Impl√©menter