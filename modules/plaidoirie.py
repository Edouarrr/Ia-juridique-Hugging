# modules/plaidoirie.py
"""Module de g√©n√©ration et gestion des plaidoiries"""

import streamlit as st
from datetime import datetime
from typing import List, Dict, Any, Optional, Tuple
import re
from collections import defaultdict

from config.app_config import LLMProvider, REDACTION_STYLES
from managers.multi_llm_manager import MultiLLMManager
from models.dataclasses import PlaidoirieResult, Document
from utils.helpers import extract_section, format_duration

def process_plaidoirie_request(query: str, analysis: dict):
    """Traite une demande de g√©n√©ration de plaidoirie"""
    
    st.markdown("### üé§ G√©n√©ration de plaidoirie")
    
    # Configuration de la plaidoirie
    config = display_plaidoirie_config_interface(analysis)
    
    if st.button("üöÄ G√©n√©rer la plaidoirie", key="generate_plaidoirie", type="primary"):
        with st.spinner("üéØ G√©n√©ration de la plaidoirie en cours..."):
            result = generate_plaidoirie(config, analysis)
            
            if result:
                st.session_state.plaidoirie_result = result
                display_plaidoirie_results(result)

def display_plaidoirie_config_interface(analysis: dict) -> dict:
    """Interface de configuration pour la plaidoirie"""
    
    config = {}
    
    # Configuration en colonnes
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # Type d'audience
        config['audience_type'] = st.selectbox(
            "‚öñÔ∏è Type d'audience",
            ["correctionnelle", "assises", "civile", "commerciale", "prud'homale", "administrative"],
            format_func=lambda x: {
                "correctionnelle": "Tribunal correctionnel",
                "assises": "Cour d'assises",
                "civile": "Tribunal civil",
                "commerciale": "Tribunal de commerce",
                "prud'homale": "Conseil de prud'hommes",
                "administrative": "Tribunal administratif"
            }.get(x, x.title()),
            key="audience_type_select"
        )
        
        # Position
        config['position'] = st.radio(
            "üìç Position",
            ["defense", "partie_civile", "demandeur", "defendeur"],
            format_func=lambda x: {
                "defense": "üõ°Ô∏è D√©fense",
                "partie_civile": "‚öñÔ∏è Partie civile",
                "demandeur": "üìã Demandeur",
                "defendeur": "üõ°Ô∏è D√©fendeur"
            }.get(x, x.title()),
            key="position_select"
        )
    
    with col2:
        # Dur√©e cible
        config['duree'] = st.select_slider(
            "‚è±Ô∏è Dur√©e cible",
            options=["5 min", "10 min", "15 min", "20 min", "30 min", "45 min", "1h"],
            value="20 min",
            key="duree_select"
        )
        
        # Style oratoire
        config['style'] = st.selectbox(
            "üé≠ Style oratoire",
            ["classique", "moderne", "emotionnel", "technique", "percutant"],
            format_func=lambda x: {
                "classique": "Classique - Solennel et structur√©",
                "moderne": "Moderne - Direct et accessible",
                "emotionnel": "√âmotionnel - Touchant et empathique",
                "technique": "Technique - Pr√©cis et factuel",
                "percutant": "Percutant - Dynamique et m√©morable"
            }.get(x, x.title()),
            key="style_select"
        )
    
    with col3:
        # Options suppl√©mentaires
        config['avec_replique'] = st.checkbox(
            "üí¨ Inclure r√©plique",
            value=True,
            help="Pr√©parer une r√©plique aux arguments adverses",
            key="avec_replique_check"
        )
        
        config['avec_notes'] = st.checkbox(
            "üìù Inclure notes orales",
            value=True,
            help="Ajouter des indications pour l'oral",
            key="avec_notes_check"
        )
        
        config['client_present'] = st.checkbox(
            "üë• Client pr√©sent",
            value=True,
            help="Adapter le discours si le client est pr√©sent",
            key="client_present_check"
        )
    
    # √âl√©ments du dossier
    with st.expander("üìÇ √âl√©ments du dossier", expanded=True):
        col1, col2 = st.columns(2)
        
        with col1:
            config['client_name'] = st.text_input(
                "üë§ Nom du client",
                value=analysis.get('client', ''),
                key="client_name_input"
            )
            
            config['adversaire'] = st.text_input(
                "‚öîÔ∏è Partie adverse",
                value=analysis.get('adversaire', ''),
                key="adversaire_input"
            )
        
        with col2:
            config['juridiction'] = st.text_input(
                "üèõÔ∏è Juridiction",
                value=analysis.get('juridiction', 'Tribunal'),
                key="juridiction_input"
            )
            
            config['juge'] = st.text_input(
                "üë®‚Äç‚öñÔ∏è Pr√©sident/Juge",
                placeholder="M./Mme le/la Pr√©sident(e)",
                key="juge_input"
            )
    
    # Points cl√©s √† d√©velopper
    config['points_cles'] = st.text_area(
        "üéØ Points cl√©s √† d√©velopper",
        placeholder="- Premier point fort\n- Deuxi√®me point fort\n- Point de r√©futation",
        height=100,
        key="points_cles_textarea"
    )
    
    # Documents √† citer
    available_docs = get_available_documents_for_plaidoirie(analysis)
    if available_docs:
        config['documents_citer'] = st.multiselect(
            "üìÑ Documents √† citer",
            options=[doc['title'] for doc in available_docs],
            default=[doc['title'] for doc in available_docs[:5]],
            key="documents_citer_select"
        )
    
    return config

def generate_plaidoirie(config: dict, analysis: dict) -> Optional[PlaidoirieResult]:
    """G√©n√®re une plaidoirie compl√®te"""
    
    llm_manager = MultiLLMManager()
    
    if not llm_manager.clients:
        st.error("‚ùå Aucune IA disponible")
        return None
    
    # Construire le prompt
    prompt = build_plaidoirie_prompt(config, analysis)
    system_prompt = build_plaidoirie_system_prompt(config)
    
    # D√©terminer les tokens selon la dur√©e
    duration_tokens = {
        "5 min": 1500,
        "10 min": 2500,
        "15 min": 3500,
        "20 min": 4500,
        "30 min": 6000,
        "45 min": 8000,
        "1h": 10000
    }
    
    max_tokens = duration_tokens.get(config['duree'], 4500)
    
    # G√©n√©rer la plaidoirie
    provider = list(llm_manager.clients.keys())[0]
    response = llm_manager.query_single_llm(
        provider,
        prompt,
        system_prompt,
        temperature=0.8,  # Plus cr√©atif pour l'oral
        max_tokens=max_tokens
    )
    
    if response['success']:
        # Analyser la plaidoirie g√©n√©r√©e
        plaidoirie_content = response['response']
        
        # Extraire les √©l√©ments
        key_points = extract_key_points(plaidoirie_content)
        structure = extract_plaidoirie_structure(plaidoirie_content)
        oral_markers = extract_oral_markers(plaidoirie_content)
        
        return PlaidoirieResult(
            content=plaidoirie_content,
            type=config['audience_type'],
            style=config['style'],
            duration_estimate=config['duree'],
            key_points=key_points,
            structure=structure,
            oral_markers=oral_markers,
            metadata={
                'position': config['position'],
                'avec_replique': config.get('avec_replique', False),
                'client_present': config.get('client_present', False),
                'provider': response['provider']
            }
        )
    
    return None

def build_plaidoirie_prompt(config: dict, analysis: dict) -> str:
    """Construit le prompt pour g√©n√©rer la plaidoirie"""
    
    # Adapter selon le type d'audience
    audience_context = {
        "correctionnelle": "audience correctionnelle pour une affaire p√©nale",
        "assises": "audience de cour d'assises pour crime",
        "civile": "audience civile",
        "commerciale": "audience du tribunal de commerce",
        "prud'homale": "audience prud'homale",
        "administrative": "audience du tribunal administratif"
    }
    
    prompt = f"""R√©dige une plaidoirie compl√®te et percutante pour une {audience_context.get(config['audience_type'], 'audience')}.

CONTEXTE:
- Position : {config['position']}
- Client : {config.get('client_name', '[Client]')}
- Partie adverse : {config.get('adversaire', '[Adversaire]')}
- Juridiction : {config.get('juridiction', 'Tribunal')}
- Dur√©e cible : {config['duree']}
- Style : {config['style']}

AFFAIRE:
{analysis.get('subject_matter', '')}

POINTS CL√âS √Ä D√âVELOPPER:
{config.get('points_cles', '')}

EXIGENCES POUR LA PLAIDOIRIE:

1. INTRODUCTION (1-2 min)
   - Salutations appropri√©es √† la juridiction
   - Pr√©sentation claire de la position d√©fendue
   - Annonce du plan (si plaidoirie longue)
   - Accroche percutante pour capter l'attention

2. D√âVELOPPEMENT ({config['duree']} principal)
   - Arguments structur√©s et progressifs
   - Utilisation des pi√®ces du dossier
   - R√©futation des arguments adverses
   - Moments d'√©motion calcul√©s selon le style
   - Transitions fluides entre les parties

3. P√âRORAISON (1-2 min)
   - Synth√®se percutante des arguments
   - Appel √† la justice
   - Formule de conclusion appropri√©e
"""
    
    # Adaptations selon la position
    if config['position'] == 'defense':
        prompt += """
SP√âCIFICIT√âS D√âFENSE:
- Insister sur la pr√©somption d'innocence
- D√©montrer les failles de l'accusation
- Humaniser le client
- Cr√©er le doute raisonnable
"""
    elif config['position'] == 'partie_civile':
        prompt += """
SP√âCIFICIT√âS PARTIE CIVILE:
- Exposer les souffrances subies
- D√©montrer le lien de causalit√©
- Chiffrer les pr√©judices
- Demander r√©paration int√©grale
"""
    
    # Style oratoire
    style_instructions = {
        "classique": "Style solennel et r√©v√©rencieux, formules consacr√©es, structure rigoureuse",
        "moderne": "Style direct et accessible, langage clair, exemples concrets",
        "emotionnel": "Jouer sur les √©motions, cr√©er l'empathie, t√©moignages poignants",
        "technique": "Arguments juridiques pr√©cis, citations exactes, rigueur d√©monstrative",
        "percutant": "Formules choc, rythme soutenu, images marquantes"
    }
    
    prompt += f"\nSTYLE ORATOIRE: {style_instructions.get(config['style'], '')}\n"
    
    # Options sp√©ciales
    if config.get('avec_notes'):
        prompt += """
NOTES POUR L'ORAL:
- Indiquer les pauses avec [pause]
- Marquer les emphases avec [insister]
- Noter les gestes avec [geste: description]
- Indiquer les changements de ton avec [ton: description]
- Marquer les moments de silence avec [silence]
"""
    
    if config.get('avec_replique'):
        prompt += """
INCLURE UNE SECTION R√âPLIQUE:
- Anticiper les arguments adverses principaux
- Pr√©parer des r√©ponses percutantes
- Format: "Si l'on nous objecte que... nous r√©pondrons que..."
"""
    
    if config.get('client_present'):
        prompt += """
ADAPTATION CLIENT PR√âSENT:
- S'adresser parfois directement au client
- √âviter les termes trop techniques
- Valoriser la personne du client
- Montrer l'engagement de la d√©fense
"""
    
    prompt += "\nLa plaidoirie doit √™tre imm√©diatement utilisable √† l'oral, avec un rythme adapt√© √† la dur√©e cible."
    
    return prompt

def build_plaidoirie_system_prompt(config: dict) -> str:
    """Construit le prompt syst√®me pour la plaidoirie"""
    
    base_prompt = "Tu es un avocat brillant et charismatique, expert en art oratoire judiciaire."
    
    # Sp√©cialisation selon le type
    specializations = {
        "correctionnelle": "Tu ma√Ætrises parfaitement les plaidoiries p√©nales devant le tribunal correctionnel.",
        "assises": "Tu excelles dans les grandes plaidoiries d'assises, sachant toucher les jur√©s.",
        "civile": "Tu es sp√©cialis√© dans l'argumentation civile claire et convaincante.",
        "commerciale": "Tu comprends les enjeux commerciaux et sais parler aux juges consulaires.",
        "prud'homale": "Tu ma√Ætrises les sp√©cificit√©s du droit du travail et l'art de convaincre les conseillers.",
        "administrative": "Tu excelles dans l'argumentation technique du contentieux administratif."
    }
    
    base_prompt += f" {specializations.get(config['audience_type'], '')}"
    
    # Style
    style_traits = {
        "classique": "Tu adoptes un style oratoire classique et solennel, digne des grands t√©nors du barreau.",
        "moderne": "Tu utilises un style moderne et direct, accessible tout en restant professionnel.",
        "emotionnel": "Tu sais manier l'√©motion avec finesse pour toucher ton auditoire.",
        "technique": "Tu privil√©gies la rigueur technique et la pr√©cision juridique.",
        "percutant": "Tu as un style percutant et m√©morable, avec des formules qui marquent."
    }
    
    base_prompt += f" {style_traits.get(config['style'], '')}"
    
    base_prompt += " Tu structures tes plaidoiries pour maximiser l'impact sur l'auditoire."
    
    return base_prompt

def get_available_documents_for_plaidoirie(analysis: dict) -> List[Dict[str, Any]]:
    """R√©cup√®re les documents disponibles pour la plaidoirie"""
    
    documents = []
    
    # Documents de la session
    for doc_id, doc in st.session_state.get('azure_documents', {}).items():
        doc_type = detect_document_type(doc.title, doc.content)
        
        # Prioriser certains types pour la plaidoirie
        if doc_type in ['temoignage', 'expertise', 'procedure']:
            documents.append({
                'id': doc_id,
                'title': doc.title,
                'type': doc_type,
                'relevance': 0.9
            })
        else:
            documents.append({
                'id': doc_id,
                'title': doc.title,
                'type': doc_type,
                'relevance': 0.5
            })
    
    # Trier par pertinence
    documents.sort(key=lambda x: x['relevance'], reverse=True)
    
    return documents[:20]  # Limiter √† 20 documents

def detect_document_type(title: str, content: str) -> str:
    """D√©tecte le type d'un document pour la plaidoirie"""
    title_lower = title.lower()
    content_preview = content[:1000].lower()
    
    if any(kw in title_lower for kw in ['audition', 'interrogatoire', 'garde √† vue']):
        return 'temoignage'
    elif any(kw in title_lower for kw in ['expertise', 'expert', 'rapport']):
        return 'expertise'
    elif any(kw in title_lower for kw in ['pv', 'proc√®s-verbal', 'constat']):
        return 'procedure'
    else:
        return 'piece'

def extract_key_points(plaidoirie: str) -> List[str]:
    """Extrait les points cl√©s de la plaidoirie"""
    key_points = []
    
    # Chercher les sections principales
    sections = re.split(r'\n(?=[IVX]+\.|\d+\.)', plaidoirie)
    
    for section in sections:
        # Extraire la premi√®re phrase substantielle de chaque section
        lines = section.strip().split('\n')
        for line in lines:
            if len(line) > 50 and not re.match(r'^[IVX]+\.|^\d+\.', line):
                # Nettoyer les marqueurs oraux
                clean_line = re.sub(r'\[.*?\]', '', line).strip()
                if clean_line:
                    key_points.append(clean_line)
                break
    
    # Chercher aussi les phrases avec emphase
    emphases = re.findall(r'\[insister\](.*?)(?:\[|$)', plaidoirie)
    key_points.extend(emphases)
    
    # D√©dupliquer et limiter
    seen = set()
    unique_points = []
    for point in key_points:
        if point not in seen and len(point) > 20:
            seen.add(point)
            unique_points.append(point)
    
    return unique_points[:10]

def extract_plaidoirie_structure(content: str) -> Dict[str, List[str]]:
    """Extrait la structure hi√©rarchique de la plaidoirie"""
    structure = defaultdict(list)
    
    # Diviser en sections principales
    current_section = "Introduction"
    
    lines = content.split('\n')
    
    for line in lines:
        # D√©tecter les sections principales
        if re.match(r'^[IVX]+\.\s+', line):
            current_section = line.strip()
        # D√©tecter les sous-sections
        elif re.match(r'^[A-Z]\.\s+', line):
            structure[current_section].append(line.strip())
        # D√©tecter les marqueurs sp√©ciaux
        elif any(marker in line for marker in ['R√âPLIQUE', 'P√âRORAISON', 'CONCLUSION']):
            current_section = line.strip()
    
    return dict(structure)

def extract_oral_markers(plaidoirie: str) -> List[str]:
    """Extrait les marqueurs pour l'oral"""
    markers = []
    
    # Tous les marqueurs entre crochets
    all_markers = re.findall(r'\[(.*?)\]', plaidoirie)
    
    # Cat√©goriser
    for marker in all_markers:
        if marker not in markers:
            markers.append(marker)
    
    return markers

def display_plaidoirie_results(result: PlaidoirieResult):
    """Affiche les r√©sultats de la plaidoirie"""
    
    st.success("‚úÖ Plaidoirie g√©n√©r√©e avec succ√®s!")
    
    # M√©tadonn√©es
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Type", result.type.title())
    
    with col2:
        st.metric("Dur√©e estim√©e", result.duration_estimate)
    
    with col3:
        st.metric("Style", result.style.title())
    
    with col4:
        speaking_time = result.get_speaking_time()
        st.metric("Temps de parole", f"{speaking_time} min")
    
    # Options d'affichage
    view_mode = st.radio(
        "Mode d'affichage",
        ["üìÑ Texte complet", "üéØ Points cl√©s", "üìä Structure", "üé¨ Mode r√©p√©tition"],
        horizontal=True,
        key="plaidoirie_view_mode"
    )
    
    if view_mode == "üìÑ Texte complet":
        # Affichage avec mise en forme
        display_plaidoirie_text(result.content)
        
    elif view_mode == "üéØ Points cl√©s":
        st.markdown("### üéØ Points cl√©s de la plaidoirie")
        for i, point in enumerate(result.key_points, 1):
            st.write(f"**{i}.** {point}")
    
    elif view_mode == "üìä Structure":
        st.markdown("### üìä Structure de la plaidoirie")
        for section, subsections in result.structure.items():
            with st.expander(section, expanded=True):
                if subsections:
                    for subsection in subsections:
                        st.write(f"‚Ä¢ {subsection}")
                else:
                    st.info("Section sans sous-parties")
    
    else:  # Mode r√©p√©tition
        show_rehearsal_mode(result.content)
    
    # Actions
    st.markdown("### üíæ Actions")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üìÑ Exporter PDF", key="export_plaidoirie_pdf"):
            pdf_content = export_plaidoirie_to_pdf(result)
            st.download_button(
                "üíæ T√©l√©charger PDF",
                pdf_content,
                f"plaidoirie_{result.type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                "application/pdf",
                key="download_plaidoirie_pdf"
            )
    
    with col2:
        if st.button("üé§ Version orateur", key="create_speaker_version"):
            speaker_version = create_speaker_version(result)
            st.download_button(
                "üíæ Notes orateur",
                speaker_version.encode('utf-8'),
                f"notes_plaidoirie_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                "text/plain",
                key="download_speaker_notes"
            )
    
    with col3:
        if st.button("üìä Statistiques", key="plaidoirie_stats"):
            show_plaidoirie_statistics(result.content)
    
    with col4:
        if st.button("üó∫Ô∏è Carte mentale", key="plaidoirie_mindmap"):
            create_plaidoirie_mindmap(result.content)

def display_plaidoirie_text(content: str):
    """Affiche le texte de la plaidoirie avec mise en forme"""
    
    # Remplacer les marqueurs par des √©mojis/formatting
    formatted_content = content
    
    # Marqueurs de pause
    formatted_content = re.sub(r'\[pause\]', '‚è∏Ô∏è', formatted_content)
    formatted_content = re.sub(r'\[silence\]', 'ü§´', formatted_content)
    
    # Marqueurs d'emphase
    formatted_content = re.sub(r'\[insister\](.*?)(?=\[|$)', r'**\1**', formatted_content)
    
    # Marqueurs de ton
    formatted_content = re.sub(r'\[ton:\s*(.*?)\]', r'üé≠ *(\1)*', formatted_content)
    
    # Marqueurs de geste
    formatted_content = re.sub(r'\[geste:\s*(.*?)\]', r'üëê *(\1)*', formatted_content)
    
    # Afficher avec coloration syntaxique basique
    lines = formatted_content.split('\n')
    
    for line in lines:
        if re.match(r'^[IVX]+\.', line):
            st.markdown(f"## {line}")
        elif re.match(r'^[A-Z]\.', line):
            st.markdown(f"### {line}")
        elif line.strip().isupper() and len(line.strip()) > 5:
            st.markdown(f"### {line}")
        else:
            st.write(line)

def show_rehearsal_mode(content: str):
    """Mode r√©p√©tition pour la plaidoirie"""
    st.markdown("### üé¨ Mode r√©p√©tition")
    
    # Diviser en sections
    sections = re.split(r'\n\n+', content)
    
    # Navigation entre sections
    if 'rehearsal_section' not in st.session_state:
        st.session_state.rehearsal_section = 0
    
    current_section = st.session_state.rehearsal_section
    
    # Afficher la section courante
    st.info(f"Section {current_section + 1} / {len(sections)}")
    
    st.text_area(
        "Section actuelle",
        value=sections[current_section] if current_section < len(sections) else "",
        height=300,
        key="rehearsal_display"
    )
    
    # Navigation
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("‚¨ÖÔ∏è Pr√©c√©dent", disabled=current_section == 0):
            st.session_state.rehearsal_section -= 1
            st.rerun()
    
    with col2:
        progress = (current_section + 1) / len(sections)
        st.progress(progress)
        st.write(f"Progression : {progress * 100:.0f}%")
    
    with col3:
        if st.button("Suivant ‚û°Ô∏è", disabled=current_section >= len(sections) - 1):
            st.session_state.rehearsal_section += 1
            st.rerun()
    
    # Timer
    with st.expander("‚è±Ô∏è Chronom√®tre", expanded=True):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("‚ñ∂Ô∏è D√©marrer", key="start_timer"):
                st.session_state.timer_start = datetime.now()
        
        with col2:
            if st.button("‚è∏Ô∏è Pause", key="pause_timer"):
                if 'timer_start' in st.session_state:
                    elapsed = datetime.now() - st.session_state.timer_start
                    st.write(f"Temps √©coul√© : {elapsed.seconds // 60}:{elapsed.seconds % 60:02d}")
        
        with col3:
            if st.button("üîÑ R√©initialiser", key="reset_timer"):
                if 'timer_start' in st.session_state:
                    del st.session_state.timer_start
    
    # Conseils
    st.markdown("""
    **üí° Conseils r√©p√©tition :**
    - R√©p√©tez debout, comme en audience
    - Enregistrez-vous pour √©couter le rythme
    - Marquez physiquement les [pauses]
    - Variez le ton selon les [ton: indications]
    - Pratiquez les gestes indiqu√©s [geste: description]
    - Chronom√©trez chaque section
    """)

def create_speaker_version(result: PlaidoirieResult) -> str:
    """Cr√©e une version annot√©e pour l'orateur"""
    
    speaker_notes = f"""NOTES POUR L'ORATEUR
{'=' * 50}

Type d'audience : {result.type}
Dur√©e cible : {result.duration_estimate}
Style : {result.style}

POINTS CL√âS √Ä RETENIR :
{'-' * 30}
"""
    
    for i, point in enumerate(result.key_points, 1):
        speaker_notes += f"{i}. {point}\n"
    
    speaker_notes += f"\n\nTEXTE ANNOT√â :\n{'=' * 50}\n\n"
    
    # Ajouter des annotations suppl√©mentaires
    annotated_text = result.content
    
    # Marquer les transitions importantes
    annotated_text = re.sub(
        r'(Premi√®rement|Deuxi√®mement|Enfin|En conclusion)',
        r'[TRANSITION IMPORTANTE] \1',
        annotated_text
    )
    
    # Marquer les moments cl√©s
    annotated_text = re.sub(
        r'(Il est constant que|Force est de constater|Par cons√©quent)',
        r'[MOMENT CL√â] \1',
        annotated_text
    )
    
    speaker_notes += annotated_text
    
    return speaker_notes

def export_plaidoirie_to_pdf(result: PlaidoirieResult) -> bytes:
    """Exporte la plaidoirie en PDF (version simplifi√©e)"""
    
    # Pour un vrai PDF, utiliser reportlab ou weasyprint
    # Ici version texte format√©e
    
    content = f"""PLAIDOIRIE
{result.type.upper()}

Dur√©e estim√©e : {result.duration_estimate}
Style : {result.style}

{'=' * 50}

{result.content}

{'=' * 50}

POINTS CL√âS :
"""
    
    for i, point in enumerate(result.key_points, 1):
        content += f"\n{i}. {point}"
    
    return content.encode('utf-8')

def show_plaidoirie_statistics(content: str):
    """Affiche les statistiques de la plaidoirie"""
    st.markdown("### üìä Statistiques de la plaidoirie")
    
    # Calculs
    clean_content = re.sub(r'\[.*?\]', '', content)
    words = clean_content.split()
    sentences = clean_content.split('.')
    
    # Sections
    sections = re.findall(r'^[IVX]+\.\s+.*', content, re.MULTILINE)
    subsections = re.findall(r'^[A-Z]\.\s+.*', content, re.MULTILINE)
    
    # Affichage
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Mots totaux", f"{len(words):,}")
        st.metric("Phrases", len(sentences))
        st.metric("Mots/minute", f"{len(words) / 150:.0f} min")
    
    with col2:
        st.metric("Sections principales", len(sections))
        st.metric("Sous-sections", len(subsections))
        st.metric("Longueur moyenne phrase", f"{len(words) / max(len(sentences), 1):.1f} mots")
    
    with col3:
        annotations = len(re.findall(r'\[.*?\]', content))
        st.metric("Annotations orales", annotations)
        st.metric("Questions rh√©toriques", content.count('?'))
        st.metric("Points d'exclamation", content.count('!'))
    
    # Graphique de r√©partition
    if sections:
        st.markdown("### üìà R√©partition du contenu")
        section_lengths = []
        
        for i, section in enumerate(sections):
            # Calculer la longueur approximative de chaque section
            start = content.find(section)
            if i < len(sections) - 1:
                end = content.find(sections[i + 1])
            else:
                end = len(content)
            
            section_content = content[start:end]
            section_words = len(section_content.split())
            section_lengths.append({
                'section': section[:50] + '...' if len(section) > 50 else section,
                'words': section_words,
                'percentage': (section_words / len(words)) * 100
            })
        
        # Afficher
        for item in section_lengths:
            st.write(f"**{item['section']}**")
            st.progress(item['percentage'] / 100)
            st.caption(f"{item['words']} mots ({item['percentage']:.1f}%)")

def create_plaidoirie_mindmap(content: str):
    """Cr√©e une carte mentale de la plaidoirie"""
    st.markdown("### üó∫Ô∏è Structure en carte mentale")
    
    # Extraire la structure
    structure = extract_plaidoirie_structure(content)
    
    # Afficher sous forme textuelle
    mindmap_text = "PLAIDOIRIE\n"
    
    for section, subsections in structure.items():
        mindmap_text += f"‚îú‚îÄ‚îÄ {section}\n"
        for i, subsection in enumerate(subsections):
            is_last = i == len(subsections) - 1
            mindmap_text += f"‚îÇ   {'‚îî' if is_last else '‚îú'}‚îÄ‚îÄ {subsection[:50]}...\n"
        if subsections:
            mindmap_text += "‚îÇ\n"
    
    st.code(mindmap_text, language=None)
    
    # Export
    st.download_button(
        "üíæ T√©l√©charger structure",
        mindmap_text.encode('utf-8'),
        "structure_plaidoirie.txt",
        "text/plain",
        key="download_mindmap"
    )