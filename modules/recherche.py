# modules/recherche.py
"""Module de recherche unifi√©e avec 100% des fonctionnalit√©s int√©gr√©es"""

import streamlit as st
import asyncio
from datetime import datetime, timedelta
import re
import json
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
import networkx as nx
from collections import defaultdict, Counter
from typing import List, Dict, Optional, Any, Tuple
import io
import base64
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders

# Imports des modules internes
from config.app_config import SearchMode, ANALYSIS_PROMPTS_AFFAIRES, LLMProvider
from managers.azure_blob_manager import AzureBlobManager
from managers.azure_search_manager import AzureSearchManager
from managers.multi_llm_manager import MultiLLMManager
from managers.document_manager import display_import_interface
from managers.dynamic_generators import generate_dynamic_search_prompts
from managers.legal_search import LegalSearchManager, display_legal_search_interface
from managers.jurisprudence_verifier import JurisprudenceVerifier
from models.dataclasses import Document, PieceSelectionnee
from utils.helpers import clean_key

# Configuration des styles de r√©daction
REDACTION_STYLES = {
    'formel': {
        'name': 'Formel',
        'description': 'Style juridique classique et solennel',
        'tone': 'respectueux et distant',
        'vocabulary': 'technique et pr√©cis'
    },
    'persuasif': {
        'name': 'Persuasif',
        'description': 'Style argumentatif et convaincant',
        'tone': 'assertif et engag√©',
        'vocabulary': 'percutant et imag√©'
    },
    'technique': {
        'name': 'Technique',
        'description': 'Style factuel et d√©taill√©',
        'tone': 'neutre et objectif',
        'vocabulary': 'sp√©cialis√© et exhaustif'
    },
    'synth√©tique': {
        'name': 'Synth√©tique',
        'description': 'Style concis et efficace',
        'tone': 'direct et clair',
        'vocabulary': 'simple et pr√©cis'
    },
    'p√©dagogique': {
        'name': 'P√©dagogique',
        'description': 'Style explicatif et accessible',
        'tone': 'bienveillant et didactique',
        'vocabulary': 'vulgaris√© et illustr√©'
    }
}

# Templates pr√©d√©finis
DOCUMENT_TEMPLATES = {
    'conclusions_defense': {
        'name': 'Conclusions en d√©fense',
        'structure': [
            'I. FAITS ET PROC√âDURE',
            'II. DISCUSSION',
            '   A. Sur la recevabilit√©',
            '   B. Sur le fond',
            '      1. Sur l\'√©l√©ment mat√©riel',
            '      2. Sur l\'√©l√©ment intentionnel',
            '      3. Sur le pr√©judice',
            'III. PAR CES MOTIFS'
        ],
        'style': 'formel'
    },
    'plainte_simple': {
        'name': 'Plainte simple',
        'structure': [
            'Objet : Plainte',
            'EXPOS√â DES FAITS',
            'QUALIFICATION JURIDIQUE',
            'PR√âJUDICES SUBIS',
            'DEMANDES',
            'PI√àCES JOINTES'
        ],
        'style': 'formel'
    },
    'plainte_avec_cpc': {
        'name': 'Plainte avec constitution de partie civile',
        'structure': [
            'Objet : Plainte avec constitution de partie civile',
            'EXPOS√â DES FAITS',
            'QUALIFICATION JURIDIQUE',
            'PR√âJUDICES SUBIS',
            'CONSTITUTION DE PARTIE CIVILE',
            '√âVALUATION DU PR√âJUDICE',
            'DEMANDES',
            'PI√àCES JOINTES'
        ],
        'style': 'formel'
    },
    'mise_en_demeure': {
        'name': 'Mise en demeure',
        'structure': [
            'MISE EN DEMEURE',
            'Rappel des faits',
            'Obligations non respect√©es',
            'D√©lai accord√©',
            'Cons√©quences du d√©faut',
            'R√©serves'
        ],
        'style': 'persuasif'
    },
    'note_synthese': {
        'name': 'Note de synth√®se',
        'structure': [
            'SYNTH√àSE EX√âCUTIVE',
            'I. CONTEXTE',
            'II. ANALYSE',
            'III. RECOMMANDATIONS',
            'IV. PLAN D\'ACTION'
        ],
        'style': 'synth√©tique'
    }
}

def show_page():
    """Affiche la page de recherche unifi√©e compl√®te"""
    
    # Initialiser l'historique si n√©cessaire
    if 'query_history' not in st.session_state:
        st.session_state.query_history = []
    
    if 'saved_templates' not in st.session_state:
        st.session_state.saved_templates = {}
    
    st.header("üîç Centre de Commande Juridique IA")
    
    # BARRE DE RECHERCHE UNIVERSELLE
    show_universal_interface()
    
    # Quick actions si aucune requ√™te
    if not st.session_state.get('universal_query'):
        show_quick_actions()
    
    # Onglets pour fonctionnalit√©s sp√©cialis√©es
    tabs = st.tabs([
        "üìä R√©sultats", 
        "üìã Pi√®ces",
        "‚öñÔ∏è Jurisprudence", 
        "üìÅ Explorateur",
        "‚öôÔ∏è Configuration"
    ])
    
    with tabs[0]:
        show_unified_results_tab()
    
    with tabs[1]:
        show_pieces_management_tab()
    
    with tabs[2]:
        show_jurisprudence_tab()
    
    with tabs[3]:
        show_explorer_tab()
    
    with tabs[4]:
        show_configuration_tab()

def show_universal_interface():
    """Interface universelle de recherche et commande compl√®te"""
    
    # Afficher l'historique si demand√©
    if st.session_state.get('show_history', False):
        show_query_history_panel()
    
    st.markdown("""
    ### üéØ Barre de Commande Universelle
    
    <style>
    .command-examples {
        background-color: #f0f2f6;
        padding: 10px;
        border-radius: 5px;
        margin: 10px 0;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Exemples contextuels
    with st.expander("üí° Exemples de commandes", expanded=False):
        show_contextual_examples()
    
    # BARRE UNIVERSELLE avec autocompl√©tion
    col1, col2 = st.columns([5, 1])
    
    with col1:
        query = st.text_input(
            "üéØ Que voulez-vous faire ?",
            value=st.session_state.get('universal_query', ''),
            placeholder="Ex: r√©diger conclusions d√©fense @affaire_martin abus de biens sociaux",
            key="universal_input",
            help="Recherche, analyse, r√©daction, import, export, synth√®se... Tout est possible !",
            on_change=on_query_change
        )
    
    with col2:
        # Bouton historique
        if st.button("üìú", key="toggle_history", help="Historique des commandes"):
            st.session_state.show_history = not st.session_state.get('show_history', False)
            st.rerun()
    
    # Suggestions intelligentes
    if query and len(query) > 2:
        suggestions = get_smart_suggestions(query)
        if suggestions:
            st.markdown("**Suggestions :**")
            cols = st.columns(min(len(suggestions), 3))
            for i, (col, suggestion) in enumerate(zip(cols, suggestions[:3])):
                with col:
                    if st.button(f"‚Üí {suggestion}", key=f"sugg_{i}"):
                        st.session_state.universal_query = suggestion
                        st.rerun()
    
    # ANALYSE EN TEMPS R√âEL
    if query:
        analysis = analyze_universal_query(query)
        display_universal_analysis(analysis)
        
        # Configuration contextuelle selon l'intention
        show_contextual_config(analysis)
    
    # D√âCLENCHEMENT AUTOMATIQUE
    if query and query != st.session_state.get('last_universal_query', ''):
        st.session_state.last_universal_query = query
        # Ajouter √† l'historique
        add_to_history(query)
        process_universal_query(query)
    
    # BOUTONS D'ACTION
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        if st.button("üöÄ Ex√©cuter", type="primary", key="execute_universal", disabled=not query):
            if query:
                process_universal_query(query)
    
    with col2:
        if st.button("üóëÔ∏è Effacer", key="clear_universal"):
            clear_universal_state()
    
    with col3:
        if st.button("üíæ Sauvegarder", key="save_universal"):
            save_current_work()
    
    with col4:
        if st.button("üì§ Partager", key="share_universal"):
            share_current_work()
    
    with col5:
        if st.button("‚ö° Actions", key="quick_actions"):
            st.session_state.show_quick_actions = not st.session_state.get('show_quick_actions', False)

def on_query_change():
    """Callback lors du changement de requ√™te"""
    # R√©initialiser certains √©tats si la requ√™te change significativement
    new_query = st.session_state.get('universal_input', '')
    old_query = st.session_state.get('universal_query', '')
    
    if new_query != old_query:
        st.session_state.universal_query = new_query

def get_smart_suggestions(query: str) -> List[str]:
    """G√©n√®re des suggestions intelligentes bas√©es sur la requ√™te"""
    suggestions = []
    query_lower = query.lower()
    
    # Suggestions bas√©es sur les mots-cl√©s
    if 'r√©diger' in query_lower and 'conclusions' not in query_lower:
        suggestions.append(f"{query} conclusions en d√©fense")
    
    if '@' in query and ' ' not in query.split('@')[1]:
        # Sugg√©rer des actions pour la r√©f√©rence
        ref = query.split('@')[1]
        suggestions.extend([
            f"{query} analyser les risques",
            f"{query} chronologie des faits",
            f"{query} cartographie des relations"
        ])
    
    if any(word in query_lower for word in ['comparer', 'diff√©rence']):
        suggestions.append(f"{query} entre les auditions")
    
    # Suggestions bas√©es sur l'historique
    if 'query_history' in st.session_state:
        for hist_query in st.session_state.query_history[-5:]:
            if query_lower in hist_query.lower() and hist_query != query:
                suggestions.append(hist_query)
    
    return list(set(suggestions))[:5]  # Max 5 suggestions uniques

def show_contextual_examples():
    """Affiche des exemples contextuels de commandes"""
    examples = {
        "üîç Recherche": [
            "contrats soci√©t√© XYZ",
            "@affaire_martin",
            "@dossier_2024 documents comptables"
        ],
        "ü§ñ Analyse": [
            "@affaire_martin analyser les risques p√©naux",
            "@contrats identifier les clauses abusives",
            "analyser prescription @dossier_ancien"
        ],
        "üìù R√©daction": [
            "r√©diger conclusions d√©fense @affaire_martin abus de biens sociaux",
            "plainte avec constitution partie civile escroquerie @victime_x",
            "courrier mise en demeure @impay√©s_2024",
            "cr√©er template conclusions"
        ],
        "üìä Visualisations": [
            "chronologie des faits @affaire_corruption",
            "cartographie des soci√©t√©s @groupe_abc",
            "comparer les auditions @t√©moins_affaire_x"
        ],
        "üìã Gestion": [
            "s√©lectionner pi√®ces @dossier_p√©nal cat√©gorie proc√©dure",
            "cr√©er bordereau @pi√®ces_s√©lectionn√©es",
            "synth√®se @documents_expertise"
        ],
        "üì§ Communication": [
            "envoyer conclusions √† avocat@example.com",
            "exporter @analyse_risques format word",
            "importer documents pdf @nouveau_dossier"
        ]
    }
    
    for category, cmds in examples.items():
        st.markdown(f"**{category}**")
        for cmd in cmds:
            st.code(cmd, language=None)

def analyze_universal_query(query: str) -> dict:
    """Analyse compl√®te de la requ√™te pour d√©terminer l'intention et les param√®tres"""
    analysis = {
        'intent': 'search',
        'confidence': 0.0,
        'has_reference': False,
        'reference': None,
        'action': None,
        'document_type': None,
        'subject_matter': None,
        'parameters': {},
        'entities': [],
        'modifiers': [],
        'output_format': None,
        'style': None,
        'recipients': [],
        'details': {}
    }
    
    query_lower = query.lower()
    
    # 1. D√âTECTER LES R√âF√âRENCES
    if '@' in query:
        analysis['has_reference'] = True
        ref_matches = re.findall(r'@(\w+)', query)
        analysis['reference'] = ref_matches[0] if ref_matches else None
        analysis['entities'].extend(ref_matches)
    
    # 2. D√âTECTER L'INTENTION PRINCIPALE
    
    # R√©daction
    redaction_keywords = {
        'conclusions': ['conclusions', 'conclusion', 'd√©fense', 'demande'],
        'plainte': ['plainte', 'porter plainte', 'd√©p√¥t plainte'],
        'constitution_pc': ['constitution partie civile', 'partie civile', 'constitution pc'],
        'courrier': ['courrier', 'lettre', 'correspondance', 'mise en demeure'],
        'assignation': ['assignation', 'assigner', 'citation'],
        'm√©moire': ['m√©moire', 'duplique', 'triplique', 'r√©plique'],
        'requ√™te': ['requ√™te', 'demande au juge', 'solliciter'],
        'transaction': ['transaction', 'protocole', 'accord'],
        'note': ['note', 'm√©mo', 'memorandum']
    }
    
    for doc_type, keywords in redaction_keywords.items():
        if any(kw in query_lower for kw in keywords):
            analysis['intent'] = 'redaction'
            analysis['document_type'] = doc_type
            analysis['confidence'] = 0.9
            break
    
    # Verbes d'action pour la r√©daction
    if analysis['intent'] != 'redaction':
        redaction_verbs = ['r√©diger', '√©crire', 'pr√©parer', 'cr√©er', 'composer', '√©tablir', 'formuler']
        if any(verb in query_lower for verb in redaction_verbs):
            analysis['intent'] = 'redaction'
            analysis['confidence'] = max(analysis['confidence'], 0.8)
    
    # Chronologie/Timeline
    if any(kw in query_lower for kw in ['chronologie', 'timeline', 'calendrier', 'historique', 's√©quence']):
        analysis['intent'] = 'timeline'
        analysis['confidence'] = 0.9
        
        if any(kw in query_lower for kw in ['fait', '√©v√©nement']):
            analysis['details']['timeline_type'] = 'facts'
        elif any(kw in query_lower for kw in ['proc√©dure', 'proc√©dural', 'juridique']):
            analysis['details']['timeline_type'] = 'procedure'
        else:
            analysis['details']['timeline_type'] = 'general'
    
    # Cartographie/Mapping
    if any(kw in query_lower for kw in ['cartographie', 'mapping', 'carte', 'r√©seau', 'liens', 'relations']):
        analysis['intent'] = 'mapping'
        analysis['confidence'] = 0.9
        
        if any(kw in query_lower for kw in ['personne', 'individu']):
            analysis['details']['entity_type'] = 'persons'
        elif any(kw in query_lower for kw in ['soci√©t√©', 'entreprise', 'entit√©']):
            analysis['details']['entity_type'] = 'companies'
        else:
            analysis['details']['entity_type'] = 'all'
    
    # Comparaison
    if any(kw in query_lower for kw in ['comparer', 'comparaison', 'diff√©rence', 'convergence', 'contradiction']):
        analysis['intent'] = 'comparison'
        analysis['confidence'] = 0.9
        
        if any(kw in query_lower for kw in ['audition', 'd√©claration', 't√©moignage']):
            analysis['details']['comparison_type'] = 'auditions'
        else:
            analysis['details']['comparison_type'] = 'general'
    
    # Import/Export
    if any(kw in query_lower for kw in ['importer', 'import', 't√©l√©charger', 'upload', 'charger']):
        analysis['intent'] = 'import'
        analysis['confidence'] = 0.9
        analysis['details']['file_types'] = detect_file_types(query_lower)
    
    if any(kw in query_lower for kw in ['exporter', 'export', 't√©l√©chargement', 'download', 'extraire']):
        analysis['intent'] = 'export'
        analysis['confidence'] = 0.9
        analysis['details']['format'] = detect_export_format(query_lower)
    
    # Email/Envoi
    if any(kw in query_lower for kw in ['envoyer', 'email', 'mail', 'transmettre', 'adresser']):
        analysis['intent'] = 'send_email'
        analysis['confidence'] = 0.9
        # Extraire les emails
        email_pattern = r'[\w\.-]+@[\w\.-]+\.\w+'
        emails = re.findall(email_pattern, query)
        analysis['recipients'] = emails
    
    # S√©lection de pi√®ces
    if any(kw in query_lower for kw in ['s√©lectionner pi√®ces', 'choisir pi√®ces', 'organiser pi√®ces', 'trier']):
        analysis['intent'] = 'piece_selection'
        analysis['confidence'] = 0.9
    
    # Bordereau
    if 'bordereau' in query_lower:
        analysis['intent'] = 'bordereau'
        analysis['confidence'] = 0.9
    
    # Synth√®se
    if any(kw in query_lower for kw in ['synth√®se', 'r√©sum√©', 'r√©sumer', 'synth√©tiser', 'summary']):
        analysis['intent'] = 'synthesis'
        analysis['confidence'] = 0.9
    
    # Template
    if any(kw in query_lower for kw in ['template', 'mod√®le', 'gabarit', 'canevas']):
        analysis['intent'] = 'template'
        analysis['confidence'] = 0.8
        
        if 'cr√©er' in query_lower or 'nouveau' in query_lower:
            analysis['details']['action'] = 'create'
        elif 'modifier' in query_lower or '√©diter' in query_lower:
            analysis['details']['action'] = 'edit'
        else:
            analysis['details']['action'] = 'apply'
    
    # Analyse IA
    if analysis['intent'] == 'search' and analysis['confidence'] < 0.7:
        analysis_keywords = ['analyser', 'analyse', '√©valuer', 'examiner', 'identifier', 'd√©tecter']
        if any(kw in query_lower for kw in analysis_keywords):
            analysis['intent'] = 'analysis'
            analysis['confidence'] = 0.8
    
    # Jurisprudence
    if any(kw in query_lower for kw in ['jurisprudence', 'arr√™t', 'd√©cision', 'pr√©c√©dent']):
        if analysis['intent'] == 'search':
            analysis['intent'] = 'jurisprudence'
            analysis['confidence'] = 0.9
        else:
            analysis['modifiers'].append('with_jurisprudence')
    
    # 3. D√âTECTER LES PARAM√àTRES ADDITIONNELS
    
    # Style de r√©daction
    for style_key, style_info in REDACTION_STYLES.items():
        if style_key in query_lower or style_info['name'].lower() in query_lower:
            analysis['style'] = style_key
    
    # Format de sortie
    formats = {
        'word': ['word', 'docx', 'doc'],
        'pdf': ['pdf'],
        'html': ['html', 'web'],
        'markdown': ['markdown', 'md'],
        'txt': ['txt', 'texte', 'text']
    }
    
    for format_name, keywords in formats.items():
        if any(kw in query_lower for kw in keywords):
            analysis['output_format'] = format_name
    
    # Infractions/sujets juridiques
    infractions = {
        'abus_biens_sociaux': ['abus de biens sociaux', 'abs', 'd√©tournement actifs'],
        'escroquerie': ['escroquerie', 'tromperie', 'man≈ìuvres frauduleuses'],
        'abus_confiance': ['abus de confiance', 'd√©tournement fonds'],
        'faux': ['faux', 'usage de faux', 'falsification'],
        'corruption': ['corruption', 'trafic influence', 'prise ill√©gale'],
        'blanchiment': ['blanchiment', 'dissimulation', 'recel'],
        'favoritisme': ['favoritisme', 'd√©lit favoritisme', 'march√©s publics'],
        'prise_illegale': ['prise ill√©gale int√©r√™ts', 'conflit int√©r√™ts'],
        'harcelement': ['harc√®lement', 'harc√®lement moral', 'harc√®lement sexuel'],
        'travail_dissimule': ['travail dissimul√©', 'travail noir', 'dissimulation emploi']
    }
    
    for infraction, keywords in infractions.items():
        if any(kw in query_lower for kw in keywords):
            analysis['subject_matter'] = infraction
            analysis['details']['infraction'] = infraction
    
    # Urgence
    if any(kw in query_lower for kw in ['urgent', 'urgence', 'imm√©diat', 'rapidement', 'vite']):
        analysis['modifiers'].append('urgent')
    
    # Mode √©dition
    if any(kw in query_lower for kw in ['√©diter', 'modifier', 'corriger', 'am√©liorer']):
        analysis['modifiers'].append('edit_mode')
    
    # Nombre d'IA pour traitement
    ia_count_match = re.search(r'(\d+)\s*ia', query_lower)
    if ia_count_match:
        analysis['parameters']['ai_count'] = int(ia_count_match.group(1))
    
    return analysis

def detect_file_types(query: str) -> List[str]:
    """D√©tecte les types de fichiers mentionn√©s"""
    file_types = []
    
    type_keywords = {
        'pdf': ['pdf'],
        'docx': ['word', 'docx', 'doc'],
        'txt': ['txt', 'texte', 'text'],
        'xlsx': ['excel', 'xlsx', 'xls'],
        'pptx': ['powerpoint', 'pptx', 'ppt'],
        'msg': ['email', 'msg', 'eml']
    }
    
    for file_type, keywords in type_keywords.items():
        if any(kw in query for kw in keywords):
            file_types.append(file_type)
    
    return file_types if file_types else ['pdf', 'docx', 'txt']

def detect_export_format(query: str) -> str:
    """D√©tecte le format d'export demand√©"""
    if 'word' in query or 'docx' in query:
        return 'docx'
    elif 'pdf' in query:
        return 'pdf'
    elif 'excel' in query or 'xlsx' in query:
        return 'xlsx'
    elif 'html' in query:
        return 'html'
    else:
        return 'docx'  # Par d√©faut

def display_universal_analysis(analysis: dict):
    """Affiche l'analyse de la requ√™te avec tous les d√©tails"""
    
    # Ic√¥nes par intention
    intent_icons = {
        'search': 'üîç Recherche',
        'analysis': 'ü§ñ Analyse',
        'redaction': 'üìù R√©daction',
        'timeline': '‚è±Ô∏è Chronologie',
        'mapping': 'üó∫Ô∏è Cartographie',
        'comparison': 'üîÑ Comparaison',
        'import': 'üì• Import',
        'export': 'üì§ Export',
        'send_email': 'üìß Email',
        'piece_selection': 'üìã S√©lection',
        'bordereau': 'üìä Bordereau',
        'synthesis': 'üìù Synth√®se',
        'template': 'üìÑ Template',
        'jurisprudence': '‚öñÔ∏è Jurisprudence'
    }
    
    # Affichage principal
    cols = st.columns([2, 2, 1, 1])
    
    with cols[0]:
        st.info(intent_icons.get(analysis['intent'], '‚ùì Inconnu'))
    
    with cols[1]:
        if analysis['document_type']:
            doc_types = {
                'conclusions': '‚öñÔ∏è Conclusions',
                'plainte': 'üìã Plainte',
                'constitution_pc': 'üõ°Ô∏è Constitution PC',
                'courrier': '‚úâÔ∏è Courrier',
                'assignation': 'üìú Assignation',
                'm√©moire': 'üìö M√©moire',
                'requ√™te': 'üìÑ Requ√™te'
            }
            st.success(doc_types.get(analysis['document_type'], 'üìÑ Document'))
    
    with cols[2]:
        if analysis['reference']:
            st.warning(f"üîó @{analysis['reference']}")
    
    with cols[3]:
        # Indicateur de confiance
        confidence = analysis['confidence']
        color = "üü¢" if confidence > 0.8 else "üü°" if confidence > 0.6 else "üî¥"
        st.caption(f"{color} {confidence:.0%}")
    
    # D√©tails suppl√©mentaires
    if analysis['modifiers'] or analysis['parameters']:
        with st.expander("üîß Param√®tres d√©tect√©s", expanded=False):
            if analysis['modifiers']:
                st.write(f"**Modificateurs :** {', '.join(analysis['modifiers'])}")
            if analysis['style']:
                st.write(f"**Style :** {REDACTION_STYLES[analysis['style']]['name']}")
            if analysis['output_format']:
                st.write(f"**Format :** {analysis['output_format'].upper()}")
            if analysis['recipients']:
                st.write(f"**Destinataires :** {', '.join(analysis['recipients'])}")
            if analysis['subject_matter']:
                st.write(f"**Sujet :** {analysis['subject_matter'].replace('_', ' ').title()}")

def show_contextual_config(analysis: dict):
    """Affiche la configuration contextuelle selon l'intention d√©tect√©e"""
    
    if analysis['intent'] == 'redaction':
        show_redaction_config(analysis)
    
    elif analysis['intent'] == 'import':
        show_import_config(analysis)
    
    elif analysis['intent'] == 'export':
        show_export_config(analysis)
    
    elif analysis['intent'] == 'send_email':
        show_email_config(analysis)
    
    elif analysis['intent'] == 'template':
        show_template_config(analysis)
    
    elif analysis['intent'] in ['timeline', 'mapping', 'comparison']:
        show_visualization_config(analysis)

def show_redaction_config(analysis: dict = None):
    """Configuration pour la r√©daction"""
    
    with st.expander("‚öôÔ∏è Configuration de la r√©daction", expanded=True):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # S√©lection des IA
            llm_manager = MultiLLMManager()
            available_llms = list(llm_manager.clients.keys()) if hasattr(llm_manager, 'clients') else []
            
            if available_llms:
                default_selection = min(2, len(available_llms))
                selected_llms = st.multiselect(
                    "ü§ñ IA pour la r√©daction",
                    [llm.value if hasattr(llm, 'value') else str(llm) for llm in available_llms],
                    default=[llm.value if hasattr(llm, 'value') else str(llm) for llm in available_llms[:default_selection]],
                    key="redaction_llms",
                    help="S√©lectionnez 1 √† 4 IA"
                )
            else:
                st.warning("Aucune IA disponible")
                selected_llms = []
            
            # Style de r√©daction
            current_style = analysis.get('style') if analysis else None
            style = st.selectbox(
                "‚úçÔ∏è Style de r√©daction",
                list(REDACTION_STYLES.keys()),
                index=list(REDACTION_STYLES.keys()).index(current_style) if current_style else 0,
                format_func=lambda x: REDACTION_STYLES[x]['name'],
                key="redaction_style",
                help=REDACTION_STYLES[current_style]['description'] if current_style else None
            )
        
        with col2:
            # Mode de fusion
            fusion_mode = st.radio(
                "üîÑ Mode de fusion IA",
                ["Maximum d'arguments", "Consensus", "Meilleur score"],
                key="fusion_mode",
                help="Comment combiner les r√©ponses des diff√©rentes IA"
            )
            
            # Template
            use_template = st.checkbox("üìÑ Utiliser un template", value=True, key="use_template")
            if use_template:
                template_name = st.selectbox(
                    "Template",
                    list(DOCUMENT_TEMPLATES.keys()),
                    format_func=lambda x: DOCUMENT_TEMPLATES[x]['name'],
                    key="template_choice"
                )
        
        with col3:
            # Options avanc√©es
            st.checkbox("‚öñÔ∏è Recherche auto jurisprudence", value=True, key="auto_juris")
            st.checkbox("üîó Ajouter hyperliens", value=True, key="add_hyperlinks")
            st.checkbox("üìö Citer les sources", value=True, key="cite_sources")
            st.checkbox("üìä Structurer en sections", value=True, key="structure_sections")
            st.checkbox("‚úèÔ∏è Mode √©dition apr√®s", value=False, key="edit_after")
            
            # Urgence
            if analysis and 'urgent' in analysis.get('modifiers', []):
                st.warning("‚ö° Mode urgent activ√©")

def show_import_config(analysis: dict):
    """Configuration pour l'import"""
    
    with st.expander("üì• Configuration de l'import", expanded=True):
        file_types = analysis['details'].get('file_types', ['pdf', 'docx', 'txt'])
        
        uploaded_files = st.file_uploader(
            "Glissez vos fichiers ici",
            type=file_types,
            accept_multiple_files=True,
            key="import_files",
            help=f"Types accept√©s : {', '.join(file_types)}"
        )
        
        if uploaded_files:
            col1, col2 = st.columns(2)
            
            with col1:
                destination = st.selectbox(
                    "Destination",
                    ["Documents locaux", "Azure Blob", "Nouveau dossier"],
                    key="import_destination"
                )
            
            with col2:
                if destination == "Nouveau dossier":
                    folder_name = st.text_input(
                        "Nom du dossier",
                        value=f"import_{datetime.now().strftime('%Y%m%d')}",
                        key="import_folder_name"
                    )
            
            auto_analyze = st.checkbox(
                "ü§ñ Analyser automatiquement apr√®s import",
                value=True,
                key="auto_analyze_import"
            )

def show_export_config(analysis: dict):
    """Configuration pour l'export"""
    
    with st.expander("üì§ Configuration de l'export", expanded=True):
        format = analysis['details'].get('format', 'docx')
        
        col1, col2 = st.columns(2)
        
        with col1:
            export_format = st.selectbox(
                "Format d'export",
                ['docx', 'pdf', 'txt', 'html', 'xlsx'],
                index=['docx', 'pdf', 'txt', 'html', 'xlsx'].index(format),
                key="export_format"
            )
            
            include_metadata = st.checkbox(
                "Inclure m√©tadonn√©es",
                value=True,
                key="export_metadata"
            )
        
        with col2:
            if export_format == 'pdf':
                st.checkbox("En-t√™te personnalis√©", key="pdf_header")
                st.checkbox("Num√©rotation pages", value=True, key="pdf_page_numbers")
            
            elif export_format == 'docx':
                st.checkbox("Table des mati√®res", value=True, key="docx_toc")
                st.checkbox("Styles personnalis√©s", key="docx_custom_styles")

def show_email_config(analysis: dict):
    """Configuration pour l'envoi d'email"""
    
    with st.expander("üìß Configuration de l'email", expanded=True):
        recipients = analysis.get('recipients', [])
        
        col1, col2 = st.columns(2)
        
        with col1:
            to_email = st.text_input(
                "Destinataire(s)",
                value=', '.join(recipients),
                key="email_to",
                help="S√©parez les adresses par des virgules"
            )
            
            cc_email = st.text_input(
                "Cc",
                key="email_cc"
            )
            
            subject = st.text_input(
                "Objet",
                value=extract_email_subject(st.session_state.get('universal_query', '')),
                key="email_subject"
            )
        
        with col2:
            attach_current = st.checkbox(
                "Joindre le document actuel",
                value=True,
                key="email_attach_current"
            )
            
            if attach_current:
                attachment_format = st.selectbox(
                    "Format de la pi√®ce jointe",
                    ['pdf', 'docx', 'txt'],
                    key="email_attachment_format"
                )
            
            signature = st.checkbox(
                "Ajouter signature",
                value=True,
                key="email_signature"
            )

def show_template_config(analysis: dict):
    """Configuration pour les templates"""
    
    action = analysis['details'].get('action', 'apply')
    
    with st.expander("üìÑ Configuration des templates", expanded=True):
        if action == 'create':
            col1, col2 = st.columns(2)
            
            with col1:
                template_name = st.text_input(
                    "Nom du template",
                    key="new_template_name"
                )
                
                base_template = st.selectbox(
                    "Bas√© sur",
                    ["Vide"] + list(DOCUMENT_TEMPLATES.keys()),
                    format_func=lambda x: x if x == "Vide" else DOCUMENT_TEMPLATES[x]['name'],
                    key="base_template"
                )
            
            with col2:
                template_category = st.selectbox(
                    "Cat√©gorie",
                    ["Proc√©dure", "Correspondance", "Analyse", "Autre"],
                    key="template_category"
                )
                
                is_public = st.checkbox(
                    "Template public",
                    value=False,
                    key="template_public",
                    help="Les templates publics sont visibles par tous les utilisateurs"
                )
        
        elif action == 'edit':
            template_to_edit = st.selectbox(
                "Template √† modifier",
                list(st.session_state.get('saved_templates', {}).keys()) + list(DOCUMENT_TEMPLATES.keys()),
                key="template_to_edit"
            )
        
        else:  # apply
            available_templates = list(DOCUMENT_TEMPLATES.keys()) + list(st.session_state.get('saved_templates', {}).keys())
            selected_template = st.selectbox(
                "S√©lectionner un template",
                available_templates,
                format_func=lambda x: DOCUMENT_TEMPLATES.get(x, {}).get('name', x),
                key="selected_template"
            )

def show_visualization_config(analysis: dict):
    """Configuration pour les visualisations"""
    
    with st.expander("üìä Configuration de la visualisation", expanded=True):
        col1, col2 = st.columns(2)
        
        with col1:
            if analysis['intent'] == 'timeline':
                timeline_type = st.radio(
                    "Type de chronologie",
                    ["Faits", "Proc√©dure", "Mixte"],
                    key="timeline_viz_type"
                )
                
                date_format = st.selectbox(
                    "Format des dates",
                    ["JJ/MM/AAAA", "MM/JJ/AAAA", "AAAA-MM-JJ"],
                    key="timeline_date_format"
                )
            
            elif analysis['intent'] == 'mapping':
                layout_type = st.selectbox(
                    "Type de disposition",
                    ["Force-directed", "Hi√©rarchique", "Circulaire", "Kamada-Kawai"],
                    key="mapping_layout"
                )
                
                show_labels = st.checkbox(
                    "Afficher les labels",
                    value=True,
                    key="mapping_labels"
                )
            
            elif analysis['intent'] == 'comparison':
                comparison_view = st.radio(
                    "Vue de comparaison",
                    ["C√¥te √† c√¥te", "Unifi√©", "Tableau"],
                    key="comparison_view"
                )
                
                highlight_differences = st.checkbox(
                    "Surligner les diff√©rences",
                    value=True,
                    key="comparison_highlight"
                )
        
        with col2:
            color_scheme = st.selectbox(
                "Palette de couleurs",
                ["D√©faut", "Professionnel", "Contraste √©lev√©", "D√©grad√©"],
                key="viz_color_scheme"
            )
            
            export_resolution = st.selectbox(
                "R√©solution d'export",
                ["Standard", "HD", "4K"],
                key="viz_resolution"
            )
            
            interactive = st.checkbox(
                "Mode interactif",
                value=True,
                key="viz_interactive"
            )

def show_quick_actions():
    """Affiche les actions rapides"""
    st.markdown("### ‚ö° Actions rapides")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("**üìù R√©daction**")
        if st.button("Conclusions", key="qa_conclusions"):
            st.session_state.universal_query = "r√©diger conclusions en d√©fense"
            st.rerun()
        if st.button("Plainte", key="qa_plainte"):
            st.session_state.universal_query = "r√©diger plainte avec constitution partie civile"
            st.rerun()
    
    with col2:
        st.markdown("**üìä Analyses**")
        if st.button("Chronologie", key="qa_timeline"):
            st.session_state.universal_query = "chronologie des faits"
            st.rerun()
        if st.button("Cartographie", key="qa_mapping"):
            st.session_state.universal_query = "cartographie des relations"
            st.rerun()
    
    with col3:
        st.markdown("**üìã Gestion**")
        if st.button("Import docs", key="qa_import"):
            st.session_state.universal_query = "importer documents pdf"
            st.rerun()
        if st.button("Bordereau", key="qa_bordereau"):
            st.session_state.universal_query = "cr√©er bordereau"
            st.rerun()
    
    with col4:
        st.markdown("**üîç Recherche**")
        if st.button("Jurisprudence", key="qa_juris"):
            st.session_state.universal_query = "rechercher jurisprudence"
            st.rerun()
        if st.button("Templates", key="qa_templates"):
            st.session_state.universal_query = "g√©rer templates"
            st.rerun()

def add_to_history(query: str):
    """Ajoute une requ√™te √† l'historique"""
    if 'query_history' not in st.session_state:
        st.session_state.query_history = []
    
    # √âviter les doublons cons√©cutifs
    if not st.session_state.query_history or st.session_state.query_history[-1] != query:
        st.session_state.query_history.append(query)
        
        # Limiter la taille de l'historique
        if len(st.session_state.query_history) > 100:
            st.session_state.query_history = st.session_state.query_history[-100:]

def show_query_history_panel():
    """Affiche le panneau d'historique des requ√™tes"""
    with st.sidebar:
        st.markdown("### üìú Historique des commandes")
        
        if st.session_state.get('query_history'):
            # Recherche dans l'historique
            search_history = st.text_input(
                "Filtrer l'historique",
                key="history_search",
                placeholder="Rechercher..."
            )
            
            # Filtrer l'historique
            history = st.session_state.query_history[::-1]  # Plus r√©cent en premier
            if search_history:
                history = [q for q in history if search_history.lower() in q.lower()]
            
            # Afficher l'historique
            for i, query in enumerate(history[:20]):  # Limiter √† 20
                col1, col2 = st.columns([4, 1])
                
                with col1:
                    if st.button(
                        f"üìù {query[:50]}..." if len(query) > 50 else f"üìù {query}",
                        key=f"hist_{i}",
                        help=query
                    ):
                        st.session_state.universal_query = query
                        st.session_state.show_history = False
                        st.rerun()
                
                with col2:
                    if st.button("üóëÔ∏è", key=f"del_hist_{i}"):
                        st.session_state.query_history.remove(query)
                        st.rerun()
            
            # Actions sur l'historique
            if st.button("üóëÔ∏è Effacer tout l'historique", key="clear_all_history"):
                st.session_state.query_history = []
                st.rerun()
            
            if st.button("üíæ Exporter l'historique", key="export_history"):
                export_history()
        else:
            st.info("Aucun historique disponible")

def export_history():
    """Exporte l'historique des requ√™tes"""
    history_text = "\n".join([
        f"{i+1}. {query}"
        for i, query in enumerate(st.session_state.query_history)
    ])
    
    st.download_button(
        "üíæ T√©l√©charger",
        history_text,
        f"historique_commandes_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
        "text/plain",
        key="download_history"
    )

def extract_email_subject(query: str) -> str:
    """Extrait ou g√©n√®re un objet d'email depuis la requ√™te"""
    # Chercher un pattern "objet: ..."
    subject_match = re.search(r'objet\s*:\s*([^,\n]+)', query, re.IGNORECASE)
    if subject_match:
        return subject_match.group(1).strip()
    
    # G√©n√©rer un objet bas√© sur le contenu
    if 'conclusions' in query.lower():
        return "Conclusions en d√©fense"
    elif 'plainte' in query.lower():
        return "D√©p√¥t de plainte"
    elif 'mise en demeure' in query.lower():
        return "Mise en demeure"
    elif '@' in query:
        ref = query.split('@')[1].split()[0]
        return f"Dossier {ref}"
    else:
        return "Document juridique"

def process_universal_query(query: str):
    """Traite la requ√™te universelle avec toutes les fonctionnalit√©s"""
    analysis = analyze_universal_query(query)
    st.session_state.query_analysis = analysis
    
    with st.spinner("üîÑ Traitement de votre demande..."):
        try:
            # Router vers la bonne fonction selon l'intention
            if analysis['intent'] == 'redaction':
                process_redaction_request(query, analysis)
            
            elif analysis['intent'] == 'timeline':
                process_timeline_request(query, analysis)
            
            elif analysis['intent'] == 'mapping':
                process_mapping_request(query, analysis)
            
            elif analysis['intent'] == 'comparison':
                process_comparison_request(query, analysis)
            
            elif analysis['intent'] == 'import':
                process_import_request(query, analysis)
            
            elif analysis['intent'] == 'export':
                process_export_request(query, analysis)
            
            elif analysis['intent'] == 'send_email':
                process_email_request(query, analysis)
            
            elif analysis['intent'] == 'piece_selection':
                process_piece_selection_request(query, analysis)
            
            elif analysis['intent'] == 'bordereau':
                process_bordereau_request(query, analysis)
            
            elif analysis['intent'] == 'synthesis':
                process_synthesis_request(query, analysis)
            
            elif analysis['intent'] == 'template':
                process_template_request(query, analysis)
            
            elif analysis['intent'] == 'jurisprudence':
                process_jurisprudence_request(query, analysis)
            
            elif analysis['intent'] == 'analysis':
                process_analysis_request(query, analysis)
            
            else:  # search
                process_search_request(query, analysis)
                
        except Exception as e:
            st.error(f"‚ùå Erreur lors du traitement : {str(e)}")
            import traceback
            st.code(traceback.format_exc())

# === FONCTIONS DE TRAITEMENT COMPL√àTES ===

def process_import_request(query: str, analysis: dict):
    """Traite une demande d'import de fichiers"""
    
    # Si des fichiers sont d√©j√† upload√©s
    if st.session_state.get('import_files'):
        files = st.session_state.import_files
        destination = st.session_state.get('import_destination', 'Documents locaux')
        
        imported_count = 0
        imported_docs = []
        
        for file in files:
            try:
                # Lire le contenu
                content = file.read()
                
                # Cr√©er un document
                doc = Document(
                    id=f"import_{file.name}_{datetime.now().timestamp()}",
                    title=file.name,
                    content=content.decode('utf-8', errors='ignore') if isinstance(content, bytes) else str(content),
                    source=f"Import {datetime.now().strftime('%d/%m/%Y')}",
                    metadata={
                        'file_type': file.type,
                        'file_size': file.size,
                        'import_date': datetime.now().isoformat()
                    }
                )
                
                # Stocker selon la destination
                if destination == "Documents locaux":
                    if 'azure_documents' not in st.session_state:
                        st.session_state.azure_documents = {}
                    st.session_state.azure_documents[doc.id] = doc
                    imported_docs.append(doc)
                    imported_count += 1
                
                elif destination == "Azure Blob":
                    # Upload vers Azure
                    blob_manager = st.session_state.get('azure_blob_manager')
                    if blob_manager and blob_manager.is_connected():
                        container = st.session_state.get('import_folder_name', 'imports')
                        # TODO: Impl√©menter upload_blob dans AzureBlobManager
                        st.info(f"Upload vers Azure: {file.name}")
                
            except Exception as e:
                st.error(f"Erreur import {file.name}: {str(e)}")
        
        # R√©sultat
        st.session_state.import_result = {
            'count': imported_count,
            'documents': imported_docs,
            'timestamp': datetime.now()
        }
        
        st.success(f"‚úÖ {imported_count} fichiers import√©s avec succ√®s")
        
        # Analyse automatique si demand√©e
        if st.session_state.get('auto_analyze_import') and imported_docs:
            st.info("ü§ñ Analyse automatique en cours...")
            analyze_imported_documents(imported_docs)
    
    else:
        st.info("üì• Utilisez le widget d'upload ci-dessus pour importer vos fichiers")

def analyze_imported_documents(documents: List[Document]):
    """Analyse automatique des documents import√©s"""
    llm_manager = MultiLLMManager()
    
    if not llm_manager.clients:
        return
    
    analysis_prompt = """Analyse ces documents import√©s et fournis :
1. Type de document
2. Parties impliqu√©es
3. Sujet principal
4. Points juridiques importants
5. Actions recommand√©es

Format structur√© attendu."""
    
    for doc in documents[:5]:  # Limiter √† 5
        context = f"Document : {doc.title}\n\n{doc.content[:2000]}"
        
        try:
            provider = list(llm_manager.clients.keys())[0]
            response = llm_manager.query_single_llm(
                provider,
                f"{analysis_prompt}\n\n{context}",
                "Tu es un expert en analyse documentaire juridique."
            )
            
            if response['success']:
                doc.metadata['ai_analysis'] = response['response']
                
        except Exception as e:
            print(f"Erreur analyse auto : {e}")

def process_export_request(query: str, analysis: dict):
    """Traite une demande d'export"""
    
    # D√©terminer quoi exporter
    if analysis['reference']:
        # Exporter les documents de la r√©f√©rence
        documents = search_by_reference(f"@{analysis['reference']}")
        content_to_export = compile_documents_for_export(documents)
        filename_base = f"export_{analysis['reference']}"
    
    elif 'redaction_result' in st.session_state:
        # Exporter le dernier document r√©dig√©
        content_to_export = st.session_state.redaction_result['document']
        filename_base = f"{st.session_state.redaction_result['type']}"
    
    elif 'analysis_results' in st.session_state:
        # Exporter les r√©sultats d'analyse
        content_to_export = format_analysis_for_export(st.session_state.analysis_results)
        filename_base = "analyse"
    
    else:
        st.warning("‚ö†Ô∏è Aucun document √† exporter")
        return
    
    # Format d'export
    export_format = st.session_state.get('export_format', analysis['details'].get('format', 'docx'))
    
    # G√©n√©rer l'export
    export_data = generate_export(content_to_export, export_format, analysis)
    
    if export_data:
        filename = f"{filename_base}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.{export_format}"
        
        st.download_button(
            f"üíæ T√©l√©charger ({export_format.upper()})",
            export_data['content'],
            filename,
            export_data['mime_type'],
            key=f"download_export_{datetime.now().timestamp()}"
        )
        
        st.session_state.export_result = {
            'filename': filename,
            'format': export_format,
            'size': len(export_data['content']),
            'timestamp': datetime.now()
        }

def compile_documents_for_export(documents: list) -> str:
    """Compile plusieurs documents pour l'export"""
    content = f"EXPORT DE DOCUMENTS\n{'=' * 50}\n\n"
    content += f"Date : {datetime.now().strftime('%d/%m/%Y %H:%M')}\n"
    content += f"Nombre de documents : {len(documents)}\n\n"
    
    for i, doc in enumerate(documents, 1):
        content += f"\n{'=' * 50}\n"
        content += f"DOCUMENT {i} : {doc.get('title', 'Sans titre')}\n"
        content += f"Source : {doc.get('source', 'N/A')}\n"
        content += f"{'=' * 50}\n\n"
        content += doc.get('content', 'Contenu non disponible')
        content += "\n\n"
    
    return content

def generate_export(content: str, format: str, analysis: dict) -> dict:
    """G√©n√®re l'export dans le format demand√©"""
    
    if format == 'txt':
        return {
            'content': content.encode('utf-8'),
            'mime_type': 'text/plain'
        }
    
    elif format == 'docx':
        try:
            import docx
            from io import BytesIO
            
            doc = docx.Document()
            
            # Ajouter m√©tadonn√©es si demand√©
            if st.session_state.get('export_metadata'):
                doc.add_heading('M√©tadonn√©es', level=1)
                doc.add_paragraph(f"Date d'export : {datetime.now().strftime('%d/%m/%Y %H:%M')}")
                doc.add_paragraph(f"Requ√™te : {st.session_state.get('universal_query', 'N/A')}")
                doc.add_page_break()
            
            # Ajouter le contenu
            for paragraph in content.split('\n\n'):
                if paragraph.strip():
                    # D√©tecter les titres
                    if paragraph.startswith('===') or paragraph.endswith('==='):
                        doc.add_heading(paragraph.replace('=', '').strip(), level=2)
                    elif paragraph.isupper() and len(paragraph.split()) < 10:
                        doc.add_heading(paragraph, level=1)
                    else:
                        doc.add_paragraph(paragraph)
            
            # Table des mati√®res si demand√©e
            if st.session_state.get('docx_toc'):
                # TODO: Impl√©menter la g√©n√©ration de table des mati√®res
                pass
            
            buffer = BytesIO()
            doc.save(buffer)
            buffer.seek(0)
            
            return {
                'content': buffer.getvalue(),
                'mime_type': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
            }
            
        except Exception as e:
            st.error(f"Erreur g√©n√©ration DOCX : {str(e)}")
            # Fallback vers TXT
            return generate_export(content, 'txt', analysis)
    
    elif format == 'pdf':
        # TODO: Impl√©menter l'export PDF avec reportlab ou weasyprint
        st.info("Export PDF en cours de d√©veloppement, export en TXT")
        return generate_export(content, 'txt', analysis)
    
    elif format == 'html':
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>Export Juridique</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; }}
                h1 {{ color: #1a237e; }}
                h2 {{ color: #283593; }}
                .metadata {{ background: #f5f5f5; padding: 10px; margin-bottom: 20px; }}
                .section {{ margin-bottom: 30px; }}
            </style>
        </head>
        <body>
            <div class="metadata">
                <p>Export du {datetime.now().strftime('%d/%m/%Y %H:%M')}</p>
            </div>
            <div class="content">
                {content.replace('\n', '<br>')}
            </div>
        </body>
        </html>
        """
        
        return {
            'content': html_content.encode('utf-8'),
            'mime_type': 'text/html'
        }
    
    else:
        # Format non support√©
        return generate_export(content, 'txt', analysis)

def process_email_request(query: str, analysis: dict):
    """Traite une demande d'envoi d'email"""
    
    # R√©cup√©rer les param√®tres
    recipients = st.session_state.get('email_to', '').split(',')
    cc = st.session_state.get('email_cc', '').split(',') if st.session_state.get('email_cc') else []
    subject = st.session_state.get('email_subject', extract_email_subject(query))
    
    # D√©terminer le contenu √† envoyer
    if 'redaction_result' in st.session_state:
        content = st.session_state.redaction_result['document']
        attachment_name = f"{st.session_state.redaction_result['type']}.docx"
    elif analysis['reference']:
        docs = search_by_reference(f"@{analysis['reference']}")
        content = compile_documents_for_export(docs)
        attachment_name = f"{analysis['reference']}.docx"
    else:
        content = "Document joint"
        attachment_name = "document.docx"
    
    # Pr√©parer l'email
    email_draft = {
        'to': [email.strip() for email in recipients if email.strip()],
        'cc': [email.strip() for email in cc if email.strip()],
        'subject': subject,
        'body': f"""Bonjour,

Veuillez trouver ci-joint le document demand√©.

{content[:500]}...

Cordialement,
[Votre nom]""",
        'attachments': []
    }
    
    # Ajouter pi√®ce jointe si demand√©
    if st.session_state.get('email_attach_current'):
        format = st.session_state.get('email_attachment_format', 'pdf')
        export_data = generate_export(content, format, analysis)
        
        if export_data:
            email_draft['attachments'].append({
                'filename': attachment_name.replace('.docx', f'.{format}'),
                'content': export_data['content'],
                'mime_type': export_data['mime_type']
            })
    
    # Interface de pr√©visualisation
    with st.expander("üìß Pr√©visualisation de l'email", expanded=True):
        st.write(f"**√Ä :** {', '.join(email_draft['to'])}")
        if email_draft['cc']:
            st.write(f"**Cc :** {', '.join(email_draft['cc'])}")
        st.write(f"**Objet :** {email_draft['subject']}")
        st.text_area("Corps du message", email_draft['body'], height=200, key="email_body_preview")
        
        if email_draft['attachments']:
            st.write(f"**Pi√®ces jointes :** {len(email_draft['attachments'])} fichier(s)")
            for att in email_draft['attachments']:
                st.write(f"- {att['filename']} ({len(att['content'])} octets)")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("‚úÖ Envoyer", type="primary", key="send_email_now"):
                if send_email(email_draft):
                    st.success("‚úÖ Email envoy√© avec succ√®s")
                    st.session_state.email_sent = True
                else:
                    st.error("‚ùå Erreur lors de l'envoi")
        
        with col2:
            if st.button("üíæ Sauvegarder comme brouillon", key="save_email_draft"):
                st.session_state.email_drafts = st.session_state.get('email_drafts', [])
                st.session_state.email_drafts.append(email_draft)
                st.success("‚úÖ Brouillon sauvegard√©")

def send_email(email_draft: dict) -> bool:
    """Envoie r√©ellement l'email"""
    # TODO: Impl√©menter l'envoi r√©el via SMTP
    # Pour l'instant, simulation
    st.info("üìß Fonction d'envoi d'email √† configurer avec vos param√®tres SMTP")
    return False

def process_piece_selection_request(query: str, analysis: dict):
    """Traite une demande de s√©lection de pi√®ces"""
    
    # Collecter les documents disponibles
    if analysis['reference']:
        available_docs = search_by_reference(f"@{analysis['reference']}")
    else:
        # Tous les documents
        available_docs = []
        
        # Documents locaux
        for doc_id, doc in st.session_state.get('azure_documents', {}).items():
            available_docs.append({
                'id': doc_id,
                'title': doc.title,
                'content': doc.content[:500],
                'source': doc.source,
                'type': 'document'
            })
        
        # Ajouter documents Azure si disponibles
        blob_manager = st.session_state.get('azure_blob_manager')
        if blob_manager and blob_manager.is_connected():
            # TODO: Lister documents Azure
            pass
    
    # Interface de s√©lection
    st.markdown("### üìã S√©lection et organisation des pi√®ces")
    
    # Cat√©gories
    categories = extract_categories_from_query(query)
    if not categories:
        categories = ["üìÅ Proc√©dure", "üí∞ Comptabilit√©", "üìÑ Contrats", "üìß Correspondances", "üîç Autres"]
    
    selected_category = st.selectbox(
        "Cat√©gorie",
        categories,
        key="piece_category"
    )
    
    # Table de s√©lection
    if available_docs:
        # Cr√©er un DataFrame pour l'affichage
        import pandas as pd
        
        df_data = []
        for doc in available_docs:
            df_data.append({
                'S√©lectionner': False,
                'Titre': doc['title'],
                'Source': doc['source'],
                'ID': doc['id']
            })
        
        df = pd.DataFrame(df_data)
        
        # Afficher avec s√©lection
        edited_df = st.data_editor(
            df,
            column_config={
                "S√©lectionner": st.column_config.CheckboxColumn(
                    "‚úì",
                    help="Cocher pour s√©lectionner",
                    default=False,
                ),
                "Titre": st.column_config.TextColumn(
                    "Titre",
                    help="Titre du document",
                    width="medium",
                ),
                "Source": st.column_config.TextColumn(
                    "Source",
                    help="Source du document",
                    width="small",
                ),
                "ID": st.column_config.TextColumn(
                    "ID",
                    help="Identifiant unique",
                    width="small",
                    disabled=True,
                ),
            },
            disabled=["Titre", "Source", "ID"],
            hide_index=True,
            key="piece_selection_table"
        )
        
        # Actions sur la s√©lection
        selected_rows = edited_df[edited_df['S√©lectionner']]
        
        if not selected_rows.empty:
            st.info(f"‚úÖ {len(selected_rows)} pi√®ce(s) s√©lectionn√©e(s)")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("üíæ Enregistrer s√©lection", key="save_piece_selection"):
                    save_piece_selection(selected_rows, selected_category)
            
            with col2:
                if st.button("üìä Cr√©er bordereau", key="create_bordereau_from_selection"):
                    create_bordereau_from_selection(selected_rows, selected_category)
            
            with col3:
                if st.button("üì§ Exporter s√©lection", key="export_piece_selection"):
                    export_piece_selection(selected_rows)
    else:
        st.warning("‚ö†Ô∏è Aucun document disponible pour la s√©lection")

def extract_categories_from_query(query: str) -> List[str]:
    """Extrait les cat√©gories depuis la requ√™te"""
    categories = []
    
    category_keywords = {
        "proc√©dure": ["proc√©dure", "proc√©dural", "actes"],
        "comptabilit√©": ["comptabilit√©", "comptable", "financier", "comptes"],
        "contrats": ["contrat", "contractuel", "convention"],
        "correspondances": ["courrier", "lettre", "email", "correspondance"],
        "expertise": ["expertise", "expert", "rapport"],
        "pi√®ces d'identit√©": ["identit√©", "kbis", "statuts"]
    }
    
    query_lower = query.lower()
    
    for cat, keywords in category_keywords.items():
        if any(kw in query_lower for kw in keywords):
            categories.append(f"üìÅ {cat.title()}")
    
    return categories

def save_piece_selection(selected_df, category: str):
    """Sauvegarde la s√©lection de pi√®ces"""
    if 'pieces_selectionnees' not in st.session_state:
        st.session_state.pieces_selectionnees = {}
    
    for _, row in selected_df.iterrows():
        piece = PieceSelectionnee(
            document_id=row['ID'],
            titre=row['Titre'],
            categorie=category,
            notes=f"S√©lectionn√© le {datetime.now().strftime('%d/%m/%Y %H:%M')}",
            pertinence=5,
            cote_bordereau=f"P-{len(st.session_state.pieces_selectionnees) + 1}"
        )
        
        st.session_state.pieces_selectionnees[row['ID']] = piece
    
    st.success(f"‚úÖ {len(selected_df)} pi√®ces ajout√©es √† la cat√©gorie {category}")

def process_bordereau_request(query: str, analysis: dict):
    """Traite une demande de cr√©ation de bordereau"""
    
    # D√©terminer les pi√®ces √† inclure
    pieces = {}
    
    if analysis['reference']:
        # Pi√®ces de la r√©f√©rence
        docs = search_by_reference(f"@{analysis['reference']}")
        for i, doc in enumerate(docs):
            pieces[doc['id']] = PieceSelectionnee(
                document_id=doc['id'],
                titre=doc['title'],
                categorie="Document",
                cote_bordereau=f"P-{i+1}"
            )
    else:
        # Pi√®ces d√©j√† s√©lectionn√©es
        pieces = st.session_state.get('pieces_selectionnees', {})
    
    if not pieces:
        st.warning("‚ö†Ô∏è Aucune pi√®ce disponible pour cr√©er le bordereau")
        return
    
    # Options du bordereau
    with st.expander("‚öôÔ∏è Options du bordereau", expanded=True):
        col1, col2 = st.columns(2)
        
        with col1:
            bordereau_type = st.selectbox(
                "Type de bordereau",
                ["Communication de pi√®ces", "Inventaire", "Production aux d√©bats"],
                key="bordereau_type"
            )
            
            include_summary = st.checkbox(
                "Inclure r√©sum√© des pi√®ces",
                value=True,
                key="bordereau_summary"
            )
        
        with col2:
            sort_by = st.selectbox(
                "Trier par",
                ["Cote", "Date", "Cat√©gorie", "Titre"],
                key="bordereau_sort"
            )
            
            format_output = st.selectbox(
                "Format",
                ["Tableau", "Liste", "D√©taill√©"],
                key="bordereau_format"
            )
    
    # G√©n√©rer le bordereau
    bordereau = generate_bordereau(pieces, {
        'type': bordereau_type,
        'include_summary': include_summary,
        'sort_by': sort_by,
        'format': format_output
    })
    
    # Afficher le bordereau
    st.markdown("### üìä Bordereau g√©n√©r√©")
    
    if format_output == "Tableau":
        display_bordereau_table(pieces)
    else:
        st.text_area(
            "Bordereau",
            bordereau,
            height=400,
            key="bordereau_preview"
        )
    
    # Actions
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.download_button(
            "üíæ T√©l√©charger",
            bordereau,
            f"bordereau_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
            "text/plain",
            key="download_bordereau"
        )
    
    with col2:
        if st.button("üìß Envoyer", key="send_bordereau"):
            st.session_state.universal_query = f"envoyer bordereau"
            st.rerun()
    
    with col3:
        if st.button("‚úèÔ∏è √âditer", key="edit_bordereau"):
            st.session_state.edit_bordereau = True

def generate_bordereau(pieces: dict, options: dict) -> str:
    """G√©n√®re le contenu du bordereau"""
    bordereau = f"BORDEREAU DE {options['type'].upper()}\n"
    bordereau += "=" * 60 + "\n\n"
    
    bordereau += f"Affaire : {st.session_state.get('current_case', 'N/A')}\n"
    bordereau += f"Date : {datetime.now().strftime('%d/%m/%Y')}\n"
    bordereau += f"Nombre de pi√®ces : {len(pieces)}\n\n"
    
    bordereau += "-" * 60 + "\n"
    
    # Trier les pi√®ces
    sorted_pieces = sorted(
        pieces.items(),
        key=lambda x: x[1].cote_bordereau if options['sort_by'] == 'Cote' else x[1].titre
    )
    
    # Format d√©taill√©
    if options['format'] == 'D√©taill√©':
        for piece_id, piece in sorted_pieces:
            bordereau += f"\n{piece.cote_bordereau} - {piece.titre}\n"
            bordereau += f"   Cat√©gorie : {piece.categorie}\n"
            
            if options['include_summary'] and hasattr(piece, 'notes'):
                bordereau += f"   Description : {piece.notes}\n"
            
            bordereau += "\n"
    
    # Format liste
    elif options['format'] == 'Liste':
        for piece_id, piece in sorted_pieces:
            bordereau += f"{piece.cote_bordereau} - {piece.titre}\n"
    
    # Format tableau (retourner comme texte tabul√©)
    else:
        bordereau += f"{'Cote':<10} {'Titre':<50} {'Cat√©gorie':<20}\n"
        bordereau += "-" * 80 + "\n"
        
        for piece_id, piece in sorted_pieces:
            bordereau += f"{piece.cote_bordereau:<10} {piece.titre[:50]:<50} {piece.categorie:<20}\n"
    
    return bordereau

def display_bordereau_table(pieces: dict):
    """Affiche le bordereau sous forme de tableau"""
    import pandas as pd
    
    data = []
    for piece_id, piece in pieces.items():
        data.append({
            'Cote': piece.cote_bordereau,
            'Titre': piece.titre,
            'Cat√©gorie': piece.categorie,
            'Pertinence': piece.pertinence if hasattr(piece, 'pertinence') else 5
        })
    
    df = pd.DataFrame(data)
    df = df.sort_values('Cote')
    
    st.dataframe(
        df,
        use_container_width=True,
        hide_index=True,
        column_config={
            "Pertinence": st.column_config.NumberColumn(
                "Pertinence",
                min_value=1,
                max_value=5,
                format="‚≠ê %d",
            )
        }
    )

def process_synthesis_request(query: str, analysis: dict):
    """Traite une demande de synth√®se"""
    
    # Collecter les documents
    documents = []
    
    if analysis['reference']:
        documents = search_by_reference(f"@{analysis['reference']}")
    else:
        # Derniers documents analys√©s ou s√©lectionn√©s
        if 'search_results' in st.session_state:
            documents = st.session_state.search_results[:10]
        elif 'azure_documents' in st.session_state:
            documents = list(st.session_state.azure_documents.values())[:10]
    
    if not documents:
        st.warning("‚ö†Ô∏è Aucun document disponible pour la synth√®se")
        return
    
    # Options de synth√®se
    with st.expander("‚öôÔ∏è Options de synth√®se", expanded=True):
        synthesis_type = st.selectbox(
            "Type de synth√®se",
            ["Executive summary", "Points cl√©s", "Analyse SWOT", "Recommandations", "Chronologique"],
            key="synthesis_type"
        )
        
        max_length = st.slider(
            "Longueur maximale (mots)",
            100, 2000, 500,
            key="synthesis_length"
        )
        
        include_citations = st.checkbox(
            "Inclure citations",
            value=True,
            key="synthesis_citations"
        )
    
    # G√©n√©rer la synth√®se avec l'IA
    with st.spinner("ü§ñ G√©n√©ration de la synth√®se..."):
        synthesis = generate_synthesis_with_ai(documents, {
            'type': synthesis_type,
            'max_length': max_length,
            'include_citations': include_citations
        })
    
    if synthesis:
        st.markdown("### üìù Synth√®se g√©n√©r√©e")
        
        # M√©tadonn√©es
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Documents analys√©s", len(documents))
        
        with col2:
            st.metric("Mots", len(synthesis.split()))
        
        with col3:
            if 'key_points' in synthesis:
                st.metric("Points cl√©s", len(synthesis.get('key_points', [])))
        
        # Contenu de la synth√®se
        st.markdown(synthesis if isinstance(synthesis, str) else synthesis.get('content', ''))
        
        # Points cl√©s si disponibles
        if isinstance(synthesis, dict) and 'key_points' in synthesis:
            st.markdown("### üéØ Points cl√©s")
            for i, point in enumerate(synthesis['key_points'], 1):
                st.write(f"{i}. {point}")
        
        # Actions
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üíæ Sauvegarder", key="save_synthesis"):
                st.session_state.saved_syntheses = st.session_state.get('saved_syntheses', [])
                st.session_state.saved_syntheses.append({
                    'content': synthesis,
                    'timestamp': datetime.now(),
                    'document_count': len(documents)
                })
                st.success("‚úÖ Synth√®se sauvegard√©e")
        
        with col2:
            if st.button("üìù Transformer en note", key="synthesis_to_note"):
                st.session_state.universal_query = "r√©diger note juridique bas√©e sur la synth√®se"
                st.rerun()
        
        with col3:
            if st.button("üîÑ R√©g√©n√©rer", key="regenerate_synthesis"):
                process_synthesis_request(query, analysis)

def generate_synthesis_with_ai(documents: list, options: dict) -> Union[str, dict]:
    """G√©n√®re une synth√®se avec l'IA"""
    llm_manager = MultiLLMManager()
    
    if not llm_manager.clients:
        return "Erreur : Aucune IA disponible"
    
    # Construire le prompt selon le type
    prompts = {
        'Executive summary': """Cr√©e un executive summary professionnel de ces documents.
Structure : Contexte, Points cl√©s, Conclusions, Recommandations.
Maximum {max_length} mots.""",
        
        'Points cl√©s': """Extrais les points cl√©s de ces documents.
Liste num√©rot√©e, chaque point en 1-2 phrases.
Maximum {max_length} mots au total.""",
        
        'Analyse SWOT': """Effectue une analyse SWOT bas√©e sur ces documents.
Forces, Faiblesses, Opportunit√©s, Menaces.
Maximum {max_length} mots.""",
        
        'Recommandations': """Formule des recommandations bas√©es sur ces documents.
Prioris√©es et actionnables.
Maximum {max_length} mots.""",
        
        'Chronologique': """Cr√©e une synth√®se chronologique des √©v√©nements.
Ordre temporel avec dates.
Maximum {max_length} mots."""
    }
    
    prompt_template = prompts.get(options['type'], prompts['Executive summary'])
    prompt = prompt_template.format(max_length=options['max_length'])
    
    # Ajouter le contexte des documents
    context = "\n\n".join([
        f"Document {i+1}: {doc.get('title', 'Sans titre')}\n{doc.get('content', '')[:1500]}"
        for i, doc in enumerate(documents[:10])
    ])
    
    full_prompt = f"{prompt}\n\nDocuments √† synth√©tiser :\n{context}"
    
    try:
        # Utiliser l'IA principale
        provider = list(llm_manager.clients.keys())[0]
        response = llm_manager.query_single_llm(
            provider,
            full_prompt,
            "Tu es un expert en synth√®se juridique."
        )
        
        if response['success']:
            synthesis_content = response['response']
            
            # Extraire les points cl√©s si demand√©
            if options['type'] == 'Points cl√©s':
                key_points = extract_key_points(synthesis_content)
                return {
                    'content': synthesis_content,
                    'key_points': key_points
                }
            
            return synthesis_content
            
    except Exception as e:
        st.error(f"Erreur g√©n√©ration synth√®se : {str(e)}")
        return "Erreur lors de la g√©n√©ration"

def extract_key_points(text: str) -> List[str]:
    """Extrait les points cl√©s d'un texte"""
    points = []
    
    # Rechercher les listes num√©rot√©es
    numbered_points = re.findall(r'\d+\.\s*([^\n]+)', text)
    points.extend(numbered_points)
    
    # Rechercher les listes √† puces
    bullet_points = re.findall(r'[‚Ä¢\-\*]\s*([^\n]+)', text)
    points.extend(bullet_points)
    
    # Si pas de liste, prendre les premi√®res phrases
    if not points:
        sentences = text.split('.')[:5]
        points = [s.strip() for s in sentences if s.strip()]
    
    return points

def process_template_request(query: str, analysis: dict):
    """Traite une demande li√©e aux templates"""
    
    action = analysis['details'].get('action', 'apply')
    
    if action == 'create':
        create_new_template_interface()
    
    elif action == 'edit':
        edit_template_interface()
    
    else:  # apply
        apply_template_interface()

def create_new_template_interface():
    """Interface de cr√©ation de nouveau template"""
    st.markdown("### üìÑ Cr√©er un nouveau template")
    
    template_name = st.session_state.get('new_template_name', '')
    
    if template_name:
        col1, col2 = st.columns(2)
        
        with col1:
            # Structure du template
            st.markdown("**Structure du document**")
            
            base_template = st.session_state.get('base_template', 'Vide')
            
            if base_template != 'Vide' and base_template in DOCUMENT_TEMPLATES:
                structure = DOCUMENT_TEMPLATES[base_template]['structure']
            else:
                structure = []
            
            # √âditeur de structure
            new_structure = st.text_area(
                "Sections (une par ligne)",
                value='\n'.join(structure),
                height=300,
                key="template_structure_editor"
            )
        
        with col2:
            # Param√®tres du template
            st.markdown("**Param√®tres**")
            
            style = st.selectbox(
                "Style par d√©faut",
                list(REDACTION_STYLES.keys()),
                format_func=lambda x: REDACTION_STYLES[x]['name'],
                key="template_default_style"
            )
            
            variables = st.text_area(
                "Variables (format: {nom_variable})",
                placeholder="{client}\n{adversaire}\n{date}\n{montant}",
                key="template_variables",
                help="Ces variables pourront √™tre remplac√©es lors de l'utilisation"
            )
            
            instructions = st.text_area(
                "Instructions sp√©ciales pour l'IA",
                placeholder="Toujours commencer par un rappel des faits...",
                key="template_instructions"
            )
        
        # Actions
        if st.button("üíæ Sauvegarder le template", key="save_new_template"):
            save_new_template({
                'name': template_name,
                'structure': new_structure.split('\n'),
                'style': style,
                'variables': extract_template_variables(variables),
                'instructions': instructions,
                'category': st.session_state.get('template_category', 'Autre'),
                'is_public': st.session_state.get('template_public', False),
                'created_date': datetime.now()
            })
    else:
        st.warning("‚ö†Ô∏è Veuillez donner un nom au template")

def extract_template_variables(variables_text: str) -> List[str]:
    """Extrait les variables d'un template"""
    # Rechercher les patterns {variable}
    variables = re.findall(r'\{([^}]+)\}', variables_text)
    return list(set(variables))

def save_new_template(template_data: dict):
    """Sauvegarde un nouveau template"""
    if 'saved_templates' not in st.session_state:
        st.session_state.saved_templates = {}
    
    template_id = template_data['name'].lower().replace(' ', '_')
    st.session_state.saved_templates[template_id] = template_data
    
    st.success(f"‚úÖ Template '{template_data['name']}' cr√©√© avec succ√®s")
    
    # Proposer de l'utiliser imm√©diatement
    if st.button("Utiliser ce template maintenant", key="use_new_template_now"):
        st.session_state.universal_query = f"r√©diger avec template {template_id}"
        st.rerun()

def process_jurisprudence_request(query: str, analysis: dict):
    """Traite une demande de recherche jurisprudentielle"""
    
    # Parser la requ√™te juridique
    legal_terms = extract_legal_terms_from_query(query)
    
    # Sources de recherche
    sources = ['legifrance', 'doctrine']  # Limit√© aux sources disponibles
    
    # Interface de recherche
    st.markdown("### ‚öñÔ∏è Recherche jurisprudentielle")
    
    with st.expander("üîç Param√®tres de recherche", expanded=True):
        col1, col2 = st.columns(2)
        
        with col1:
            selected_sources = st.multiselect(
                "Sources",
                sources,
                default=sources,
                key="juris_sources"
            )
            
            date_range = st.selectbox(
                "P√©riode",
                ["Toutes", "5 derni√®res ann√©es", "2 derni√®res ann√©es", "Cette ann√©e"],
                key="juris_date_range"
            )
        
        with col2:
            jurisdictions = st.multiselect(
                "Juridictions",
                ["Cour de cassation", "Conseil d'√âtat", "Cours d'appel", "Toutes"],
                default=["Toutes"],
                key="juris_jurisdictions"
            )
            
            max_results = st.number_input(
                "Nombre max de r√©sultats",
                5, 50, 20,
                key="juris_max_results"
            )
    
    # Recherche
    with st.spinner("üîç Recherche en cours..."):
        jurisprudence_results = search_jurisprudence_unified(
            legal_terms,
            selected_sources,
            {
                'date_range': date_range,
                'jurisdictions': jurisdictions,
                'max_results': max_results
            }
        )
    
    # Affichage des r√©sultats
    if jurisprudence_results:
        st.success(f"‚úÖ {len(jurisprudence_results)} d√©cisions trouv√©es")
        
        # Trier par pertinence
        jurisprudence_results.sort(key=lambda x: x.get('relevance_score', 0), reverse=True)
        
        # Afficher les r√©sultats
        for i, result in enumerate(jurisprudence_results):
            with st.expander(f"{i+1}. {result.get('title', 'Sans titre')}", expanded=(i < 3)):
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.write(f"**Juridiction :** {result.get('jurisdiction', 'N/A')}")
                    st.write(f"**Date :** {result.get('date', 'N/A')}")
                    st.write(f"**R√©f√©rence :** {result.get('reference', 'N/A')}")
                    
                    if result.get('summary'):
                        st.markdown("**R√©sum√© :**")
                        st.write(result['summary'])
                    
                    if result.get('key_points'):
                        st.markdown("**Points cl√©s :**")
                        for point in result['key_points']:
                            st.write(f"‚Ä¢ {point}")
                
                with col2:
                    relevance = result.get('relevance_score', 0)
                    st.metric("Pertinence", f"{relevance:.0%}")
                    
                    if result.get('url'):
                        st.markdown(f"[üîó Voir la d√©cision]({result['url']})")
                    
                    if st.button("üìã Citer", key=f"cite_juris_{i}"):
                        copy_jurisprudence_citation(result)
        
        # Actions globales
        st.markdown("---")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üíæ Exporter r√©sultats", key="export_juris"):
                export_jurisprudence_results(jurisprudence_results)
        
        with col2:
            if st.button("üìä Analyser tendances", key="analyze_juris_trends"):
                analyze_jurisprudence_trends(jurisprudence_results)
        
        with col3:
            if st.button("üìù Int√©grer dans document", key="integrate_juris"):
                integrate_jurisprudence_in_document(jurisprudence_results)
    
    else:
        st.warning("‚ö†Ô∏è Aucune jurisprudence trouv√©e")

def extract_legal_terms_from_query(query: str) -> List[str]:
    """Extrait les termes juridiques pertinents de la requ√™te"""
    # Termes juridiques courants
    legal_keywords = [
        'abus de biens sociaux', 'escroquerie', 'abus de confiance',
        'faux', 'corruption', 'blanchiment', 'prescription',
        'responsabilit√©', 'pr√©judice', 'dommages-int√©r√™ts',
        'nullit√©', 'r√©siliation', 'inex√©cution'
    ]
    
    terms = []
    query_lower = query.lower()
    
    # Ajouter les termes juridiques trouv√©s
    for keyword in legal_keywords:
        if keyword in query_lower:
            terms.append(keyword)
    
    # Ajouter les mots importants (plus de 4 lettres, pas des mots communs)
    stop_words = {'pour', 'dans', 'avec', 'sans', 'sous', 'vers', 'chez'}
    words = query_lower.split()
    
    for word in words:
        if len(word) > 4 and word not in stop_words and word not in terms:
            terms.append(word)
    
    return terms[:5]  # Limiter pour la recherche

def search_jurisprudence_unified(terms: List[str], sources: List[str], options: dict) -> List[dict]:
    """Recherche unifi√©e de jurisprudence"""
    results = []
    
    try:
        legal_search = LegalSearchManager()
        
        # Construire la requ√™te
        query = ' '.join(terms)
        
        # Rechercher dans chaque source
        for source in sources:
            try:
                source_results = legal_search.search_source(
                    source=source,
                    query=query,
                    max_results=options['max_results'] // len(sources)  # R√©partir
                )
                
                # Enrichir les r√©sultats
                for result in source_results:
                    result['source'] = source
                    result['relevance_score'] = calculate_jurisprudence_relevance(result, terms)
                    
                    # Extraire les points cl√©s avec l'IA si pas d√©j√† fait
                    if not result.get('key_points') and result.get('content'):
                        result['key_points'] = extract_jurisprudence_key_points(result['content'])
                    
                    results.append(result)
                    
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Erreur recherche {source}: {str(e)}")
                
    except Exception as e:
        st.error(f"Erreur recherche jurisprudence : {str(e)}")
    
    return results

def calculate_jurisprudence_relevance(result: dict, terms: List[str]) -> float:
    """Calcule la pertinence d'une jurisprudence"""
    score = 0.0
    
    content_lower = (result.get('content', '') + result.get('summary', '')).lower()
    
    # Score bas√© sur la pr√©sence des termes
    for term in terms:
        if term.lower() in content_lower:
            score += 0.2
    
    # Bonus pour jurisprudence r√©cente
    if result.get('date'):
        try:
            date = datetime.strptime(result['date'], '%Y-%m-%d')
            days_old = (datetime.now() - date).days
            if days_old < 365:  # Moins d'un an
                score += 0.3
            elif days_old < 730:  # Moins de 2 ans
                score += 0.2
        except:
            pass
    
    # Bonus pour les hautes juridictions
    if any(court in result.get('jurisdiction', '').lower() 
           for court in ['cassation', 'conseil d\'√©tat']):
        score += 0.2
    
    return min(score, 1.0)

def extract_jurisprudence_key_points(content: str) -> List[str]:
    """Extrait les points cl√©s d'une d√©cision (version simplifi√©e)"""
    # TODO: Utiliser l'IA pour une extraction plus sophistiqu√©e
    
    key_points = []
    
    # Rechercher les attendus importants
    attendus = re.findall(r'attendu que[^;]+;', content, re.IGNORECASE)
    key_points.extend(attendus[:3])
    
    # Rechercher les motifs
    motifs = re.findall(r'par ces motifs[^.]+\.', content, re.IGNORECASE)
    key_points.extend(motifs[:2])
    
    return key_points

def copy_jurisprudence_citation(result: dict):
    """Copie la citation d'une jurisprudence"""
    citation = f"{result.get('jurisdiction', 'N/A')}, {result.get('date', 'N/A')}, n¬∞{result.get('reference', 'N/A')}"
    
    # Utiliser pyperclip si disponible, sinon afficher
    try:
        import pyperclip
        pyperclip.copy(citation)
        st.success("‚úÖ Citation copi√©e dans le presse-papier")
    except:
        st.code(citation)
        st.info("üìã Citation √† copier manuellement")

# === FONCTIONS D'AFFICHAGE DES R√âSULTATS ===

def show_unified_results_tab():
    """Affiche tous les types de r√©sultats de mani√®re unifi√©e"""
    
    # D√©terminer quel type de r√©sultat afficher
    result_types = []
    
    if 'redaction_result' in st.session_state:
        result_types.append(('üìù R√©daction', 'redaction'))
    
    if 'timeline_result' in st.session_state:
        result_types.append(('‚è±Ô∏è Chronologie', 'timeline'))
    
    if 'mapping_result' in st.session_state:
        result_types.append(('üó∫Ô∏è Cartographie', 'mapping'))
    
    if 'comparison_result' in st.session_state:
        result_types.append(('üîÑ Comparaison', 'comparison'))
    
    if 'synthesis_result' in st.session_state:
        result_types.append(('üìù Synth√®se', 'synthesis'))
    
    if 'import_result' in st.session_state:
        result_types.append(('üì• Import', 'import'))
    
    if 'export_result' in st.session_state:
        result_types.append(('üì§ Export', 'export'))
    
    if 'bordereau_result' in st.session_state:
        result_types.append(('üìä Bordereau', 'bordereau'))
    
    if 'jurisprudence_result' in st.session_state:
        result_types.append(('‚öñÔ∏è Jurisprudence', 'jurisprudence'))
    
    if 'ai_analysis_results' in st.session_state:
        result_types.append(('ü§ñ Analyse IA', 'analysis'))
    
    if 'search_results' in st.session_state:
        result_types.append(('üîç Recherche', 'search'))
    
    if result_types:
        # S'il y a plusieurs types de r√©sultats, cr√©er des onglets
        if len(result_types) > 1:
            tab_names = [name for name, _ in result_types]
            tabs = st.tabs(tab_names)
            
            for i, (tab, (name, type_key)) in enumerate(zip(tabs, result_types)):
                with tab:
                    show_specific_result(type_key)
        else:
            # Un seul type de r√©sultat
            show_specific_result(result_types[0][1])
    else:
        # Aucun r√©sultat
        st.info("üîç Utilisez la barre de commande universelle pour commencer")
        show_extended_examples()

def show_specific_result(result_type: str):
    """Affiche un type sp√©cifique de r√©sultat"""
    
    if result_type == 'redaction':
        show_redaction_results()
    
    elif result_type == 'timeline':
        show_timeline_results()
    
    elif result_type == 'mapping':
        show_mapping_results()
    
    elif result_type == 'comparison':
        show_comparison_results()
    
    elif result_type == 'synthesis':
        show_synthesis_results()
    
    elif result_type == 'import':
        show_import_results()
    
    elif result_type == 'export':
        show_export_results()
    
    elif result_type == 'bordereau':
        show_bordereau_results()
    
    elif result_type == 'jurisprudence':
        show_jurisprudence_results()
    
    elif result_type == 'analysis':
        show_ai_analysis_results()
    
    elif result_type == 'search':
        show_search_results_unified()

def show_synthesis_results():
    """Affiche les r√©sultats de synth√®se"""
    result = st.session_state.synthesis_result
    
    st.markdown("### üìù Synth√®se g√©n√©r√©e")
    
    # Affichage selon le type
    if isinstance(result, dict):
        if 'content' in result:
            st.markdown(result['content'])
        
        if 'key_points' in result:
            st.markdown("### üéØ Points cl√©s")
            for point in result['key_points']:
                st.write(f"‚Ä¢ {point}")
    else:
        st.markdown(result)

def show_import_results():
    """Affiche les r√©sultats d'import"""
    result = st.session_state.import_result
    
    st.success(f"‚úÖ {result['count']} documents import√©s")
    
    if result.get('documents'):
        st.markdown("### üìÑ Documents import√©s")
        for doc in result['documents'][:5]:  # Limiter l'affichage
            with st.expander(doc.title):
                st.write(f"**Source :** {doc.source}")
                st.write(f"**Taille :** {len(doc.content)} caract√®res")
                if hasattr(doc, 'metadata') and doc.metadata.get('ai_analysis'):
                    st.markdown("**Analyse IA :**")
                    st.write(doc.metadata['ai_analysis'])

def show_export_results():
    """Affiche les r√©sultats d'export"""
    result = st.session_state.export_result
    
    st.success(f"‚úÖ Export r√©ussi : {result['filename']}")
    st.write(f"**Format :** {result['format'].upper()}")
    st.write(f"**Taille :** {result['size']} octets")

def show_bordereau_results():
    """Affiche les r√©sultats de bordereau"""
    # D√©j√† g√©r√© dans process_bordereau_request
    pass

def show_jurisprudence_results():
    """Affiche les r√©sultats de jurisprudence"""
    # D√©j√† g√©r√© dans process_jurisprudence_request
    pass

def show_pieces_management_tab():
    """Onglet de gestion des pi√®ces"""
    st.markdown("### üìã Gestion des pi√®ces")
    
    pieces = st.session_state.get('pieces_selectionnees', {})
    
    if pieces:
        # Statistiques
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Total pi√®ces", len(pieces))
        
        with col2:
            categories = set(p.categorie for p in pieces.values())
            st.metric("Cat√©gories", len(categories))
        
        with col3:
            avg_pertinence = sum(p.pertinence for p in pieces.values()) / len(pieces)
            st.metric("Pertinence moyenne", f"{avg_pertinence:.1f}/5")
        
        # Affichage par cat√©gorie
        for category in sorted(categories):
            cat_pieces = [p for p in pieces.values() if p.categorie == category]
            
            with st.expander(f"{category} ({len(cat_pieces)} pi√®ces)"):
                for piece in cat_pieces:
                    col1, col2, col3 = st.columns([3, 1, 1])
                    
                    with col1:
                        st.write(f"**{piece.cote_bordereau}** - {piece.titre}")
                    
                    with col2:
                        st.write(f"‚≠ê {piece.pertinence}/5")
                    
                    with col3:
                        if st.button("üóëÔ∏è", key=f"del_piece_{piece.document_id}"):
                            del pieces[piece.document_id]
                            st.rerun()
    else:
        st.info("Aucune pi√®ce s√©lectionn√©e")
        
        if st.button("üîç S√©lectionner des pi√®ces"):
            st.session_state.universal_query = "s√©lectionner pi√®ces"
            st.rerun()

def show_extended_examples():
    """Affiche des exemples √©tendus de toutes les fonctionnalit√©s"""
    
    st.markdown("### üí° Exemples de commandes")
    
    # Grouper par cat√©gorie
    example_categories = {
        "üìù R√©daction": [
            "r√©diger conclusions d√©fense @affaire_martin abus de biens sociaux",
            "plainte avec constitution partie civile escroquerie @victime_x",
            "courrier mise en demeure @impay√©s_2024 style persuasif",
            "cr√©er template m√©moire en r√©plique",
            "assignation en r√©f√©r√© @urgent_locataire"
        ],
        "üîç Recherche & Analyse": [
            "@affaire_martin analyser les risques p√©naux",
            "chronologie des faits @corruption_2023",
            "cartographie des soci√©t√©s @groupe_abc",
            "comparer les auditions @t√©moins_affaire_x",
            "synth√®se executive @documents_expertise"
        ],
        "üìã Gestion documentaire": [
            "s√©lectionner pi√®ces @dossier_p√©nal cat√©gorie proc√©dure",
            "cr√©er bordereau @pi√®ces_s√©lectionn√©es",
            "importer documents pdf @nouveau_client",
            "exporter @analyse_risques format word avec m√©tadonn√©es"
        ],
        "‚öñÔ∏è Recherche juridique": [
            "jurisprudence abus de biens sociaux prescription",
            "rechercher arr√™ts r√©cents corruption march√©s publics",
            "tendances jurisprudentielles @blanchiment 2024"
        ],
        "üìß Communication": [
            "envoyer conclusions √† avocat@cabinet.fr",
            "email avec bordereau @pi√®ces_communication",
            "transmettre synth√®se @client format pdf"
        ],
        "ü§ñ IA avanc√©e": [
            "analyser avec 3 ia @contrats_complexes fusion consensus",
            "r√©diger avec 4 ia plainte style technique",
            "comparer versions @document_√©volutif highlight diff√©rences"
        ]
    }
    
    # Afficher en colonnes
    cols = st.columns(2)
    
    for i, (category, examples) in enumerate(example_categories.items()):
        with cols[i % 2]:
            st.markdown(f"**{category}**")
            for example in examples:
                if st.button(
                    f"‚Üí {example[:40]}...",
                    key=f"ex_{example}",
                    help=example
                ):
                    st.session_state.universal_query = example
                    st.rerun()
            st.markdown("")

def show_explorer_tab():
    """Onglet explorateur de fichiers"""
    st.markdown("### üóÇÔ∏è Explorateur de documents")
    
    # Sources disponibles
    source = st.selectbox(
        "Source",
        ["Documents locaux", "Azure Blob Storage"],
        key="explorer_source"
    )
    
    if source == "Documents locaux":
        show_local_documents_explorer()
    else:
        show_azure_explorer()

def show_local_documents_explorer():
    """Explorateur de documents locaux"""
    documents = st.session_state.get('azure_documents', {})
    
    if documents:
        # Barre de recherche
        search = st.text_input("üîç Filtrer", key="explorer_search")
        
        # Filtrer les documents
        filtered_docs = {
            id: doc for id, doc in documents.items()
            if not search or search.lower() in doc.title.lower()
        }
        
        # Afficher les documents
        for doc_id, doc in filtered_docs.items():
            with st.expander(f"üìÑ {doc.title}"):
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.write(f"**Source :** {doc.source}")
                    st.write(f"**Taille :** {len(doc.content)} caract√®res")
                    st.text_area("Aper√ßu", doc.content[:500], height=100, disabled=True)
                
                with col2:
                    if st.button("ü§ñ Analyser", key=f"analyze_{doc_id}"):
                        st.session_state.universal_query = f"analyser @{doc_id}"
                        st.rerun()
                    
                    if st.button("üìù Utiliser", key=f"use_{doc_id}"):
                        st.session_state.universal_query = f"r√©diger bas√© sur @{doc_id}"
                        st.rerun()
                    
                    if st.button("üóëÔ∏è Supprimer", key=f"delete_{doc_id}"):
                        del documents[doc_id]
                        st.rerun()
    else:
        st.info("Aucun document local")
        
        if st.button("üì• Importer des documents"):
            st.session_state.universal_query = "importer documents"
            st.rerun()

def show_azure_explorer():
    """Explorateur Azure Blob"""
    blob_manager = st.session_state.get('azure_blob_manager')
    
    if blob_manager and blob_manager.is_connected():
        containers = blob_manager.list_containers()
        
        if containers:
            selected_container = st.selectbox(
                "Container",
                containers,
                key="azure_container"
            )
            
            # Explorer le container
            if selected_container:
                current_path = st.session_state.get('azure_current_path', '')
                
                # Breadcrumb
                if current_path:
                    path_parts = current_path.split('/')
                    cols = st.columns(len(path_parts) + 1)
                    
                    with cols[0]:
                        if st.button("üè†", key="azure_home"):
                            st.session_state.azure_current_path = ''
                            st.rerun()
                    
                    for i, part in enumerate(path_parts):
                        with cols[i + 1]:
                            if st.button(part, key=f"path_{i}"):
                                st.session_state.azure_current_path = '/'.join(path_parts[:i+1])
                                st.rerun()
                
                # Lister le contenu
                items = blob_manager.list_folder_contents(selected_container, current_path)
                
                # Afficher les dossiers d'abord
                folders = [item for item in items if item['type'] == 'folder']
                files = [item for item in items if item['type'] == 'file']
                
                # Dossiers
                if folders:
                    st.markdown("**üìÅ Dossiers**")
                    cols = st.columns(4)
                    
                    for i, folder in enumerate(folders):
                        with cols[i % 4]:
                            if st.button(
                                f"üìÅ {folder['name']}",
                                key=f"folder_{folder['name']}",
                                use_container_width=True
                            ):
                                st.session_state.azure_current_path = folder['path']
                                st.rerun()
                
                # Fichiers
                if files:
                    st.markdown("**üìÑ Fichiers**")
                    
                    for file in files:
                        col1, col2, col3 = st.columns([3, 1, 1])
                        
                        with col1:
                            st.write(f"üìÑ {file['name']}")
                            st.caption(f"{file['size'] / 1024:.1f} KB")
                        
                        with col2:
                            if st.button("üì•", key=f"download_{file['name']}", help="T√©l√©charger"):
                                download_azure_file(blob_manager, selected_container, file)
                        
                        with col3:
                            if st.button("‚ûï", key=f"add_{file['name']}", help="Ajouter aux documents"):
                                add_azure_file_to_documents(blob_manager, selected_container, file)
        else:
            st.warning("Aucun container disponible")
    else:
        st.error("‚ùå Azure Blob non connect√©")
        
        if st.button("üîÑ R√©essayer la connexion"):
            del st.session_state.azure_blob_manager
            st.rerun()

def download_azure_file(blob_manager, container: str, file: dict):
    """T√©l√©charge un fichier depuis Azure"""
    try:
        content = blob_manager.download_blob(container, file['path'])
        
        st.download_button(
            "üíæ T√©l√©charger",
            content,
            file['name'],
            key=f"download_content_{file['name']}"
        )
    except Exception as e:
        st.error(f"Erreur t√©l√©chargement : {str(e)}")

def add_azure_file_to_documents(blob_manager, container: str, file: dict):
    """Ajoute un fichier Azure aux documents locaux"""
    try:
        content = blob_manager.download_blob(container, file['path'])
        
        doc = Document(
            id=f"azure_{container}_{file['name']}",
            title=file['name'],
            content=content.decode('utf-8', errors='ignore'),
            source=f"Azure: {container}",
            metadata={
                'container': container,
                'path': file['path'],
                'size': file['size']
            }
        )
        
        if 'azure_documents' not in st.session_state:
            st.session_state.azure_documents = {}
        
        st.session_state.azure_documents[doc.id] = doc
        st.success(f"‚úÖ '{file['name']}' ajout√© aux documents")
        
    except Exception as e:
        st.error(f"Erreur ajout : {str(e)}")

def show_configuration_tab():
    """Onglet de configuration avanc√©e"""
    st.markdown("### ‚öôÔ∏è Configuration")
    
    tabs = st.tabs(["ü§ñ IA", "üìÑ Templates", "üîß Syst√®me", "üë§ Pr√©f√©rences"])
    
    with tabs[0]:
        show_ai_configuration()
    
    with tabs[1]:
        show_templates_configuration()
    
    with tabs[2]:
        show_system_configuration()
    
    with tabs[3]:
        show_user_preferences()

def show_ai_configuration():
    """Configuration des IA"""
    st.markdown("### ü§ñ Configuration des IA")
    
    llm_manager = MultiLLMManager()
    
    if hasattr(llm_manager, 'clients'):
        available_providers = list(llm_manager.clients.keys())
        
        st.write(f"**IA disponibles :** {len(available_providers)}")
        
        for provider in available_providers:
            with st.expander(f"{provider.value if hasattr(provider, 'value') else provider}"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write("**√âtat :** ‚úÖ Connect√©")
                    
                    # Param√®tres sp√©cifiques au provider
                    if hasattr(provider, 'value'):
                        if 'CLAUDE' in str(provider.value):
                            temp = st.slider(
                                "Temp√©rature",
                                0.0, 1.0, 0.7,
                                key=f"temp_{provider.value}"
                            )
                        elif 'GPT' in str(provider.value):
                            model = st.selectbox(
                                "Mod√®le",
                                ["gpt-4-turbo-preview", "gpt-4", "gpt-3.5-turbo"],
                                key=f"model_{provider.value}"
                            )
                
                with col2:
                    if st.button("üß™ Tester", key=f"test_{provider}"):
                        test_llm_connection(llm_manager, provider)
    else:
        st.error("‚ùå Aucune IA configur√©e")

def test_llm_connection(llm_manager, provider):
    """Teste la connexion √† une IA"""
    with st.spinner(f"Test de {provider}..."):
        try:
            response = llm_manager.query_single_llm(
                provider,
                "R√©ponds simplement 'OK' si tu me re√ßois.",
                "Test de connexion"
            )
            
            if response['success']:
                st.success(f"‚úÖ {provider} r√©pond : {response['response']}")
            else:
                st.error(f"‚ùå Erreur : {response.get('error', 'Inconnue')}")
                
        except Exception as e:
            st.error(f"‚ùå Erreur test : {str(e)}")

def show_templates_configuration():
    """Configuration des templates"""
    st.markdown("### üìÑ Gestion des templates")
    
    # Templates syst√®me
    st.markdown("**Templates syst√®me**")
    
    for template_id, template in DOCUMENT_TEMPLATES.items():
        with st.expander(template['name']):
            st.write("**Structure :**")
            for section in template['structure']:
                st.write(f"‚Ä¢ {section}")
            st.write(f"**Style par d√©faut :** {template['style']}")
    
    # Templates personnalis√©s
    st.markdown("**Templates personnalis√©s**")
    
    saved_templates = st.session_state.get('saved_templates', {})
    
    if saved_templates:
        for template_id, template in saved_templates.items():
            with st.expander(template['name']):
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.write("**Structure :**")
                    for section in template.get('structure', []):
                        st.write(f"‚Ä¢ {section}")
                    
                    if template.get('variables'):
                        st.write("**Variables :**")
                        st.write(', '.join(template['variables']))
                
                with col2:
                    if st.button("‚úèÔ∏è", key=f"edit_template_{template_id}"):
                        st.session_state.universal_query = f"√©diter template {template_id}"
                        st.rerun()
                    
                    if st.button("üóëÔ∏è", key=f"delete_template_{template_id}"):
                        del saved_templates[template_id]
                        st.success("‚úÖ Template supprim√©")
                        st.rerun()
    else:
        st.info("Aucun template personnalis√©")
    
    if st.button("‚ûï Cr√©er un nouveau template"):
        st.session_state.universal_query = "cr√©er nouveau template"
        st.rerun()

def show_system_configuration():
    """Configuration syst√®me"""
    st.markdown("### üîß Configuration syst√®me")
    
    # Variables d'environnement
    st.markdown("**Variables d'environnement**")
    
    env_vars = [
        ("AZURE_STORAGE_CONNECTION_STRING", "Azure Blob Storage"),
        ("AZURE_SEARCH_ENDPOINT", "Azure Search Endpoint"),
        ("AZURE_SEARCH_KEY", "Azure Search Key"),
        ("ANTHROPIC_API_KEY", "Claude API"),
        ("OPENAI_API_KEY", "OpenAI API"),
        ("GOOGLE_API_KEY", "Google API"),
        ("MISTRAL_API_KEY", "Mistral API")
    ]
    
    for var, desc in env_vars:
        col1, col2, col3 = st.columns([3, 1, 2])
        
        with col1:
            st.text(desc)
        
        with col2:
            if os.getenv(var):
                st.success("‚úÖ")
            else:
                st.error("‚ùå")
        
        with col3:
            if os.getenv(var):
                value = os.getenv(var)
                if 'KEY' in var or 'STRING' in var:
                    st.caption(f"{value[:10]}...")
                else:
                    st.caption(value[:30] + "..." if len(value) > 30 else value)
    
# Suite de show_system_configuration()
    
    # Statistiques syst√®me
    st.markdown("**Statistiques syst√®me**")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Documents", len(st.session_state.get('azure_documents', {})))
        st.metric("Templates", len(st.session_state.get('saved_templates', {})))
    
    with col2:
        st.metric("Pi√®ces s√©lectionn√©es", len(st.session_state.get('pieces_selectionnees', {})))
        st.metric("Historique", len(st.session_state.get('query_history', [])))
    
    with col3:
        # Calculer l'espace utilis√©
        total_size = sum(
            len(doc.content) for doc in st.session_state.get('azure_documents', {}).values()
        )
        st.metric("Espace utilis√©", f"{total_size / 1024 / 1024:.1f} MB")
        
        # Uptime
        if 'app_start_time' not in st.session_state:
            st.session_state.app_start_time = datetime.now()
        
        uptime = datetime.now() - st.session_state.app_start_time
        st.metric("Uptime", f"{uptime.total_seconds() / 60:.0f} min")
    
    # Actions de maintenance
    st.markdown("**Maintenance**")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üóëÔ∏è Nettoyer cache", key="clear_cache"):
            clear_application_cache()
    
    with col2:
        if st.button("üíæ Sauvegarder √©tat", key="save_state"):
            save_application_state()
    
    with col3:
        if st.button("üîÑ R√©initialiser", key="reset_app"):
            if st.checkbox("Confirmer r√©initialisation", key="confirm_reset"):
                reset_application()

def show_user_preferences():
    """Configuration des pr√©f√©rences utilisateur"""
    st.markdown("### üë§ Pr√©f√©rences utilisateur")
    
    # Pr√©f√©rences d'interface
    st.markdown("**Interface**")
    
    col1, col2 = st.columns(2)
    
    with col1:
        theme = st.selectbox(
            "Th√®me",
            ["Automatique", "Clair", "Sombre"],
            key="pref_theme"
        )
        
        language = st.selectbox(
            "Langue",
            ["Fran√ßais", "English"],
            key="pref_language"
        )
    
    with col2:
        compact_mode = st.checkbox(
            "Mode compact",
            value=st.session_state.get('compact_mode', False),
            key="pref_compact"
        )
        
        show_tips = st.checkbox(
            "Afficher les conseils",
            value=st.session_state.get('show_tips', True),
            key="pref_tips"
        )
    
    # Pr√©f√©rences de r√©daction
    st.markdown("**R√©daction**")
    
    col1, col2 = st.columns(2)
    
    with col1:
        default_style = st.selectbox(
            "Style par d√©faut",
            list(REDACTION_STYLES.keys()),
            format_func=lambda x: REDACTION_STYLES[x]['name'],
            key="pref_default_style"
        )
        
        default_ai_count = st.number_input(
            "Nombre d'IA par d√©faut",
            1, 4, 2,
            key="pref_ai_count"
        )
    
    with col2:
        auto_jurisprudence = st.checkbox(
            "Recherche auto de jurisprudence",
            value=True,
            key="pref_auto_juris"
        )
        
        auto_save = st.checkbox(
            "Sauvegarde automatique",
            value=True,
            key="pref_auto_save"
        )
    
    # Pr√©f√©rences de recherche
    st.markdown("**Recherche**")
    
    col1, col2 = st.columns(2)
    
    with col1:
        default_results = st.number_input(
            "R√©sultats par d√©faut",
            5, 50, 20,
            key="pref_default_results"
        )
        
        search_mode = st.selectbox(
            "Mode de recherche par d√©faut",
            [mode.value for mode in SearchMode],
            key="pref_search_mode"
        )
    
    with col2:
        include_archives = st.checkbox(
            "Inclure archives",
            value=False,
            key="pref_include_archives"
        )
        
        fuzzy_search = st.checkbox(
            "Recherche floue",
            value=True,
            key="pref_fuzzy"
        )
    
    # Sauvegarder les pr√©f√©rences
    if st.button("üíæ Sauvegarder les pr√©f√©rences", key="save_preferences"):
        save_user_preferences()

def save_user_preferences():
    """Sauvegarde les pr√©f√©rences utilisateur"""
    preferences = {
        'theme': st.session_state.get('pref_theme'),
        'language': st.session_state.get('pref_language'),
        'compact_mode': st.session_state.get('pref_compact'),
        'show_tips': st.session_state.get('pref_tips'),
        'default_style': st.session_state.get('pref_default_style'),
        'default_ai_count': st.session_state.get('pref_ai_count'),
        'auto_jurisprudence': st.session_state.get('pref_auto_juris'),
        'auto_save': st.session_state.get('pref_auto_save'),
        'default_results': st.session_state.get('pref_default_results'),
        'search_mode': st.session_state.get('pref_search_mode'),
        'include_archives': st.session_state.get('pref_include_archives'),
        'fuzzy_search': st.session_state.get('pref_fuzzy')
    }
    
    st.session_state.user_preferences = preferences
    
    # Sauvegarder dans un fichier ou base de donn√©es
    # TODO: Impl√©menter la persistance
    
    st.success("‚úÖ Pr√©f√©rences sauvegard√©es")

# === FONCTIONS UTILITAIRES MANQUANTES ===

def clear_universal_state():
    """Efface l'√©tat de l'interface universelle"""
    keys_to_clear = [
        'universal_query', 'last_universal_query', 'query_analysis',
        'search_results', 'ai_analysis_results', 'redaction_result',
        'timeline_result', 'mapping_result', 'comparison_result',
        'synthesis_result', 'import_result', 'export_result',
        'bordereau_result', 'jurisprudence_result'
    ]
    
    for key in keys_to_clear:
        if key in st.session_state:
            del st.session_state[key]
    
    st.rerun()

def save_current_work():
    """Sauvegarde le travail en cours"""
    work_snapshot = {
        'timestamp': datetime.now(),
        'query': st.session_state.get('universal_query'),
        'results': {}
    }
    
    # Capturer tous les r√©sultats actuels
    result_keys = [
        'redaction_result', 'timeline_result', 'mapping_result',
        'comparison_result', 'synthesis_result', 'search_results'
    ]
    
    for key in result_keys:
        if key in st.session_state:
            work_snapshot['results'][key] = st.session_state[key]
    
    # Sauvegarder
    if 'saved_work' not in st.session_state:
        st.session_state.saved_work = []
    
    st.session_state.saved_work.append(work_snapshot)
    
    st.success(f"‚úÖ Travail sauvegard√© √† {datetime.now().strftime('%H:%M')}")

def share_current_work():
    """Partage le travail en cours"""
    # Cr√©er un lien de partage ou exporter
    with st.expander("üì§ Options de partage", expanded=True):
        col1, col2 = st.columns(2)
        
        with col1:
            share_format = st.selectbox(
                "Format de partage",
                ["Lien", "Export complet", "R√©sum√©"],
                key="share_format"
            )
        
        with col2:
            share_with = st.text_input(
                "Partager avec",
                placeholder="email@example.com",
                key="share_with"
            )
        
        if st.button("üì§ Partager", key="share_now"):
            if share_format == "Export complet":
                export_complete_work()
            else:
                st.info("üîÑ Fonction de partage en d√©veloppement")

def export_complete_work():
    """Exporte tout le travail en cours"""
    # Compiler tout le contenu
    export_content = "EXPORT COMPLET DU TRAVAIL\n" + "=" * 50 + "\n\n"
    export_content += f"Date : {datetime.now().strftime('%d/%m/%Y %H:%M')}\n"
    export_content += f"Requ√™te : {st.session_state.get('universal_query', 'N/A')}\n\n"
    
    # Ajouter chaque type de r√©sultat
    if 'redaction_result' in st.session_state:
        export_content += "\n=== R√âDACTION ===\n"
        export_content += st.session_state.redaction_result.get('document', '')
    
    if 'timeline_result' in st.session_state:
        export_content += "\n\n=== CHRONOLOGIE ===\n"
        for event in st.session_state.timeline_result.get('events', []):
            export_content += f"{event.get('date', 'N/A')} : {event.get('description', '')}\n"
    
    # G√©n√©rer le fichier
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    st.download_button(
        "üíæ T√©l√©charger l'export complet",
        export_content,
        f"export_complet_{timestamp}.txt",
        "text/plain",
        key="download_complete_export"
    )

def clear_application_cache():
    """Nettoie le cache de l'application"""
    # Nettoyer les r√©sultats temporaires
    temp_keys = [
        'search_results', 'ai_analysis_results',
        'temp_documents', 'cache_embeddings'
    ]
    
    cleared = 0
    for key in temp_keys:
        if key in st.session_state:
            del st.session_state[key]
            cleared += 1
    
    st.success(f"‚úÖ Cache nettoy√© ({cleared} √©l√©ments supprim√©s)")

def save_application_state():
    """Sauvegarde l'√©tat complet de l'application"""
    # Cr√©er un snapshot de l'√©tat
    state_snapshot = {
        'timestamp': datetime.now().isoformat(),
        'version': '1.0',
        'documents': len(st.session_state.get('azure_documents', {})),
        'pieces': len(st.session_state.get('pieces_selectionnees', {})),
        'templates': len(st.session_state.get('saved_templates', {})),
        'history': st.session_state.get('query_history', [])[-10:],  # Derni√®res 10 requ√™tes
        'preferences': st.session_state.get('user_preferences', {})
    }
    
    # Sauvegarder dans un fichier JSON
    json_data = json.dumps(state_snapshot, indent=2, ensure_ascii=False)
    
    st.download_button(
        "üíæ T√©l√©charger l'√©tat de l'application",
        json_data,
        f"etat_application_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
        "application/json",
        key="download_app_state"
    )

def reset_application():
    """R√©initialise compl√®tement l'application"""
    # Sauvegarder d'abord l'historique
    history_backup = st.session_state.get('query_history', [])
    
    # Effacer tout sauf les connexions
    keys_to_preserve = ['azure_blob_manager', 'azure_search_manager']
    
    for key in list(st.session_state.keys()):
        if key not in keys_to_preserve:
            del st.session_state[key]
    
    # Restaurer un historique minimal
    st.session_state.query_history = history_backup[-10:]  # Garder les 10 derni√®res
    
    st.success("‚úÖ Application r√©initialis√©e")
    st.rerun()

# === FONCTIONS DE TRAITEMENT RESTANTES ===

def process_analysis_request(query: str, analysis: dict):
    """Traite une demande d'analyse IA simple"""
    # Collecter les documents pertinents
    if analysis['reference']:
        documents = search_by_reference(f"@{analysis['reference']}")
    else:
        documents = search_files(query)
    
    if not documents:
        st.warning("‚ö†Ô∏è Aucun document trouv√© pour l'analyse")
        return
    
    # Construire le prompt d'analyse
    context = prepare_documents_context(documents)
    
    # D√©tecter le type d'analyse demand√©
    analysis_type = detect_analysis_type(query)
    
    # G√©n√©rer l'analyse avec l'IA
    ai_results = perform_ai_analysis(documents, query, analysis.get('reference'))
    
    if ai_results and ai_results.get('success'):
        st.session_state.ai_analysis_results = ai_results
    else:
        st.error("‚ùå Erreur lors de l'analyse")

def process_search_request(query: str, analysis: dict):
    """Traite une demande de recherche simple"""
    search_type = st.session_state.get('search_type_unified', 'üîç Auto')
    
    if analysis['reference']:
        results = search_by_reference(f"@{analysis['reference']}")
    elif 'üìÅ' in search_type:
        results = search_folders(query)
    elif 'üìÑ' in search_type:
        results = search_files(query)
    else:
        results = search_auto(query)
    
    st.session_state.search_results = results

def detect_analysis_type(query: str) -> str:
    """D√©tecte le type d'analyse demand√©"""
    query_lower = query.lower()
    
    if any(word in query_lower for word in ['risque', 'danger', 'exposition']):
        return 'risk_analysis'
    elif any(word in query_lower for word in ['clause', 'contrat', 'stipulation']):
        return 'contract_analysis'
    elif any(word in query_lower for word in ['responsabilit√©', 'faute', 'imputation']):
        return 'liability_analysis'
    elif any(word in query_lower for word in ['strat√©gie', 'd√©fense', 'moyen']):
        return 'defense_strategy'
    else:
        return 'general_analysis'

def prepare_documents_context(documents: list) -> str:
    """Pr√©pare le contexte des documents pour l'IA"""
    context_parts = []
    
    blob_manager = st.session_state.get('azure_blob_manager')
    
    for i, doc in enumerate(documents[:10]):  # Limiter √† 10
        doc_content = ""
        
        # R√©cup√©rer le contenu selon le type
        if isinstance(doc, dict):
            if doc.get('type') == 'file' and 'container' in doc:
                # Fichier Azure
                try:
                    if blob_manager and blob_manager.is_connected():
                        content_bytes = blob_manager.download_blob(doc['container'], doc['path'])
                        doc_content = content_bytes.decode('utf-8', errors='ignore')[:2000]
                except:
                    doc_content = doc.get('content', '')
            else:
                doc_content = doc.get('content', '')
        else:
            # Document object
            doc_content = doc.content if hasattr(doc, 'content') else str(doc)
        
        if doc_content:
            title = doc.get('title', 'Sans titre') if isinstance(doc, dict) else getattr(doc, 'title', 'Sans titre')
            context_parts.append(f"""
=== DOCUMENT {i+1}: {title} ===
{doc_content[:1500]}...
""")
    
    return "\n".join(context_parts)

def perform_ai_analysis(search_results: list, question: str, reference: str = None) -> dict:
    """Effectue l'analyse IA sur les documents trouv√©s"""
    
    llm_manager = MultiLLMManager()
    
    if not llm_manager.clients:
        return {'error': 'Aucune IA disponible'}
    
    # Pr√©parer le contexte
    context = prepare_documents_context(search_results)
    
    if not context:
        return {'error': 'Aucun contenu analysable'}
    
    # Construire le prompt
    analysis_prompt = build_ai_analysis_prompt(question, context, reference)
    
    # S√©lectionner les IA
    available_providers = list(llm_manager.clients.keys())
    selected_providers = available_providers[:2]  # 2 IA max
    
    # Ex√©cuter l'analyse
    try:
        responses = asyncio.run(
            llm_manager.query_multiple_llms(
                selected_providers,
                analysis_prompt,
                "Tu es un avocat expert en droit p√©nal des affaires fran√ßais."
            )
        )
        
        # Fusionner si plusieurs r√©ponses
        if len(responses) > 1:
            fusion = llm_manager.fusion_responses(responses)
        else:
            fusion = responses[0]['response'] if responses and responses[0]['success'] else "Analyse non disponible"
        
        return {
            'success': True,
            'analysis': fusion,
            'providers_used': [r['provider'] for r in responses if r['success']],
            'document_count': len(search_results),
            'question': question,
            'reference': reference
        }
        
    except Exception as e:
        return {'error': f'Erreur analyse IA: {str(e)}'}

def build_ai_analysis_prompt(question: str, context: str, reference: str = None) -> str:
    """Construit le prompt d'analyse pour l'IA"""
    
    prompt = f"""ANALYSE JURIDIQUE DEMAND√âE

Question pos√©e : {question}
"""
    
    if reference:
        prompt += f"R√©f√©rence sp√©cifique : @{reference}\n"
    
    prompt += f"""
Documents √† analyser :
{context}

INSTRUCTIONS :
1. Analyse approfondie et structur√©e
2. Identification des points juridiques cl√©s
3. √âvaluation des risques et opportunit√©s
4. Recommandations pratiques et actionnables
5. Citations pr√©cises des documents analys√©s

Structure ta r√©ponse avec :
- üéØ SYNTH√àSE EX√âCUTIVE (3-5 lignes max)
- üìã ANALYSE D√âTAILL√âE
- ‚öñÔ∏è POINTS JURIDIQUES CL√âS
- ‚ö†Ô∏è RISQUES IDENTIFI√âS
- üí° OPPORTUNIT√âS
- üõ°Ô∏è RECOMMANDATIONS
- üìö R√âF√âRENCES ET SOURCES

Sois pr√©cis, professionnel et orient√© solutions."""
    
    return prompt

def show_ai_analysis_results():
    """Affiche les r√©sultats d'analyse IA"""
    results = st.session_state.ai_analysis_results
    
    if 'error' in results:
        st.error(f"‚ùå {results['error']}")
        return
    
    st.markdown("### ü§ñ Analyse IA")
    
    # M√©tadonn√©es
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Documents analys√©s", results.get('document_count', 0))
    
    with col2:
        providers = results.get('providers_used', [])
        st.metric("IA utilis√©es", len(providers))
    
    with col3:
        if st.button("üíæ Exporter", key="export_ai_analysis"):
            export_ai_analysis(results)
    
    # R√©sultat de l'analyse
    st.markdown("---")
    
    if 'analysis' in results:
        # Parser et afficher de mani√®re structur√©e
        display_structured_analysis(results['analysis'])
    
    # Informations suppl√©mentaires
    with st.expander("‚ÑπÔ∏è D√©tails de l'analyse", expanded=False):
        st.write(f"**Question analys√©e :** {results.get('question', 'N/A')}")
        if results.get('reference'):
            st.write(f"**R√©f√©rence :** @{results['reference']}")
        st.write(f"**IA utilis√©es :** {', '.join(results.get('providers_used', []))}")
        st.write(f"**Timestamp :** {datetime.now().strftime('%d/%m/%Y %H:%M')}")

def display_structured_analysis(analysis_text: str):
    """Affiche l'analyse de mani√®re structur√©e"""
    # Essayer de parser les sections
    sections = {
        'üéØ SYNTH√àSE EX√âCUTIVE': '',
        'üìã ANALYSE D√âTAILL√âE': '',
        '‚öñÔ∏è POINTS JURIDIQUES': '',
        '‚ö†Ô∏è RISQUES': '',
        'üí° OPPORTUNIT√âS': '',
        'üõ°Ô∏è RECOMMANDATIONS': '',
        'üìö R√âF√âRENCES': ''
    }
    
    current_section = None
    lines = analysis_text.split('\n')
    
    for line in lines:
        # D√©tecter les sections
        section_found = False
        for section in sections.keys():
            if any(marker in line for marker in section.split()):
                current_section = section
                section_found = True
                break
        
        if not section_found and current_section:
            sections[current_section] += line + '\n'
    
    # Afficher les sections non vides
    for section, content in sections.items():
        if content.strip():
            st.markdown(f"**{section}**")
            st.markdown(content)
            st.markdown("")

def export_ai_analysis(results: dict):
    """Exporte l'analyse IA"""
    content = f"""ANALYSE IA - {datetime.now().strftime('%d/%m/%Y %H:%M')}

Question : {results.get('question', 'N/A')}
R√©f√©rence : @{results.get('reference', 'N/A')}
Documents analys√©s : {results.get('document_count', 0)}
IA utilis√©es : {', '.join(results.get('providers_used', []))}

{'=' * 50}

{results.get('analysis', 'Aucune analyse disponible')}
"""
    
    st.download_button(
        "üíæ T√©l√©charger l'analyse",
        content,
        f"analyse_ia_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
        "text/plain",
        key="download_ai_analysis_txt"
    )

# === FONCTIONS DE RECHERCHE DE BASE ===

def search_by_reference(query: str) -> list:
    """Recherche par r√©f√©rence @"""
    if not query.startswith('@'):
        return []
    
    reference = query[1:].lower().strip()
    results = []
    
    # Recherche dans les documents locaux
    for doc_id, doc in st.session_state.get('azure_documents', {}).items():
        if reference in doc_id.lower() or reference in doc.title.lower():
            results.append({
                'id': doc_id,
                'title': doc.title,
                'content': doc.content[:500] + "...",
                'score': 1.0,
                'source': doc.source,
                'type': 'document'
            })
    
    # Recherche dans Azure Blob
    blob_manager = st.session_state.get('azure_blob_manager')
    if blob_manager and blob_manager.is_connected():
        containers = blob_manager.list_containers()
        
        for container in containers:
            try:
                items = blob_manager.list_folder_contents(container, "")
                
                for item in items:
                    if reference in item['name'].lower():
                        results.append({
                            'id': f"ref_{container}_{item['name']}",
                            'title': f"{'üìÅ' if item['type'] == 'folder' else 'üìÑ'} {item['name']}",
                            'content': f"Trouv√© par r√©f√©rence @{reference}",
                            'score': 1.0,
                            'source': f"Azure: {container}",
                            'type': item['type'],
                            'path': item['path'],
                            'container': container
                        })
            except:
                continue
    
    return results

def search_folders(query: str) -> list:
    """Recherche de dossiers"""
    results = []
    query_lower = query.lower()
    
    blob_manager = st.session_state.get('azure_blob_manager')
    
    if blob_manager and blob_manager.is_connected():
        containers = blob_manager.list_containers()
        
        for container in containers:
            try:
                items = blob_manager.list_folder_contents(container, "")
                
                for item in items:
                    if item['type'] == 'folder' and query_lower in item['name'].lower():
                        # Compter le contenu
                        sub_items = blob_manager.list_folder_contents(container, item['path'])
                        file_count = len([i for i in sub_items if i['type'] == 'file'])
                        folder_count = len([i for i in sub_items if i['type'] == 'folder'])
                        
                        results.append({
                            'id': f"folder_{container}_{item['name']}",
                            'title': f"üìÅ {item['name']}",
                            'content': f"Dossier - {file_count} fichiers, {folder_count} sous-dossiers",
                            'score': 1.0,
                            'source': f"Azure: {container}",
                            'type': 'folder',
                            'path': item['path'],
                            'container': container,
                            'file_count': file_count,
                            'folder_count': folder_count
                        })
            except:
                continue
    
    return results

def search_files(query: str) -> list:
    """Recherche de fichiers"""
    results = []
    query_lower = query.lower()
    
    # Recherche locale
    for doc_id, doc in st.session_state.get('azure_documents', {}).items():
        if query_lower in doc.title.lower() or query_lower in doc.content.lower():
            results.append({
                'id': doc_id,
                'title': doc.title,
                'content': doc.content[:200] + "...",
                'score': 1.0,
                'source': doc.source,
                'type': 'document'
            })
    
    # Recherche Azure Search si disponible
    search_manager = st.session_state.get('azure_search_manager')
    if search_manager and hasattr(search_manager, 'search_text'):
        try:
            azure_results = search_manager.search_text(query, top=20)
            results.extend(azure_results)
        except:
            pass
    
    return results

def search_auto(query: str) -> list:
    """Recherche automatique tous types"""
    results = []
    
    # Combiner tous les types de recherche
    results.extend(search_files(query))
    results.extend(search_folders(query))
    
    # Si un seul mot, essayer aussi comme r√©f√©rence
    if len(query.split()) == 1:
        ref_results = search_by_reference(f"@{query}")
        results.extend(ref_results)
    
    # D√©dupliquer et trier
    seen = set()
    unique_results = []
    
    for result in results:
        if result['id'] not in seen:
            seen.add(result['id'])
            unique_results.append(result)
    
    unique_results.sort(key=lambda x: x.get('score', 0), reverse=True)
    
    return unique_results

def show_search_results_unified():
    """Affiche les r√©sultats de recherche"""
    results = st.session_state.get('search_results', [])
    
    if not results:
        st.info("Aucun r√©sultat trouv√©")
        return
    
    st.markdown(f"### üîç R√©sultats de recherche ({len(results)})")
    
    # Options d'affichage
    view_mode = st.radio(
        "Mode d'affichage",
        ["Liste", "Cartes", "Tableau"],
        horizontal=True,
        key="search_view_mode"
    )
    
    if view_mode == "Liste":
        for i, result in enumerate(results):
            with st.container():
                col1, col2 = st.columns([4, 1])
                
                with col1:
                    st.markdown(f"**{result['title']}**")
                    st.caption(f"Score: {result.get('score', 0):.2f} | Source: {result['source']}")
                    st.text(result['content'][:200] + "...")
                
                with col2:
                    if st.button("üëÅÔ∏è", key=f"view_{result['id']}"):
                        view_document_detail(result)
                    
                    if st.button("ü§ñ", key=f"analyze_{result['id']}"):
                        st.session_state.universal_query = f"analyser @{result['id']}"
                        st.rerun()
    
    elif view_mode == "Cartes":
        cols = st.columns(3)
        for i, result in enumerate(results):
            with cols[i % 3]:
                with st.container():
                    st.markdown(f"**{result['title']}**")
                    st.caption(result['source'])
                    st.text(result['content'][:100] + "...")
                    
                    if st.button("Voir plus", key=f"more_{result['id']}"):
                        view_document_detail(result)
    
    else:  # Tableau
        import pandas as pd
        
        df_data = []
        for result in results:
            df_data.append({
                'Titre': result['title'],
                'Source': result['source'],
                'Score': result.get('score', 0),
                'Type': result.get('type', 'document')
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True, hide_index=True)

def view_document_detail(document: dict):
    """Affiche le d√©tail d'un document"""
    with st.expander(f"üìÑ {document['title']}", expanded=True):
        st.write(f"**Source :** {document['source']}")
        st.write(f"**Type :** {document.get('type', 'document')}")
        
        if 'path' in document:
            st.write(f"**Chemin :** {document['path']}")
        
        st.text_area(
            "Contenu",
            document.get('content', 'Contenu non disponible'),
            height=300,
            key=f"content_{document['id']}"
        )

# === AUTRES FONCTIONS UTILITAIRES ===

def create_bordereau_from_selection(selected_df, category: str):
    """Cr√©e un bordereau √† partir de la s√©lection"""
    pieces = {}
    
    for i, (_, row) in enumerate(selected_df.iterrows()):
        pieces[row['ID']] = PieceSelectionnee(
            document_id=row['ID'],
            titre=row['Titre'],
            categorie=category,
            cote_bordereau=f"P-{i+1}"
        )
    
    # G√©n√©rer le bordereau
    bordereau = generate_bordereau(pieces, {
        'type': 'Communication de pi√®ces',
        'include_summary': True,
        'sort_by': 'Cote',
        'format': 'Tableau'
    })
    
    # Stocker le r√©sultat
    st.session_state.bordereau_result = {
        'content': bordereau,
        'piece_count': len(pieces),
        'category': category,
        'timestamp': datetime.now()
    }
    
    st.success("‚úÖ Bordereau cr√©√©")

def export_piece_selection(selected_df):
    """Exporte la s√©lection de pi√®ces"""
    export_data = {
        'timestamp': datetime.now().isoformat(),
        'piece_count': len(selected_df),
        'pieces': []
    }
    
    for _, row in selected_df.iterrows():
        export_data['pieces'].append({
            'id': row['ID'],
            'titre': row['Titre'],
            'source': row['Source']
        })
    
    json_data = json.dumps(export_data, indent=2, ensure_ascii=False)
    
    st.download_button(
        "üíæ Exporter la s√©lection",
        json_data,
        f"selection_pieces_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
        "application/json",
        key="export_selection_json"
    )

def format_analysis_for_export(analysis_results: dict) -> str:
    """Formate les r√©sultats d'analyse pour l'export"""
    if isinstance(analysis_results, dict):
        if 'analysis' in analysis_results:
            return analysis_results['analysis']
        else:
            return json.dumps(analysis_results, indent=2, ensure_ascii=False)
    else:
        return str(analysis_results)

def edit_template_interface():
    """Interface d'√©dition de template"""
    template_to_edit = st.session_state.get('template_to_edit')
    
    if template_to_edit:
        # Charger le template
        if template_to_edit in DOCUMENT_TEMPLATES:
            template = DOCUMENT_TEMPLATES[template_to_edit].copy()
            is_system = True
        else:
            template = st.session_state.saved_templates.get(template_to_edit, {})
            is_system = False
        
        if template:
            st.markdown(f"### ‚úèÔ∏è √âdition du template : {template.get('name', template_to_edit)}")
            
            if is_system:
                st.warning("‚ö†Ô∏è Template syst√®me - Les modifications cr√©eront une copie personnalis√©e")
            
            # √âditeur
            new_name = st.text_input(
                "Nom du template",
                value=template.get('name', ''),
                key="edit_template_name"
            )
            
            new_structure = st.text_area(
                "Structure (une section par ligne)",
                value='\n'.join(template.get('structure', [])),
                height=300,
                key="edit_template_structure"
            )
            
            new_style = st.selectbox(
                "Style par d√©faut",
                list(REDACTION_STYLES.keys()),
                index=list(REDACTION_STYLES.keys()).index(template.get('style', 'formel')),
                format_func=lambda x: REDACTION_STYLES[x]['name'],
                key="edit_template_style"
            )
            
            # Sauvegarder
            if st.button("üíæ Sauvegarder les modifications", key="save_template_edits"):
                updated_template = {
                    'name': new_name,
                    'structure': new_structure.split('\n'),
                    'style': new_style,
                    'modified_date': datetime.now()
                }
                
                # Si c'est un template syst√®me, cr√©er une copie
                if is_system:
                    new_id = f"custom_{template_to_edit}"
                    st.session_state.saved_templates[new_id] = updated_template
                    st.success(f"‚úÖ Template personnalis√© '{new_name}' cr√©√©")
                else:
                    st.session_state.saved_templates[template_to_edit] = updated_template
                    st.success(f"‚úÖ Template '{new_name}' mis √† jour")

def apply_template_interface():
    """Interface d'application de template"""
    selected_template = st.session_state.get('selected_template')
    
    if selected_template:
        # Charger le template
        if selected_template in DOCUMENT_TEMPLATES:
            template = DOCUMENT_TEMPLATES[selected_template]
        else:
            template = st.session_state.saved_templates.get(selected_template, {})
        
        if template:
            st.info(f"üìÑ Application du template : {template.get('name', selected_template)}")
            
            # Si le template a des variables, les demander
            if template.get('variables'):
                st.markdown("**Remplir les variables :**")
                
                variable_values = {}
                for var in template['variables']:
                    variable_values[var] = st.text_input(
                        var.replace('_', ' ').title(),
                        key=f"var_{var}"
                    )
                
                # Appliquer le template
                if st.button("‚úÖ Appliquer le template", key="apply_template_now"):
                    st.session_state.universal_query = f"r√©diger avec template {selected_template}"
                    st.session_state.template_variables = variable_values
                    st.rerun()

def search_relevant_jurisprudence(analysis: dict) -> list:
    """Recherche automatique de jurisprudence pertinente"""
    jurisprudence = []
    
    try:
        # Utiliser les termes de l'analyse
        keywords = []
        
        if analysis.get('subject_matter'):
            # Mapping infractions -> mots-cl√©s
            juris_keywords = {
                'abus_biens_sociaux': ['abus biens sociaux', 'article L241-3'],
                'escroquerie': ['escroquerie', 'article 313-1'],
                'abus_confiance': ['abus confiance', 'article 314-1'],
                'faux': ['faux √©critures', 'article 441-1'],
                'corruption': ['corruption', 'article 432-11'],
                'blanchiment': ['blanchiment', 'article 324-1']
            }
            
            keywords.extend(juris_keywords.get(analysis['subject_matter'], []))
        
        if keywords:
            # Recherche simplifi√©e
            jurisprudence = search_jurisprudence_unified(
                keywords,
                ['legifrance'],
                {'max_results': 10}
            )
    
    except Exception as e:
        print(f"Erreur recherche jurisprudence auto : {e}")
    
    return jurisprudence

def analyze_jurisprudence_trends(results: list):
    """Analyse les tendances jurisprudentielles"""
    st.info("üìä Analyse des tendances jurisprudentielles en d√©veloppement")

def integrate_jurisprudence_in_document(results: list):
    """Int√®gre la jurisprudence dans un document"""
    if results:
        # Cr√©er un prompt pour int√©grer la jurisprudence
        juris_text = "\n\n".join([
            f"{r.get('title', 'Sans titre')} ({r.get('date', 'N/A')})\n{r.get('summary', '')}"
            for r in results[:5]
        ])
        
        st.session_state.universal_query = f"r√©diger en int√©grant cette jurisprudence : {juris_text[:200]}..."
        st.rerun()

def export_jurisprudence_results(results: list):
    """Exporte les r√©sultats de jurisprudence"""
    export_content = "RECHERCHE JURISPRUDENTIELLE\n" + "=" * 50 + "\n\n"
    export_content += f"Date : {datetime.now().strftime('%d/%m/%Y %H:%M')}\n"
    export_content += f"R√©sultats : {len(results)}\n\n"
    
    for i, result in enumerate(results, 1):
        export_content += f"\n{i}. {result.get('title', 'Sans titre')}\n"
        export_content += f"   Juridiction : {result.get('jurisdiction', 'N/A')}\n"
        export_content += f"   Date : {result.get('date', 'N/A')}\n"
        export_content += f"   R√©f√©rence : {result.get('reference', 'N/A')}\n"
        
        if result.get('summary'):
            export_content += f"   R√©sum√© : {result['summary']}\n"
        
        if result.get('url'):
            export_content += f"   Lien : {result['url']}\n"
        
        export_content += "\n"
    
    st.download_button(
        "üíæ Exporter la jurisprudence",
        export_content,
        f"jurisprudence_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
        "text/plain",
        key="export_juris_txt"
    )

# === POINT D'ENTR√âE DU MODULE ===

if __name__ == "__main__":
    # Pour les tests
    show_page()