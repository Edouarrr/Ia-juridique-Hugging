# modules/recherche.py
"""Module de recherche unifi√© - Interface principale avec toutes les fonctionnalit√©s"""

import streamlit as st
import asyncio
import re
from datetime import datetime
from typing import Dict, Any, Optional, List
from collections import defaultdict
import pandas as pd

# ========================= CONFIGURATION =========================

# Styles de r√©daction
REDACTION_STYLES = {
    'formel': {
        'name': 'Formel',
        'description': 'Style juridique classique et solennel',
        'tone': 'respectueux et distant',
        'vocabulary': 'technique et pr√©cis'
    },
    'persuasif': {
        'name': 'Persuasif',
        'description': 'Style argumentatif et convaincant',
        'tone': 'assertif et engag√©',
        'vocabulary': 'percutant et imag√©'
    },
    'technique': {
        'name': 'Technique',
        'description': 'Style factuel et d√©taill√©',
        'tone': 'neutre et objectif',
        'vocabulary': 'sp√©cialis√© et exhaustif'
    },
    'synth√©tique': {
        'name': 'Synth√©tique',
        'description': 'Style concis et efficace',
        'tone': 'direct et clair',
        'vocabulary': 'simple et pr√©cis'
    },
    'p√©dagogique': {
        'name': 'P√©dagogique',
        'description': 'Style explicatif et accessible',
        'tone': 'bienveillant et didactique',
        'vocabulary': 'vulgaris√© et illustr√©'
    }
}

# Templates de documents pr√©d√©finis
DOCUMENT_TEMPLATES = {
    'conclusions_defense': {
        'name': 'Conclusions en d√©fense',
        'structure': [
            'I. FAITS ET PROC√âDURE',
            'II. DISCUSSION',
            ' A. Sur la recevabilit√©',
            ' B. Sur le fond',
            ' 1. Sur l\'√©l√©ment mat√©riel',
            ' 2. Sur l\'√©l√©ment intentionnel',
            ' 3. Sur le pr√©judice',
            'III. PAR CES MOTIFS'
        ],
        'style': 'formel'
    },
    'plainte_simple': {
        'name': 'Plainte simple',
        'structure': [
            'Objet : Plainte',
            'EXPOS√â DES FAITS',
            'QUALIFICATION JURIDIQUE',
            'PR√âJUDICES SUBIS',
            'DEMANDES',
            'PI√àCES JOINTES'
        ],
        'style': 'formel'
    },
    'plainte_avec_cpc': {
        'name': 'Plainte avec constitution de partie civile',
        'structure': [
            'Objet : Plainte avec constitution de partie civile',
            'EXPOS√â DES FAITS',
            'QUALIFICATION JURIDIQUE',
            'PR√âJUDICES SUBIS',
            'CONSTITUTION DE PARTIE CIVILE',
            '√âVALUATION DU PR√âJUDICE',
            'DEMANDES',
            'PI√àCES JOINTES'
        ],
        'style': 'formel'
    },
    'mise_en_demeure': {
        'name': 'Mise en demeure',
        'structure': [
            'MISE EN DEMEURE',
            'Rappel des faits',
            'Obligations non respect√©es',
            'D√©lai accord√©',
            'Cons√©quences du d√©faut',
            'R√©serves'
        ],
        'style': 'persuasif'
    },
    'note_synthese': {
        'name': 'Note de synth√®se',
        'structure': [
            'SYNTH√àSE EX√âCUTIVE',
            'I. CONTEXTE',
            'II. ANALYSE',
            'III. RECOMMANDATIONS',
            'IV. PLAN D\'ACTION'
        ],
        'style': 'synth√©tique'
    }
}

# ========================= IMPORTS =========================

# modules/recherche.py
"""Module de recherche unifi√© - Interface principale avec toutes les fonctionnalit√©s"""

import streamlit as st
import asyncio
import re
from datetime import datetime
from typing import Dict, Any, Optional, List
from collections import defaultdict
import pandas as pd

# ========================= CONFIGURATION =========================

# Styles de r√©daction
REDACTION_STYLES = {
    'formel': {
        'name': 'Formel',
        'description': 'Style juridique classique et solennel',
        'tone': 'respectueux et distant',
        'vocabulary': 'technique et pr√©cis'
    },
    'persuasif': {
        'name': 'Persuasif',
        'description': 'Style argumentatif et convaincant',
        'tone': 'assertif et engag√©',
        'vocabulary': 'percutant et imag√©'
    },
    'technique': {
        'name': 'Technique',
        'description': 'Style factuel et d√©taill√©',
        'tone': 'neutre et objectif',
        'vocabulary': 'sp√©cialis√© et exhaustif'
    },
    'synth√©tique': {
        'name': 'Synth√©tique',
        'description': 'Style concis et efficace',
        'tone': 'direct et clair',
        'vocabulary': 'simple et pr√©cis'
    },
    'p√©dagogique': {
        'name': 'P√©dagogique',
        'description': 'Style explicatif et accessible',
        'tone': 'bienveillant et didactique',
        'vocabulary': 'vulgaris√© et illustr√©'
    }
}

# Templates de documents pr√©d√©finis
DOCUMENT_TEMPLATES = {
    'conclusions_defense': {
        'name': 'Conclusions en d√©fense',
        'structure': [
            'I. FAITS ET PROC√âDURE',
            'II. DISCUSSION',
            ' A. Sur la recevabilit√©',
            ' B. Sur le fond',
            ' 1. Sur l\'√©l√©ment mat√©riel',
            ' 2. Sur l\'√©l√©ment intentionnel',
            ' 3. Sur le pr√©judice',
            'III. PAR CES MOTIFS'
        ],
        'style': 'formel'
    },
    'plainte_simple': {
        'name': 'Plainte simple',
        'structure': [
            'Objet : Plainte',
            'EXPOS√â DES FAITS',
            'QUALIFICATION JURIDIQUE',
            'PR√âJUDICES SUBIS',
            'DEMANDES',
            'PI√àCES JOINTES'
        ],
        'style': 'formel'
    },
    'plainte_avec_cpc': {
        'name': 'Plainte avec constitution de partie civile',
        'structure': [
            'Objet : Plainte avec constitution de partie civile',
            'EXPOS√â DES FAITS',
            'QUALIFICATION JURIDIQUE',
            'PR√âJUDICES SUBIS',
            'CONSTITUTION DE PARTIE CIVILE',
            '√âVALUATION DU PR√âJUDICE',
            'DEMANDES',
            'PI√àCES JOINTES'
        ],
        'style': 'formel'
    },
    'mise_en_demeure': {
        'name': 'Mise en demeure',
        'structure': [
            'MISE EN DEMEURE',
            'Rappel des faits',
            'Obligations non respect√©es',
            'D√©lai accord√©',
            'Cons√©quences du d√©faut',
            'R√©serves'
        ],
        'style': 'persuasif'
    },
    'note_synthese': {
        'name': 'Note de synth√®se',
        'structure': [
            'SYNTH√àSE EX√âCUTIVE',
            'I. CONTEXTE',
            'II. ANALYSE',
            'III. RECOMMANDATIONS',
            'IV. PLAN D\'ACTION'
        ],
        'style': 'synth√©tique'
    }
}

# ========================= IMPORTS =========================

try:
    # Import des managers
    from managers.azure_blob_manager import AzureBlobManager
    from managers.azure_search_manager import AzureSearchManager
    from managers.multi_llm_manager import MultiLLMManager
    from managers.jurisprudence_verifier import JurisprudenceVerifier, display_jurisprudence_verification
    
    # Import des mod√®les
    from models.dataclasses import (
        Document, 
        PieceSelectionnee, 
        AnalyseJuridique,
        InfractionIdentifiee
    )
    
    # Import de la configuration
    from config.app_config import (
        InfractionAffaires,
        ANALYSIS_PROMPTS_AFFAIRES,
        ANALYSIS_PROMPTS_INFRACTIONS,
        LLMProvider,
        SearchMode,
        app_config,
        api_config
    )
    
except ImportError as e:
    st.error(f"‚ö†Ô∏è Import manquant : {e}")
    
# ========================= PAGE PRINCIPALE =========================

def show_page():
    """Fonction principale de la page recherche universelle"""
    
    st.markdown("## üîç Recherche Universelle")
    
    # Barre de recherche principale
    col1, col2 = st.columns([5, 1])
    
    with col1:
        default_value = ""
        if 'pending_query' in st.session_state:
            default_value = st.session_state.pending_query
            del st.session_state.pending_query
    elif 'universal_query' in st.session_state:
        default_value = st.session_state.universal_query

        query = st.text_input(
            "Entrez votre commande ou recherche",
            value=default_value,
            placeholder="Ex: r√©diger conclusions @affaire_martin, analyser risques, importer documents...",
            key="universal_query",
            help="Utilisez @ pour r√©f√©rencer une affaire sp√©cifique")
    
    with col2:
        search_button = st.button("üîç Rechercher", key="search_button", use_container_width=True)
    
    # Suggestions de commandes
    with st.expander("üí° Exemples de commandes", expanded=False):
        st.markdown("""
        **Recherche :**
        - `contrats soci√©t√© XYZ`
        - `@affaire_martin documents comptables`
        
        **Analyse :**
        - `analyser les risques @dossier_p√©nal`
        - `identifier les infractions @affaire_corruption`
        
        **R√©daction :**
        - `r√©diger conclusions d√©fense @affaire_martin abus biens sociaux`
        - `cr√©er plainte avec constitution partie civile escroquerie`
        - `r√©diger plainte contre Vinci, SOGEPROM @projet_26_05_2025`
        
        **Plaidoirie & Pr√©paration :**
        - `pr√©parer plaidoirie @affaire_martin audience correctionnelle`
        - `pr√©parer client interrogatoire @dossier_fraude`
        
        **Visualisations :**
        - `chronologie des faits @affaire_martin`
        - `cartographie des soci√©t√©s @groupe_abc`
        - `comparer les auditions @t√©moins`
        
        **Gestion :**
        - `s√©lectionner pi√®ces @dossier cat√©gorie proc√©dure`
        - `cr√©er bordereau @pi√®ces_s√©lectionn√©es`
        - `importer documents PDF`
        - `exporter analyse format word`
        - `envoyer par email @destinataire`
        """)
    
    # Menu d'actions rapides
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üìÑ Nouvelle r√©daction", key="quick_redaction"):
            st.session_state.pending_query = "r√©diger "
            st.session_state.process_query = True
            st.rerun()

    with col2:
        if st.button("ü§ñ Analyser dossier", key="quick_analysis"):
            st.session_state.pending_query = "analyser "
            st.session_state.process_query = True
            st.rerun()

    with col3:
        if st.button("üì• Importer", key="quick_import"):
            st.session_state.pending_query = "importer documents"
            st.session_state.process_query = True
            st.rerun()
    
    with col4:
        if st.button("üîÑ R√©initialiser", key="quick_reset"):
            clear_universal_state()
    
    # Traiter la requ√™te
    if query and (search_button or st.session_state.get('process_query', False)):
        with st.spinner("üîÑ Traitement en cours..."):
            process_universal_query(query)
    
    # Afficher les r√©sultats
    show_unified_results_tab()
    
    # R√©initialiser le flag de traitement
    if 'process_query' in st.session_state:
        st.session_state.process_query = False
    
    # Footer avec actions
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üíæ Sauvegarder le travail", key="save_work"):
            save_current_work()
    
    with col2:
        if st.button("üìä Afficher les statistiques", key="show_stats"):
            show_work_statistics()
    
    with col3:
        if st.button("üîó Partager", key="share_work"):
            share_current_work()

# ========================= ROUTING ET TRAITEMENT =========================

def process_universal_query(query: str):
    """Traite une requ√™te universelle et route vers la bonne fonction"""
    
    # Sauvegarder la requ√™te
    st.session_state.last_universal_query = query
    
    # Analyser la requ√™te pour d√©tecter le type
    query_lower = query.lower()
    
    # Dans process_universal_query (vers la ligne 265), remplacez la section de d√©tection de r√©daction par :

    # D√âTECTION POUR R√âDACTION (incluant votre cas de plainte)
    if any(word in query_lower for word in ['r√©dige', 'r√©diger', '√©crire', 'cr√©er', 'plainte', 'conclusions', 'courrier', 'assignation']):
        st.info("üìù D√©tection d'une demande de r√©daction...")
        
        # Cas sp√©cifique : plainte avec parties multiples
        if 'plainte' in query_lower:
            # D√©terminer le type de plainte
            is_partie_civile = any(term in query_lower for term in [
                'partie civile', 'constitution de partie civile', 'cpc', 
                'doyen', 'juge d\'instruction', 'instruction'
            ])
            
            # D√©bogage
            st.write("üîç Analyse de la demande de plainte...")
            if is_partie_civile:
                st.info("üìã Type : Plainte avec constitution de partie civile (au Doyen des Juges d'Instruction)")
            else:
                st.info("üìã Type : Plainte simple (au Procureur de la R√©publique)")
            
            # Extraire les parties de la requ√™te
            parties_demanderesses = []
            parties_defenderesses = []
            
            # Parties demanderesses potentielles (entreprises du BTP principalement)
            demandeurs_keywords = [
                ('interconstruction', 'INTERCONSTRUCTION'),
                ('vinci', 'VINCI'),
                ('sogeprom', 'SOGEPROM R√âALISATIONS'),
                ('demathieu bard', 'DEMATHIEU BARD'),
                ('demathieu', 'DEMATHIEU BARD'),  # Variante
                ('bouygues', 'BOUYGUES'),
                ('eiffage', 'EIFFAGE'),
                ('spie', 'SPIE BATIGNOLLES'),
                ('leon grosse', 'LEON GROSSE'),
                ('fayat', 'FAYAT'),
                ('colas', 'COLAS'),
                ('eurovia', 'EUROVIA'),
                ('razel-bec', 'RAZEL-BEC'),
                ('nge', 'NGE'),
                ('gtm', 'GTM B√¢timent')
            ]
            
            # Parties d√©fenderesses potentielles
            defendeurs_keywords = [
                ('perinet', 'M. PERINET'),
                ('p√©rinet', 'M. P√âRINET'),
                ('vp invest', 'VP INVEST'),
                ('perraud', 'M. PERRAUD'),
                ('martin', 'M. MARTIN'),
                ('dupont', 'M. DUPONT'),
                ('durand', 'M. DURAND'),
                ('laurent', 'M. LAURENT'),
                ('michel', 'M. MICHEL')
            ]
            
            # Analyser la structure de la requ√™te
            # M√©thode 1 : Recherche avec "pour" et "contre"
            if ' pour ' in query_lower and ' contre ' in query_lower:
                # Extraire la partie entre "pour" et "contre" pour les demandeurs
                partie_pour = query_lower.split(' pour ')[1].split(' contre ')[0]
                # Extraire la partie apr√®s "contre" pour les d√©fendeurs
                partie_contre = query_lower.split(' contre ')[1]
                
                # Chercher les demandeurs dans la partie "pour"
                for keyword, nom_formate in demandeurs_keywords:
                    if keyword in partie_pour:
                        parties_demanderesses.append(nom_formate)
                        st.write(f"‚úÖ Demandeur identifi√© : {nom_formate}")
                
                # Chercher les d√©fendeurs dans la partie "contre"
                for keyword, nom_formate in defendeurs_keywords:
                    if keyword in partie_contre:
                        parties_defenderesses.append(nom_formate)
                        st.write(f"‚öñÔ∏è D√©fendeur identifi√© : {nom_formate}")
            
            # M√©thode 2 : Si pas de structure claire, recherche globale
            else:
                # Identifier d'abord les d√©fendeurs (souvent apr√®s "contre")
                if ' contre ' in query_lower:
                    partie_contre = query_lower.split(' contre ')[1]
                    for keyword, nom_formate in defendeurs_keywords:
                        if keyword in partie_contre:
                            parties_defenderesses.append(nom_formate)
                            st.write(f"‚öñÔ∏è D√©fendeur identifi√© : {nom_formate}")
                
                # Puis identifier les demandeurs dans le reste
                for keyword, nom_formate in demandeurs_keywords:
                    if keyword in query_lower and nom_formate not in parties_defenderesses:
                        # V√©rifier que ce n'est pas dans la partie "contre"
                        if ' contre ' not in query_lower or keyword not in query_lower.split(' contre ')[1]:
                            parties_demanderesses.append(nom_formate)
                            st.write(f"‚úÖ Demandeur identifi√© : {nom_formate}")
            
            # Extraire les infractions mentionn√©es
            infractions_detectees = []
            infractions_keywords = {
                'escroquerie': 'Escroquerie',
                'abus de confiance': 'Abus de confiance',
                'abus de biens sociaux': 'Abus de biens sociaux',
                'abs': 'Abus de biens sociaux',  # Abr√©viation
                'faux': 'Faux et usage de faux',
                'corruption': 'Corruption',
                'trafic d\'influence': 'Trafic d\'influence',
                'favoritisme': 'Favoritisme',
                'prise ill√©gale': 'Prise ill√©gale d\'int√©r√™ts',
                'blanchiment': 'Blanchiment',
                'fraude fiscale': 'Fraude fiscale',
                'travail dissimul√©': 'Travail dissimul√©',
                'marchandage': 'Marchandage',
                'entrave': 'Entrave',
                'banqueroute': 'Banqueroute',
                'recel': 'Recel'
            }
            
            for keyword, infraction in infractions_keywords.items():
                if keyword in query_lower:
                    infractions_detectees.append(infraction)
                    st.write(f"üéØ Infraction d√©tect√©e : {infraction}")
            
            # Extraire la r√©f√©rence
            reference = None
            modele = None
            
            # Recherche de r√©f√©rence avec @
            if '@' in query:
                ref_match = re.search(r'@(\w+)', query)
                if ref_match:
                    reference = ref_match.group(1)
                    st.write(f"üìÅ R√©f√©rence : @{reference}")
            
            # Recherche de mod√®le de date
            date_patterns = [
                r'(\d{1,2}[\s\-/]\d{1,2}[\s\-/]\d{2,4})',
                r'(\d{1,2}\s+\w+\s+\d{2,4})'
            ]
            
            for pattern in date_patterns:
                date_match = re.search(pattern, query)
                if date_match:
                    modele = f"Mod√®le du {date_match.group(1)}"
                    st.write(f"üìÖ {modele}")
                    break
            
            # Validation et suggestions
            st.markdown("### üìã R√©sum√© de l'analyse")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown("**üè¢ Demandeurs (victimes) :**")
                if parties_demanderesses:
                    for p in parties_demanderesses:
                        st.write(f"‚Ä¢ {p}")
                else:
                    st.warning("‚ùå Aucun demandeur identifi√©")
                    st.info("üí° Pr√©cisez : 'pour [soci√©t√© X]'")
            
            with col2:
                st.markdown("**‚öñÔ∏è D√©fendeurs (mis en cause) :**")
                if parties_defenderesses:
                    for p in parties_defenderesses:
                        st.write(f"‚Ä¢ {p}")
                else:
                    st.warning("‚ùå Aucun d√©fendeur identifi√©")
                    st.info("üí° Pr√©cisez : 'contre [M. X]'")
            
            with col3:
                st.markdown("**üéØ Infractions :**")
                if infractions_detectees:
                    for inf in infractions_detectees[:3]:  # Limiter l'affichage
                        st.write(f"‚Ä¢ {inf}")
                    if len(infractions_detectees) > 3:
                        st.write(f"‚Ä¢ + {len(infractions_detectees) - 3} autres")
                else:
                    st.info("üìå Infractions standards")
            
            # Options suppl√©mentaires
            with st.expander("‚öôÔ∏è Options de la plainte", expanded=True):
                col1, col2 = st.columns(2)
                
                with col1:
                    # Forcer le type de plainte
                    type_force = st.radio(
                        "Type de plainte",
                        ["Auto-d√©tection", "Plainte simple", "Plainte avec CPC"],
                        index=0 if not is_partie_civile else 2,
                        key="type_plainte_force"
                    )
                    
                    if type_force == "Plainte simple":
                        is_partie_civile = False
                    elif type_force == "Plainte avec CPC":
                        is_partie_civile = True
                
                with col2:
                    # Options de contenu
                    st.markdown("**Options de contenu :**")
                    include_chronologie = st.checkbox("Inclure chronologie d√©taill√©e", value=True)
                    include_prejudices = st.checkbox("D√©tailler les pr√©judices", value=True)
                    include_jurisprudence = st.checkbox("Citer jurisprudences", value=is_partie_civile)
            
            # Cr√©er la demande de r√©daction enrichie
            st.session_state.redaction_request = {
                'type': 'plainte_avec_cpc' if is_partie_civile else 'plainte_simple',
                'demandeurs': parties_demanderesses,
                'defendeurs': parties_defenderesses,
                'infractions': infractions_detectees,
                'reference': reference,
                'modele': modele,
                'query': query,
                'options': {
                    'chronologie': include_chronologie if 'include_chronologie' in locals() else True,
                    'prejudices': include_prejudices if 'include_prejudices' in locals() else True,
                    'jurisprudence': include_jurisprudence if 'include_jurisprudence' in locals() else is_partie_civile
                }
            }
            
            # Bouton de g√©n√©ration manuel
            if st.button("üöÄ G√©n√©rer la plainte", type="primary", key="generate_plainte_btn"):
                # G√©n√©rer la plainte avec toutes les parties
                toutes_parties = parties_demanderesses + parties_defenderesses
                generate_plainte(query, toutes_parties)
            
            # Ou g√©n√©ration automatique si parties identifi√©es
            elif parties_demanderesses or parties_defenderesses:
                toutes_parties = parties_demanderesses + parties_defenderesses
                generate_plainte(query, toutes_parties)
            else:
                st.error("‚ùå Impossible d'identifier les parties dans la requ√™te")
                
                # Formulaire pour saisir manuellement
                with st.form("saisie_parties"):
                    st.markdown("### üìù Saisie manuelle des parties")
                    
                    demandeurs_manuel = st.text_area(
                        "Demandeurs (un par ligne)",
                        placeholder="INTERCONSTRUCTION\nVINCI\nSOGEPROM R√âALISATIONS",
                        height=100
                    )
                    
                    defendeurs_manuel = st.text_area(
                        "D√©fendeurs (un par ligne)",
                        placeholder="M. PERINET\nVP INVEST",
                        height=100
                    )
                    
                    if st.form_submit_button("G√©n√©rer avec ces parties"):
                        if demandeurs_manuel or defendeurs_manuel:
                            parties_demanderesses = [p.strip() for p in demandeurs_manuel.split('\n') if p.strip()]
                            parties_defenderesses = [p.strip() for p in defendeurs_manuel.split('\n') if p.strip()]
                            toutes_parties = parties_demanderesses + parties_defenderesses
                            generate_plainte(query, toutes_parties)
                        else:
                            st.error("Veuillez saisir au moins une partie")
        else:
            # Autres types de r√©daction
            process_redaction_request(query, analyze_query(query))
    
    # PLAIDOIRIE
    elif any(word in query_lower for word in ['plaidoirie', 'plaider', 'audience']):
        st.info("üé§ D√©tection d'une demande de plaidoirie...")
        process_plaidoirie_request(query, analyze_query(query))
    
    # PR√âPARATION CLIENT
    elif any(word in query_lower for word in ['pr√©parer client', 'pr√©paration', 'coaching']):
        st.info("üë• D√©tection d'une demande de pr√©paration client...")
        process_preparation_client_request(query, analyze_query(query))
    
    # IMPORT
    elif any(word in query_lower for word in ['import', 'importer', 'charger', 'upload']):
        st.info("üì• D√©tection d'une demande d'import...")
        process_import_request(query, analyze_query(query))
    
    # EXPORT
    elif any(word in query_lower for word in ['export', 'exporter', 't√©l√©charger', 'download']):
        st.info("üíæ D√©tection d'une demande d'export...")
        process_export_request(query, analyze_query(query))
    
    # EMAIL
    elif any(word in query_lower for word in ['email', 'envoyer', 'mail', 'courrier √©lectronique']):
        st.info("üìß D√©tection d'une demande d'email...")
        process_email_request(query, analyze_query(query))
    
    # ANALYSE
    elif any(word in query_lower for word in ['analyser', 'analyse', '√©tudier', 'examiner']):
        st.info("ü§ñ D√©tection d'une demande d'analyse...")
        process_analysis_request(query, analyze_query(query))
    
    # PI√àCES
    elif any(word in query_lower for word in ['s√©lectionner pi√®ces', 'pi√®ces', 's√©lection']):
        st.info("üìã D√©tection d'une demande de s√©lection de pi√®ces...")
        process_piece_selection_request(query, analyze_query(query))
    
    # BORDEREAU
    elif 'bordereau' in query_lower:
        st.info("üìä D√©tection d'une demande de bordereau...")
        process_bordereau_request(query, analyze_query(query))
    
    # SYNTH√àSE
    elif any(word in query_lower for word in ['synth√®se', 'synth√©tiser', 'r√©sumer']):
        st.info("üìù D√©tection d'une demande de synth√®se...")
        process_synthesis_request(query, analyze_query(query))
    
    # TEMPLATES
    elif any(word in query_lower for word in ['template', 'mod√®le', 'gabarit']):
        st.info("üìÑ D√©tection d'une demande de template...")
        process_template_request(query, analyze_query(query))
    
    # JURISPRUDENCE
    elif any(word in query_lower for word in ['jurisprudence', 'juris', 'd√©cision', 'arr√™t']):
        st.info("‚öñÔ∏è D√©tection d'une demande de jurisprudence...")
        process_jurisprudence_request(query, analyze_query(query))
    
    # CHRONOLOGIE
    elif any(word in query_lower for word in ['chronologie', 'timeline', 'frise']):
        st.info("‚è±Ô∏è D√©tection d'une demande de chronologie...")
        process_timeline_request(query, analyze_query(query))
    
    # CARTOGRAPHIE
    elif any(word in query_lower for word in ['cartographie', 'mapping', 'carte', 'r√©seau']):
        st.info("üó∫Ô∏è D√©tection d'une demande de cartographie...")
        process_mapping_request(query, analyze_query(query))
    
    # COMPARAISON
    elif any(word in query_lower for word in ['comparer', 'comparaison', 'diff√©rences']):
        st.info("üîÑ D√©tection d'une demande de comparaison...")
        process_comparison_request(query, analyze_query(query))
    
    else:
        # Recherche simple par d√©faut
        st.info("üîç Recherche simple...")
        process_search_request(query, analyze_query(query))

# ========================= AFFICHAGE DES R√âSULTATS =========================

def show_unified_results_tab():
    """Affiche tous les types de r√©sultats dans un onglet unifi√©"""
    
    has_results = False
    
    # R√âSULTATS DE R√âDACTION (Priorit√© 1)
    if st.session_state.get('redaction_result'):
        show_redaction_results()
        has_results = True
    
    # R√âSULTATS D'ANALYSE IA (Priorit√© 2)
    elif st.session_state.get('ai_analysis_results'):
        show_ai_analysis_results()
        has_results = True
    
    # R√âSULTATS DE RECHERCHE (Priorit√© 3)
    elif st.session_state.get('search_results'):
        show_search_results()
        has_results = True
    
    # R√âSULTATS DE SYNTH√àSE (Priorit√© 4)
    elif st.session_state.get('synthesis_result'):
        show_synthesis_results()
        has_results = True
    
    # R√âSULTATS DE TIMELINE (Priorit√© 5)
    elif st.session_state.get('timeline_result'):
        show_timeline_results()
        has_results = True
    
    # Message si aucun r√©sultat
    if not has_results:
        st.info("üí° Utilisez la barre de recherche universelle pour commencer")
        
        # Suggestions d'utilisation
        st.markdown("""
        ### üöÄ Exemples de commandes
        
        **Recherche :**
        - `contrats soci√©t√© XYZ`
        - `@affaire_martin documents comptables`
        
        **Analyse :**
        - `analyser les risques @dossier_p√©nal`
        - `identifier les infractions @affaire_corruption`
        
        **R√©daction :**
        - `r√©diger conclusions d√©fense @affaire_martin`
        - `cr√©er plainte contre Vinci, SOGEPROM`
        
        **Gestion :**
        - `importer documents PDF`
        - `exporter analyse format word`
        """)

def show_redaction_results():
    """Affiche les r√©sultats de r√©daction"""
    result = st.session_state.redaction_result
    
    st.markdown("### üìù Document juridique g√©n√©r√©")
    
    # M√©tadonn√©es
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        doc_icons = {
            'conclusions': '‚öñÔ∏è Conclusions',
            'plainte': 'üìã Plainte',
            'courrier': '‚úâÔ∏è Courrier',
            'assignation': 'üìú Assignation'
        }
        st.metric("Type", doc_icons.get(result['type'], 'üìÑ Document'))
    
    with col2:
        st.metric("G√©n√©r√© par", result.get('provider', 'IA'))
    
    with col3:
        word_count = len(result['document'].split())
        st.metric("Mots", f"{word_count:,}")
    
    with col4:
        char_count = len(result['document'])
        st.metric("Caract√®res", f"{char_count:,}")
    
    # Zone d'√©dition principale
    st.markdown("#### üìÑ Contenu du document")
    
    edited_content = st.text_area(
        "Vous pouvez √©diter le document",
        value=result['document'],
        height=600,
        key="edit_redaction_main"
    )
    
    # Barre d'outils
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        if st.button("üîÑ R√©g√©n√©rer", key="regenerate_main"):
            st.session_state.process_query = True
            st.rerun()
    
    with col2:
        if st.button("üìä Statistiques", key="document_stats"):
            show_document_statistics(edited_content)
    
    with col3:
        # Export Word
        st.download_button(
            "üìÑ Word",
            edited_content.encode('utf-8'),
            f"{result['type']}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx",
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )
    
    with col4:
        # Export texte
        st.download_button(
            "üìù Texte",
            edited_content.encode('utf-8'),
            f"{result['type']}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
            "text/plain"
        )
    
    with col5:
        if st.button("üìß Envoyer", key="prepare_email_main"):
            st.session_state.pending_email = {
                'content': edited_content,
                'type': result['type']
            }

def show_ai_analysis_results():
    """Affiche les r√©sultats d'analyse IA avec v√©rification des jurisprudences"""
    results = st.session_state.ai_analysis_results
    
    if 'error' in results:
        st.error(f"‚ùå {results['error']}")
        return
    
    analysis_titles = {
        'risk_analysis': '‚ö†Ô∏è Analyse des risques',
        'compliance': '‚úÖ Analyse de conformit√©',
        'strategy': 'üéØ Analyse strat√©gique',
        'general_analysis': 'ü§ñ Analyse g√©n√©rale',
        'infractions': 'üéØ Analyse infractions √©conomiques'
    }
    
    st.markdown(f"### {analysis_titles.get(results.get('type'), 'ü§ñ Analyse IA')}")
    
    # M√©tadonn√©es
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Documents analys√©s", results.get('document_count', 0))
    with col2:
        st.metric("Type", results.get('type', 'general').replace('_', ' ').title())
    with col3:
        st.metric("G√©n√©r√© le", results.get('timestamp', datetime.now()).strftime('%H:%M'))
    
    # Contenu de l'analyse
    st.markdown("#### üìä R√©sultats de l'analyse")
    
    analysis_content = st.text_area(
        "Analyse d√©taill√©e",
        value=results.get('content', ''),
        height=600,
        key="ai_analysis_content"
    )
    
    # V√©rification des jurisprudences
    if st.checkbox("üîç V√©rifier les jurisprudences cit√©es", key="verify_juris_check"):
        verify_jurisprudences_in_analysis(analysis_content)
    
    # Actions
    col1, col2 = st.columns(2)
    
    with col1:
        st.download_button(
            "üíæ T√©l√©charger",
            analysis_content.encode('utf-8'),
            f"analyse_{results.get('type', 'general')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
            "text/plain"
        )
    
    with col2:
        if st.button("üîÑ Approfondir", key="deepen_analysis"):
            st.session_state.pending_deepen_analysis = True

def show_search_results():
    """Affiche les r√©sultats de recherche"""
    results = st.session_state.search_results
    
    st.markdown(f"### üîç R√©sultats de recherche ({len(results)} documents)")
    
    if not results:
        st.info("Aucun r√©sultat trouv√©")
        return
    
    # Options d'affichage
    col1, col2 = st.columns(2)
    
    with col1:
        sort_by = st.selectbox(
            "Trier par",
            ["Pertinence", "Titre", "Date", "Source"],
            key="sort_search_results"
        )
    
    with col2:
        view_mode = st.radio(
            "Affichage",
            ["Compact", "D√©taill√©"],
            key="view_mode_search",
            horizontal=True
        )
    
    # Afficher les r√©sultats
    for i, result in enumerate(results[:20], 1):  # Limiter √† 20
        with st.container():
            if view_mode == "Compact":
                st.markdown(f"**{i}. {result.get('title', 'Sans titre')}**")
                st.caption(f"Source: {result.get('source', 'N/A')} | Score: {result.get('score', 0):.0%}")
            else:
                st.markdown(f"**{i}. {result.get('title', 'Sans titre')}**")
                st.caption(f"Source: {result.get('source', 'N/A')} | Score: {result.get('score', 0):.0%}")
                
                # Extrait
                content = result.get('content', '')
                if content:
                    st.text_area(
                        "Extrait",
                        value=content[:500] + '...' if len(content) > 500 else content,
                        height=150,
                        key=f"extract_{i}",
                        disabled=True
                    )
            
            st.divider()

def show_synthesis_results():
    """Affiche les r√©sultats de synth√®se"""
    result = st.session_state.synthesis_result
    
    if 'error' in result:
        st.error(f"‚ùå {result['error']}")
        return
    
    st.markdown("### üìù Synth√®se des documents")
    
    # M√©tadonn√©es
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Pi√®ces analys√©es", result.get('piece_count', 0))
    with col2:
        st.metric("Cat√©gories", len(result.get('categories', [])))
    with col3:
        st.metric("G√©n√©r√© le", result.get('timestamp', datetime.now()).strftime('%H:%M'))
    
    # Contenu
    synthesis_content = st.text_area(
        "Contenu de la synth√®se",
        value=result.get('content', ''),
        height=600,
        key="synthesis_content_display"
    )
    
    # Actions
    if st.download_button(
        "üíæ T√©l√©charger",
        synthesis_content.encode('utf-8'),
        f"synthese_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
        "text/plain"
    ):
        st.success("‚úÖ Synth√®se t√©l√©charg√©e")

def show_timeline_results():
    """Affiche les r√©sultats de chronologie"""
    result = st.session_state.timeline_result
    
    st.markdown(f"### ‚è±Ô∏è Chronologie")
    
    # Affichage simple
    for event in result.get('events', []):
        col1, col2 = st.columns([1, 4])
        with col1:
            st.write(f"**{event.get('date', 'N/A')}**")
        with col2:
            st.write(event.get('description', ''))
            if event.get('actors'):
                st.caption(f"üë• {', '.join(event['actors'])}")

# ========================= GESTION DES PI√àCES =========================

def process_piece_selection_request(query: str, analysis: dict):
    """Traite une demande de s√©lection de pi√®ces"""
    
    st.markdown("### üìã S√©lection de pi√®ces")
    
    # Collecter les documents disponibles
    available_docs = collect_available_documents(analysis)
    
    if not available_docs:
        st.warning("‚ö†Ô∏è Aucun document disponible")
        return
    
    # Grouper par cat√©gorie
    categories = group_documents_by_category(available_docs)
    
    # Interface de s√©lection
    selected_pieces = []
    
    for category, docs in categories.items():
        with st.expander(f"üìÅ {category} ({len(docs)} documents)", expanded=True):
            select_all = st.checkbox(f"Tout s√©lectionner - {category}", key=f"select_all_{category}")
            
            for doc in docs:
                is_selected = st.checkbox(
                    f"üìÑ {doc['title']}",
                    value=select_all,
                    key=f"select_doc_{doc['id']}",
                    help=f"Source: {doc.get('source', 'N/A')}"
                )
                
                if is_selected:
                    selected_pieces.append(PieceSelectionnee(
                        numero=len(selected_pieces) + 1,
                        titre=doc['title'],
                        description=doc.get('description', ''),
                        categorie=category,
                        date=doc.get('date'),
                        source=doc.get('source', ''),
                        pertinence=calculate_piece_relevance(doc, analysis)
                    ))
    
    # Sauvegarder la s√©lection
    st.session_state.selected_pieces = selected_pieces
    
    # Actions
    if selected_pieces:
        st.success(f"‚úÖ {len(selected_pieces)} pi√®ces s√©lectionn√©es")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üìä Cr√©er bordereau", key="create_bordereau_from_selection"):
                process_bordereau_request(query, analysis)
        
        with col2:
            if st.button("üìÑ Synth√©tiser", key="synthesize_selection"):
                synthesize_selected_pieces(selected_pieces)
        
        with col3:
            if st.button("üì§ Exporter liste", key="export_piece_list"):
                export_piece_list(selected_pieces)

def process_bordereau_request(query: str, analysis: dict):
    """Traite une demande de cr√©ation de bordereau"""
    
    pieces = st.session_state.get('selected_pieces', [])
    
    if not pieces:
        st.warning("‚ö†Ô∏è Aucune pi√®ce s√©lectionn√©e pour le bordereau")
        return
    
    # Cr√©er le bordereau
    bordereau = create_bordereau(pieces, analysis)
    
    # Afficher
    st.markdown("### üìä Bordereau de communication de pi√®ces")
    
    # En-t√™te
    st.text_area(
        "En-t√™te du bordereau",
        value=bordereau['header'],
        height=150,
        key="bordereau_header"
    )
    
    # Table des pi√®ces
    try:
        df = pd.DataFrame([
            {
                'N¬∞': p.numero,
                'Titre': p.titre,
                'Description': p.description,
                'Cat√©gorie': p.categorie,
                'Date': p.date.strftime('%d/%m/%Y') if p.date else 'N/A'
            }
            for p in pieces
        ])
        
        st.dataframe(df, use_container_width=True)
    except:
        # Affichage sans pandas
        for piece in pieces:
            st.write(f"**{piece.numero}.** {piece.titre}")
            if piece.description:
                st.caption(piece.description)
    
    # Actions
    col1, col2 = st.columns(2)
    
    with col1:
        st.download_button(
            "üíæ T√©l√©charger bordereau",
            create_bordereau_document(bordereau),
            f"bordereau_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx",
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )
    
    with col2:
        if st.button("üìß Envoyer bordereau", key="send_bordereau"):
            st.session_state.pending_email = {
                'content': create_bordereau_document(bordereau),
                'type': 'bordereau'
            }

def synthesize_selected_pieces(pieces: list):
    """Synth√©tise les pi√®ces s√©lectionn√©es"""
    
    try:
        llm_manager = MultiLLMManager()
        
        if not llm_manager.clients:
            return {'error': 'Aucune IA disponible'}
        
        # Construire le contexte
        context = "PI√àCES √Ä SYNTH√âTISER:\n\n"
        
        for piece in pieces[:20]:  # Limiter
            context += f"Pi√®ce {piece.numero}: {piece.titre}\n"
            context += f"Cat√©gorie: {piece.categorie}\n"
            if piece.description:
                context += f"Description: {piece.description}\n"
            context += "\n"
        
        # Prompt
        synthesis_prompt = f"""{context}
Cr√©e une synth√®se structur√©e de ces pi√®ces.
La synth√®se doit inclure:
1. Vue d'ensemble des pi√®ces
2. Points cl√©s par cat√©gorie
3. Chronologie si applicable
4. Points d'attention juridiques
5. Recommandations"""
        
        provider = list(llm_manager.clients.keys())[0]
        response = llm_manager.query_single_llm(
            provider,
            synthesis_prompt,
            "Tu es un expert en analyse de documents juridiques."
        )
        
        if response['success']:
            synthesis_result = {
                'content': response['response'],
                'piece_count': len(pieces),
                'categories': list(set(p.categorie for p in pieces)),
                'timestamp': datetime.now()
            }
            st.session_state.synthesis_result = synthesis_result
            return synthesis_result
        else:
            return {'error': '√âchec de la synth√®se'}
            
    except Exception as e:
        return {'error': f'Erreur synth√®se: {str(e)}'}

# ========================= ANALYSE IA =========================

def process_analysis_request(query: str, analysis: dict):
    """Traite une demande d'analyse IA avec support des infractions"""
    
    # Collecter les documents pertinents
    documents = collect_relevant_documents(analysis)
    
    if not documents:
        st.warning("‚ö†Ô∏è Aucun document trouv√© pour l'analyse")
        return
    
    # Configuration de l'analyse
    st.markdown("### ‚öôÔ∏è Configuration de l'analyse")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Type d'infraction si pertinent
        if any(word in query.lower() for word in ['infraction', 'd√©lit', 'crime']):
            infractions_list = [inf.value for inf in InfractionAffaires]
            
            st.session_state.infraction = st.text_input(
                "Type d'infraction",
                placeholder="Ex: Abus de biens sociaux, corruption, fraude fiscale...",
                key="infraction_input",
                help="Saisissez librement l'infraction"
            )
            
            if not st.session_state.infraction:
                st.info("üí° Suggestions : " + ", ".join(infractions_list[:5]) + "...")
        
        # Client
        st.session_state.client_nom = st.text_input(
            "Nom du client",
            placeholder="Personne physique ou morale",
            key="client_nom_analyse"
        )
    
    with col2:
        # Type d'analyse
        analysis_type = st.selectbox(
            "Type d'analyse",
            ["Analyse g√©n√©rale", "Risques juridiques", "Conformit√©", "Strat√©gie", "Infractions"],
            key="analysis_type_select"
        )
    
    # Lancer l'analyse
    if st.button("üöÄ Lancer l'analyse", type="primary", key="launch_analysis"):
        with st.spinner("ü§ñ Analyse en cours..."):
            if analysis_type == "Risques juridiques":
                results = analyze_legal_risks(documents, query)
            elif analysis_type == "Conformit√©":
                results = analyze_compliance(documents, query)
            elif analysis_type == "Strat√©gie":
                results = analyze_strategy(documents, query)
            elif analysis_type == "Infractions":
                results = analyze_infractions(documents, query)
            else:
                results = perform_general_analysis(documents, query)
        
        # Stocker les r√©sultats
        st.session_state.ai_analysis_results = results
        st.rerun()

def analyze_infractions(documents: List[Dict[str, Any]], query: str) -> dict:
    """Analyse sp√©cifique des infractions √©conomiques"""
    
    llm_manager = MultiLLMManager()
    if not llm_manager.clients:
        return {'error': 'Aucune IA disponible'}
    
    # Construire le prompt sp√©cialis√©
    infraction_prompt = f"""Analyse ces documents pour identifier des infractions √©conomiques.
Client: {st.session_state.get('client_nom', 'Non sp√©cifi√©')}
Infraction suspect√©e: {st.session_state.get('infraction', '√Ä d√©terminer')}
DOCUMENTS:
{chr(10).join([f"- {doc.get('title', 'Sans titre')}: {doc.get('content', '')[:500]}..." for doc in documents[:10]])}
Identifie:
1. INFRACTIONS CARACT√âRIS√âES
   - Qualification juridique pr√©cise
   - Articles du Code p√©nal applicables
   - √âl√©ments constitutifs pr√©sents/absents
   
2. RESPONSABILIT√âS
   - Personnes physiques impliqu√©es
   - Responsabilit√© des personnes morales
   
3. SANCTIONS ENCOURUES
   - Peines principales
   - Peines compl√©mentaires
   - Prescription
4. √âL√âMENTS DE PREUVE
   - Preuves mat√©rielles identifi√©es
   - T√©moignages pertinents
   - Documents cl√©s
5. STRAT√âGIE DE D√âFENSE
   - Points faibles de l'accusation
   - Arguments de d√©fense possibles
   - Jurisprudences favorables"""
    
    try:
        provider = list(llm_manager.clients.keys())[0]
        response = llm_manager.query_single_llm(
            provider,
            infraction_prompt,
            "Tu es un avocat expert en droit p√©nal des affaires."
        )
        
        if response['success']:
            return {
                'type': 'infractions',
                'content': response['response'],
                'document_count': len(documents),
                'timestamp': datetime.now(),
                'query': query,
                'infraction': st.session_state.get('infraction', 'Non sp√©cifi√©e')
            }
    except Exception as e:
        return {'error': f'Erreur analyse infractions: {str(e)}'}

def analyze_legal_risks(documents: List[Dict[str, Any]], query: str) -> dict:
    """Analyse les risques juridiques"""
    
    llm_manager = MultiLLMManager()
    if not llm_manager.clients:
        return {'error': 'Aucune IA disponible'}
    
    # Construire le prompt
    risk_prompt = f"""Analyse les risques juridiques dans ces documents.
DOCUMENTS:
{chr(10).join([f"- {doc.get('title', 'Sans titre')}: {doc.get('content', '')[:500]}..." for doc in documents[:10]])}
QUESTION: {query}
Identifie et √©value:
1. RISQUES P√âNAUX
2. RISQUES CIVILS
3. RISQUES R√âPUTATIONNELS
4. RECOMMANDATIONS
Format structur√© avec √©valuation pr√©cise."""
    
    try:
        provider = list(llm_manager.clients.keys())[0]
        response = llm_manager.query_single_llm(
            provider,
            risk_prompt,
            "Tu es un expert en analyse de risques juridiques."
        )
        
        if response['success']:
            return {
                'type': 'risk_analysis',
                'content': response['response'],
                'document_count': len(documents),
                'timestamp': datetime.now(),
                'query': query
            }
    except Exception as e:
        return {'error': f'Erreur analyse: {str(e)}'}

def analyze_compliance(documents: List[Dict[str, Any]], query: str) -> dict:
    """Analyse de conformit√©"""
    
    llm_manager = MultiLLMManager()
    if not llm_manager.clients:
        return {'error': 'Aucune IA disponible'}
    
    compliance_prompt = f"""Analyse la conformit√© l√©gale et r√©glementaire.
DOCUMENTS:
{chr(10).join([f"- {doc.get('title', 'Sans titre')}: {doc.get('content', '')[:500]}..." for doc in documents[:10]])}
QUESTION: {query}
V√©rifie:
1. CONFORMIT√â L√âGALE
2. CONFORMIT√â R√âGLEMENTAIRE
3. MANQUEMENTS IDENTIFI√âS
4. ACTIONS CORRECTIVES
5. RECOMMANDATIONS"""
    
    try:
        provider = list(llm_manager.clients.keys())[0]
        response = llm_manager.query_single_llm(
            provider,
            compliance_prompt,
            "Tu es un expert en conformit√© juridique."
        )
        
        if response['success']:
            return {
                'type': 'compliance',
                'content': response['response'],
                'document_count': len(documents),
                'timestamp': datetime.now(),
                'query': query
            }
    except Exception as e:
        return {'error': f'Erreur analyse conformit√©: {str(e)}'}

def analyze_strategy(documents: List[Dict[str, Any]], query: str) -> dict:
    """Analyse strat√©gique"""
    
    llm_manager = MultiLLMManager()
    if not llm_manager.clients:
        return {'error': 'Aucune IA disponible'}
    
    strategy_prompt = f"""D√©veloppe une strat√©gie juridique bas√©e sur ces documents.
DOCUMENTS:
{chr(10).join([f"- {doc.get('title', 'Sans titre')}: {doc.get('content', '')[:500]}..." for doc in documents[:10]])}
QUESTION: {query}
√âlabore:
1. ANALYSE DE LA SITUATION
2. OPTIONS STRAT√âGIQUES
3. AVANTAGES/INCONV√âNIENTS
4. STRAT√âGIE RECOMMAND√âE
5. PLAN D'ACTION"""
    
    try:
        provider = list(llm_manager.clients.keys())[0]
        response = llm_manager.query_single_llm(
            provider,
            strategy_prompt,
            "Tu es un strat√®ge juridique exp√©riment√©."
        )
        
        if response['success']:
            return {
                'type': 'strategy',
                'content': response['response'],
                'document_count': len(documents),
                'timestamp': datetime.now(),
                'query': query
            }
    except Exception as e:
        return {'error': f'Erreur analyse strat√©gique: {str(e)}'}

def perform_general_analysis(documents: List[Dict[str, Any]], query: str) -> dict:
    """Analyse g√©n√©rale des documents"""
    
    llm_manager = MultiLLMManager()
    if not llm_manager.clients:
        return {'error': 'Aucune IA disponible'}
    
    general_prompt = f"""Analyse ces documents pour r√©pondre √† la question.
DOCUMENTS:
{chr(10).join([f"- {doc.get('title', 'Sans titre')}: {doc.get('content', '')[:500]}..." for doc in documents[:10]])}
QUESTION: {query}
Fournis une analyse compl√®te et structur√©e."""
    
    try:
        provider = list(llm_manager.clients.keys())[0]
        response = llm_manager.query_single_llm(
            provider,
            general_prompt,
            "Tu es un expert en analyse juridique."
        )
        
        if response['success']:
            return {
                'type': 'general_analysis',
                'content': response['response'],
                'document_count': len(documents),
                'timestamp': datetime.now(),
                'query': query
            }
    except Exception as e:
        return {'error': f'Erreur analyse: {str(e)}'}

def verify_jurisprudences_in_analysis(content: str):
    """V√©rifie les jurisprudences cit√©es dans l'analyse"""
    st.markdown("### üîç V√©rification des jurisprudences cit√©es")
    
    try:
        # Cr√©er le v√©rificateur
        verifier = JurisprudenceVerifier()
        
        # Afficher l'interface de v√©rification
        verification_results = display_jurisprudence_verification(content, verifier)
        
        # Stocker les r√©sultats de v√©rification
        if verification_results:
            st.session_state.jurisprudence_verification = verification_results
            
            # R√©sum√©
            verified_count = sum(1 for r in verification_results if r.status == 'verified')
            total_count = len(verification_results)
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("Jurisprudences v√©rifi√©es", f"{verified_count}/{total_count}")
            
            with col2:
                confidence = (verified_count / total_count * 100) if total_count > 0 else 0
                st.metric("Fiabilit√© des sources", f"{confidence:.0f}%")
        
        return verification_results
    except:
        st.warning("‚ö†Ô∏è V√©rificateur de jurisprudences non disponible")
        return []

# ========================= FONCTIONS DE TRAITEMENT =========================

def process_redaction_request(query: str, analysis: dict):
    """Traite une demande de r√©daction"""
    # Import depuis le module de r√©daction
    st.info("üìù Traitement de la demande de r√©daction...")
    # TODO: Impl√©menter ou importer depuis recherche_redaction

def generate_plainte(query: str, parties: list):
    """G√©n√®re une plainte simple ou avec constitution de partie civile"""
    
    try:
        # D√©bogage
        st.write("üîç G√©n√©ration de la plainte en cours...")
        st.write(f"Requ√™te originale : {query}")
        
        # Initialiser le manager
        llm_manager = MultiLLMManager()
        
        # Debug pour voir les clients disponibles
        llm_manager.debug_status()
        
        if not llm_manager.clients:
            st.error("‚ùå Aucune IA n'est configur√©e")
            st.info("üí° Veuillez configurer au moins une cl√© API dans les variables d'environnement")
            
            # Afficher les instructions d√©taill√©es
            with st.expander("üìã Instructions de configuration"):
                st.markdown("""
                **Sur Hugging Face Spaces :**
                1. Allez dans Settings ‚Üí Variables and secrets
                2. Ajoutez une ou plusieurs de ces cl√©s :
                   - `OPENAI_API_KEY` - Pour GPT-4
                   - `ANTHROPIC_API_KEY` - Pour Claude 3
                   - `GOOGLE_API_KEY` - Pour Gemini
                   - `MISTRAL_API_KEY` - Pour Mistral
                   - `GROQ_API_KEY` - Pour Groq (Mixtral)
                
                **Recommand√© :** Au moins une cl√© parmi OpenAI, Anthropic ou Google
                """)
            return
        
        # Afficher les providers disponibles
        providers = llm_manager.get_available_providers()
        st.success(f"‚úÖ {len(providers)} IA(s) disponible(s) : {', '.join(providers)}")
        
        # D√âTERMINER LE TYPE DE PLAINTE
        query_lower = query.lower()
        is_partie_civile = any(term in query_lower for term in [
            'partie civile', 'constitution de partie civile', 'cpc', 
            'doyen', 'juge d\'instruction', 'instruction'
        ])
        
        type_plainte = 'plainte_avec_cpc' if is_partie_civile else 'plainte_simple'
        destinataire = "Monsieur le Doyen des Juges d'Instruction" if is_partie_civile else "Monsieur le Procureur de la R√©publique"
        
        st.info(f"üìã Type d√©tect√© : {'Plainte avec constitution de partie civile' if is_partie_civile else 'Plainte simple au Procureur'}")
        
        # Analyser la requ√™te pour extraire les informations
        parties_demanderesses = []
        parties_defenderesses = []
        reference = ""
        infractions_mentionnees = []
        
        # Extraction intelligente depuis la requ√™te
        
        # Parties demanderesses (ordre dans la requ√™te)
        demandeurs_patterns = [
            ('interconstruction', 'INTERCONSTRUCTION'),
            ('vinci', 'VINCI'),
            ('sogeprom', 'SOGEPROM R√âALISATIONS'),
            ('demathieu bard', 'DEMATHIEU BARD'),
            ('bouygues', 'BOUYGUES'),
            ('eiffage', 'EIFFAGE'),
            ('spie', 'SPIE BATIGNOLLES'),
            ('leon grosse', 'LEON GROSSE')
        ]
        
        # Parties d√©fenderesses
        defendeurs_patterns = [
            ('perinet', 'M. PERINET'),
            ('p√©rinet', 'M. P√âRINET'),
            ('vp invest', 'VP INVEST'),
            ('perraud', 'M. PERRAUD'),
            ('martin', 'M. MARTIN'),
            ('dupont', 'M. DUPONT')
        ]
        
        # Extraction des parties
        for pattern, nom in demandeurs_patterns:
            if pattern in query_lower:
                parties_demanderesses.append(nom)
        
        for pattern, nom in defendeurs_patterns:
            if pattern in query_lower:
                parties_defenderesses.append(nom)
        
        # Extraction des infractions mentionn√©es
        infractions_patterns = {
            'escroquerie': 'Escroquerie (art. 313-1 Code p√©nal)',
            'abus de confiance': 'Abus de confiance (art. 314-1 Code p√©nal)',
            'abus de biens sociaux': 'Abus de biens sociaux (art. L241-3 et L242-6 Code de commerce)',
            'faux': 'Faux et usage de faux (art. 441-1 Code p√©nal)',
            'corruption': 'Corruption (art. 432-11 et 433-1 Code p√©nal)',
            'trafic d\'influence': 'Trafic d\'influence (art. 432-11 et 433-2 Code p√©nal)',
            'favoritisme': 'Favoritisme (art. 432-14 Code p√©nal)',
            'prise ill√©gale': 'Prise ill√©gale d\'int√©r√™ts (art. 432-12 Code p√©nal)',
            'blanchiment': 'Blanchiment (art. 324-1 Code p√©nal)',
            'fraude fiscale': 'Fraude fiscale (art. 1741 Code g√©n√©ral des imp√¥ts)',
            'travail dissimul√©': 'Travail dissimul√© (art. L8221-3 Code du travail)',
            'marchandage': 'Marchandage (art. L8231-1 Code du travail)',
            'entrave': 'Entrave (art. L2328-1 Code du travail)',
            'banqueroute': 'Banqueroute (art. L654-2 Code de commerce)',
            'recel': 'Recel (art. 321-1 Code p√©nal)'
        }
        
        for pattern, infraction in infractions_patterns.items():
            if pattern in query_lower:
                infractions_mentionnees.append(infraction)
        
        # Si aucune infraction d√©tect√©e, ajouter les plus courantes
        if not infractions_mentionnees:
            infractions_mentionnees = [
                'Escroquerie (art. 313-1 Code p√©nal)',
                'Abus de confiance (art. 314-1 Code p√©nal)',
                'Faux et usage de faux (art. 441-1 Code p√©nal)'
            ]
        
        # R√©f√©rence au mod√®le
        if '26 05 2025' in query or '26/05/2025' in query or '26-05-2025' in query:
            reference = "projet de compl√©ment de plainte du 26/05/2025"
        
        # Afficher les informations extraites
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**üè¢ Demandeurs (victimes) :**")
            for partie in parties_demanderesses:
                st.write(f"‚Ä¢ {partie}")
            
            st.markdown("**üìã Infractions vis√©es :**")
            for infraction in infractions_mentionnees[:5]:  # Limiter l'affichage
                st.write(f"‚Ä¢ {infraction}")
        
        with col2:
            st.markdown("**‚öñÔ∏è D√©fendeurs (mis en cause) :**")
            for partie in parties_defenderesses:
                st.write(f"‚Ä¢ {partie}")
            
            if reference:
                st.info(f"üìÑ Mod√®le : {reference}")
        
        # CONSTRUIRE LE PROMPT SELON LE TYPE DE PLAINTE
        if is_partie_civile:
            # Prompt pour plainte avec constitution de partie civile
            plainte_prompt = f"""Tu es un avocat p√©naliste expert en droit p√©nal des affaires avec 25 ans d'exp√©rience. Tu ma√Ætrises particuli√®rement les affaires complexes de criminalit√© √©conomique et financi√®re.

MISSION : R√©diger une plainte avec constitution de partie civile EXHAUSTIVE et PERCUTANTE pour un dossier complexe.

CONTEXTE DE LA REQU√äTE :
{query}

PARTIES IDENTIFI√âES :
- Demandeurs (victimes) : {', '.join(parties_demanderesses) if parties_demanderesses else '[√Ä COMPL√âTER]'}
- D√©fendeurs (mis en cause) : {', '.join(parties_defenderesses) if parties_defenderesses else '[√Ä IDENTIFIER dans les faits]'}
- R√©f√©rence : {reference if reference else 'Dossier complexe de criminalit√© √©conomique'}

INFRACTIONS √Ä EXAMINER :
{chr(10).join(f'- {inf}' for inf in infractions_mentionnees)}

INSTRUCTIONS POUR UNE PLAINTE EXHAUSTIVE :

1. **EN-T√äTE FORMEL**
   {destinataire}
   Tribunal judiciaire de [D√âTERMINER selon le si√®ge social]
   [Adresse compl√®te]
   
   Date : [Date du jour]
   
   OBJET : PLAINTE AVEC CONSTITUTION DE PARTIE CIVILE
   
   R√©f√©rences : {reference if reference else 'Votre r√©f. : / Notre r√©f. : '}

2. **IDENTIFICATION COMPL√àTE DES PARTIES**
   
   POUR :
   {chr(10).join(f'   - {p}, soci√©t√© [FORME JURIDIQUE √Ä PR√âCISER - SA/SARL/SAS], au capital de [MONTANT] euros, immatricul√©e au RCS de [VILLE] sous le num√©ro [NUM√âRO], dont le si√®ge social est situ√© [ADRESSE COMPL√àTE], repr√©sent√©e par [PR√âSIDENT/G√âRANT], d√ªment habilit√©' for p in parties_demanderesses)}
   
   Ayant pour conseil :
   Ma√Ætre [NOM], Avocat au Barreau de [VILLE]
   [Adresse compl√®te du cabinet]
   T√©l : [NUM√âRO] - Email : [EMAIL]
   
   CONTRE :
   {chr(10).join(f'   - {p}, [COMPL√âTER : n√© le XX/XX/XXXX √† VILLE si personne physique OU forme juridique si soci√©t√©], demeurant/si√®ge social [ADRESSE]' for p in parties_defenderesses)}
   
   ET CONTRE :
   - Toute autre personne que l'instruction r√©v√©lerait comme auteur, coauteur ou complice des faits d√©nonc√©s

3. **EXPOS√â EXHAUSTIF DES FAITS** (PARTIE CRUCIALE - MINIMUM 3000 MOTS)
   
   A. CONTEXTE G√âN√âRAL ET HISTORIQUE DES RELATIONS
      - Gen√®se du projet/de la relation d'affaires
      - Chronologie d√©taill√©e des √©v√©nements
      - Acteurs impliqu√©s et leurs r√¥les respectifs
      - Documents contractuels de r√©f√©rence
   
   B. M√âCANISME FRAUDULEUX D√âTAILL√â
      - Description pr√©cise du montage frauduleux
      - Modus operandi des mis en cause
      - Flux financiers suspects (avec montants)
      - Documents falsifi√©s ou manipul√©s
      - T√©moignages et preuves mat√©rielles
   
   C. D√âCOUVERTE DE LA FRAUDE
      - Circonstances de la d√©couverte
      - Premiers indices et soup√ßons
      - Investigations men√©es
      - Confrontations √©ventuelles
   
   D. AGGRAVATION DU PR√âJUDICE
      - Man≈ìuvres dilatoires
      - Dissimulation d'actifs
      - Tentatives d'intimidation
      - Destruction de preuves

4. **QUALIFICATION JURIDIQUE APPROFONDIE**
   
   Pour CHAQUE infraction, d√©velopper :
   
   A. L'√âL√âMENT MAT√âRIEL
      - Actes pr√©cis constituant l'infraction
      - Preuves mat√©rielles (documents, emails, enregistrements)
      - T√©moignages corroborants
      - Expertises √©ventuelles
   
   B. L'√âL√âMENT INTENTIONNEL
      - Conscience de l'ill√©galit√©
      - Volont√© de nuire
      - Pr√©m√©ditation
      - Mobile (enrichissement, vengeance, etc.)
   
   C. LE LIEN DE CAUSALIT√â
      - Lien direct entre les actes et le pr√©judice
      - Absence de cause √©trang√®re
   
   D. CIRCONSTANCES AGGRAVANTES
      - Bande organis√©e
      - Abus de fonction
      - Vuln√©rabilit√© de la victime
      - Montant du pr√©judice

5. **√âVALUATION D√âTAILL√âE DES PR√âJUDICES**
   
   Pour CHAQUE soci√©t√© demanderesse :
   
   A. PR√âJUDICE FINANCIER DIRECT
      - D√©tournements : [MONTANT] ‚Ç¨
      - Surfacturations : [MONTANT] ‚Ç¨
      - Manque √† gagner : [MONTANT] ‚Ç¨
      - Frais suppl√©mentaires : [MONTANT] ‚Ç¨
      SOUS-TOTAL : [MONTANT] ‚Ç¨ HT
   
   B. PR√âJUDICE FINANCIER INDIRECT
      - Perte de march√©s : [MONTANT] ‚Ç¨
      - Co√ªts de restructuration : [MONTANT] ‚Ç¨
      - Frais d'expertise : [MONTANT] ‚Ç¨
      - Frais de justice : [MONTANT] ‚Ç¨
      SOUS-TOTAL : [MONTANT] ‚Ç¨ HT
   
   C. PR√âJUDICE MORAL ET COMMERCIAL
      - Atteinte √† la r√©putation
      - Perte de confiance des partenaires
      - D√©sorganisation de l'entreprise
      - Souffrance morale des dirigeants
      √âVALUATION : [MONTANT] ‚Ç¨ (provisoire)
   
   TOTAL G√âN√âRAL : [MONTANT] ‚Ç¨ (sous r√©serve d'augmentation)

6. **CONSTITUTION DE PARTIE CIVILE**
   
   Les soci√©t√©s demanderesses d√©clarent express√©ment se constituer partie civile dans la pr√©sente proc√©dure et :
   
   - Consignent la somme de [3000 √† 15000] euros √† titre de consignation
   - Se r√©servent le droit de solliciter tous dommages-int√©r√™ts compl√©mentaires
   - Demandent la condamnation solidaire des mis en cause
   - Sollicitent l'ex√©cution provisoire de la d√©cision √† intervenir

7. **DEMANDES D'ACTES D'INSTRUCTION**
   
   Les parties civiles sollicitent :
   - Auditions des mis en cause et t√©moins
   - Perquisitions aux si√®ges sociaux et domiciles
   - Saisies conservatoires sur les biens
   - Expertises comptables et financi√®res
   - Exploitation des donn√©es informatiques
   - Commissions rogatoires internationales si n√©cessaire
   - Interceptions t√©l√©phoniques si justifi√©es

8. **PAR CES MOTIFS**
   
   Les soci√©t√©s demanderesses demandent qu'il plaise √† Monsieur le Doyen des Juges d'Instruction de :
   
   - RECEVOIR leur plainte avec constitution de partie civile
   - ORDONNER l'ouverture d'une information judiciaire
   - PROC√âDER √† tous actes utiles √† la manifestation de la v√©rit√©
   - TRANSMETTRE le dossier au Parquet pour r√©quisitions
   - D√âLIVRER r√©c√©piss√© de la pr√©sente plainte

9. **BORDEREAU DE PI√àCES D√âTAILL√â**
   
   [Liste num√©rot√©e de 1 √† XX avec description pr√©cise de chaque pi√®ce]

10. **SOUS TOUTES R√âSERVES**
    
    Notamment de :
    - Compl√©ter et pr√©ciser les pr√©sentes
    - Produire toutes pi√®ces nouvelles
    - Se constituer partie civile contre toute autre personne
    - Modifier la qualification des faits
    - Majorer l'√©valuation des pr√©judices

SIGNATURE
[Nom et qualit√© du signataire]

IMPORTANT : Cette plainte doit √™tre EXHAUSTIVE (minimum 8000 mots), PR√âCISE (dates, montants, r√©f√©rences), PERCUTANTE (d√©monstration implacable) et IRR√âFUTABLE (preuves solides)."""
        
        else:
            # Prompt pour plainte simple au Procureur
            plainte_prompt = f"""Tu es un avocat p√©naliste expert en droit p√©nal des affaires. Tu dois r√©diger une plainte simple mais compl√®te et professionnelle.

CONTEXTE : {query}

PARTIES :
- Plaignants : {', '.join(parties_demanderesses) if parties_demanderesses else '[√Ä IDENTIFIER]'}
- Mis en cause : {', '.join(parties_defenderesses) if parties_defenderesses else '[√Ä IDENTIFIER]'}

STRUCTURE DE LA PLAINTE SIMPLE :

1. **EN-T√äTE**
   Monsieur le Procureur de la R√©publique
   Tribunal judiciaire de [VILLE]
   [Adresse]
   
   [Lieu], le [Date]
   
   OBJET : Plainte
   
   Lettre recommand√©e avec AR

2. **IDENTIT√â DU PLAIGNANT**
   Je soussign√©(e) / Nous soussignons :
   [Identit√© compl√®te avec adresse]

3. **EXPOS√â DES FAITS**
   D√©velopper de mani√®re claire et chronologique :
   - Contexte
   - Faits reproch√©s
   - Pr√©judice subi
   - Preuves disponibles

4. **QUALIFICATION JURIDIQUE**
   Les faits expos√©s sont susceptibles de recevoir les qualifications suivantes :
   {chr(10).join(f'- {inf}' for inf in infractions_mentionnees)}

5. **PR√âJUDICE**
   Description et √©valuation du pr√©judice subi

6. **DEMANDES**
   Je demande/Nous demandons :
   - L'ouverture d'une enqu√™te
   - L'audition des personnes mises en cause
   - Toutes investigations utiles
   - L'engagement de poursuites

7. **PI√àCES JOINTES**
   Liste des pi√®ces

8. **FORMULE FINALE**
   Je me tiens/Nous nous tenons √† votre disposition...
   
   Signature

R√©dige une plainte COMPL√àTE (minimum 3000 mots) et PROFESSIONNELLE."""
        
        # S√©lectionner le meilleur provider disponible
        preferred_providers = ['anthropic', 'openai', 'google', 'mistral', 'groq']
        selected_provider = None
        
        for pref in preferred_providers:
            if pref in providers:
                selected_provider = pref
                break
        
        if not selected_provider:
            selected_provider = providers[0]
        
        st.info(f"ü§ñ Utilisation de : {selected_provider}")
        
        # Options de g√©n√©ration avanc√©es
        with st.expander("‚öôÔ∏è Options avanc√©es", expanded=False):
            col1, col2 = st.columns(2)
            with col1:
                temperature = st.slider(
                    "Cr√©ativit√©",
                    min_value=0.0,
                    max_value=1.0,
                    value=0.3,
                    step=0.1,
                    help="Plus bas = plus factuel, plus haut = plus cr√©atif"
                )
            with col2:
                max_tokens = st.number_input(
                    "Longueur maximale",
                    min_value=2000,
                    max_value=10000,
                    value=8000,
                    step=1000,
                    help="Nombre de tokens maximum pour la r√©ponse"
                )
        
        # G√©n√©rer la plainte
        with st.spinner(f"‚öñÔ∏è G√©n√©ration de la {'plainte avec constitution de partie civile' if is_partie_civile else 'plainte simple'} via {selected_provider}..."):
            response = llm_manager.query_single_llm(
                selected_provider,
                plainte_prompt,
                "Tu es Ma√Ætre Jean-Michel Durand, avocat au Barreau de Paris depuis 25 ans, sp√©cialis√© en droit p√©nal des affaires et criminalit√© en col blanc. Tu as plaid√© dans les plus grandes affaires de corruption et d'escroquerie. Tu r√©diges des plaintes qui ont men√© √† de nombreuses condamnations.",
                temperature=temperature if 'temperature' in locals() else 0.3,
                max_tokens=max_tokens if 'max_tokens' in locals() else 8000
            )
        
        if response['success']:
            # Enrichir la r√©ponse si n√©cessaire
            document_final = response['response']
            
            # V√©rifier que le document contient les √©l√©ments essentiels
            if is_partie_civile:
                elements_requis = [
                    "POUR :", "CONTRE :", "EXPOS√â", "FAITS", 
                    "QUALIFICATION JURIDIQUE", "PR√âJUDICES", 
                    "CONSTITUTION DE PARTIE CIVILE", "DEMANDES"
                ]
            else:
                elements_requis = [
                    "Monsieur le Procureur", "EXPOS√â DES FAITS", 
                    "QUALIFICATION", "DEMANDES"
                ]
            
            missing_elements = [elem for elem in elements_requis if elem.upper() not in document_final.upper()]
            
            if missing_elements:
                st.warning(f"‚ö†Ô∏è √âl√©ments manquants d√©tect√©s : {', '.join(missing_elements)}")
                st.info("üí° Vous pouvez √©diter le document pour ajouter les sections manquantes")
            
            # Analyse de la qualit√©
            word_count = len(document_final.split())
            char_count = len(document_final)
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Mots", f"{word_count:,}")
                if word_count < 3000:
                    st.warning("‚ö†Ô∏è Document un peu court pour un dossier complexe")
            with col2:
                st.metric("Caract√®res", f"{char_count:,}")
            with col3:
                st.metric("Pages estim√©es", f"~{word_count // 250}")
            
            # Sauvegarder le r√©sultat
            st.session_state.redaction_result = {
                'type': type_plainte,
                'document': document_final,
                'provider': selected_provider,
                'timestamp': datetime.now(),
                'metadata': {
                    'demandeurs': parties_demanderesses,
                    'defendeurs': parties_defenderesses,
                    'reference': reference,
                    'infractions': infractions_mentionnees,
                    'requete_originale': query,
                    'generation_time': response.get('elapsed_time', 0),
                    'word_count': word_count,
                    'destinataire': destinataire
                }
            }
            
            st.success(f"‚úÖ {'Plainte avec constitution de partie civile' if is_partie_civile else 'Plainte simple'} g√©n√©r√©e avec succ√®s !")
            
            # Proposer des actions suppl√©mentaires
            st.markdown("### üéØ Actions disponibles")
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                if st.button("üîÑ R√©g√©n√©rer", key="regen_same"):
                    st.session_state.force_regenerate = True
                    st.rerun()
            
            with col2:
                if st.button("üìà Version plus d√©taill√©e", key="more_detailed"):
                    st.session_state.request_detailed = True
                    st.rerun()
            
            with col3:
                if st.button("üîÄ Autre IA", key="try_other_ai"):
                    other_providers = [p for p in providers if p != selected_provider]
                    if other_providers:
                        st.session_state.next_provider = other_providers[0]
                        st.rerun()
            
            with col4:
                if st.button("üìä Comparer les IA", key="compare_all"):
                    st.session_state.compare_all_providers = True
                    st.rerun()
            
            # Suggestions d'am√©lioration
            with st.expander("üí° Suggestions d'am√©lioration", expanded=False):
                st.markdown("""
                **Pour enrichir votre plainte :**
                
                1. **Ajoutez des d√©tails factuels** :
                   - Dates pr√©cises des faits
                   - Montants exacts des pr√©judices
                   - Noms complets et fonctions des personnes
                   - R√©f√©rences des contrats ou factures
                
                2. **Renforcez les preuves** :
                   - Emails et correspondances
                   - Rapports d'expertise
                   - T√©moignages √©crits
                   - Documents comptables
                
                3. **Pr√©cisez les infractions** :
                   - Articles de loi exacts
                   - Jurisprudences applicables
                   - Circonstances aggravantes
                
                4. **Compl√©tez les demandes** :
                   - Mesures conservatoires
                   - Expertises judiciaires
                   - Auditions sp√©cifiques
                """)
            
        else:
            st.error(f"‚ùå Erreur lors de la g√©n√©ration : {response.get('error', 'Erreur inconnue')}")
            
            # Proposer des alternatives
            if len(providers) > 1:
                st.info("üí° Essayez avec un autre provider disponible")
                for provider in providers:
                    if st.button(f"Essayer avec {provider}", key=f"try_{provider}"):
                        st.session_state.next_provider = provider
                        st.rerun()
            
    except Exception as e:
        st.error(f"‚ùå Erreur inattendue : {str(e)}")
        with st.expander("üîç D√©tails techniques"):
            import traceback
            st.code(traceback.format_exc())

def process_plaidoirie_request(query: str, analysis: dict):
    """Traite une demande de plaidoirie"""
    st.info("üé§ Pr√©paration de plaidoirie...")
    # TODO: Impl√©menter

def process_preparation_client_request(query: str, analysis: dict):
    """Traite une demande de pr√©paration client"""
    st.info("üë• Pr√©paration du client...")
    # TODO: Impl√©menter

def process_import_request(query: str, analysis: dict):
    """Traite une demande d'import"""
    st.info("üì• Import de documents...")
    # TODO: Impl√©menter

def process_export_request(query: str, analysis: dict):
    """Traite une demande d'export"""
    st.info("üíæ Export en cours...")
    # TODO: Impl√©menter

def process_email_request(query: str, analysis: dict):
    """Traite une demande d'email"""
    st.info("üìß Pr√©paration de l'email...")
    # TODO: Impl√©menter

def process_synthesis_request(query: str, analysis: dict):
    """Traite une demande de synth√®se"""
    
    # D√©terminer la source
    if st.session_state.get('selected_pieces'):
        content_to_synthesize = synthesize_selected_pieces(st.session_state.selected_pieces)
    elif analysis.get('reference'):
        docs = search_by_reference(f"@{analysis['reference']}")
        pieces = []
        for i, doc in enumerate(docs):
            pieces.append(PieceSelectionnee(
                numero=i + 1,
                titre=doc.get('title', 'Sans titre'),
                description=doc.get('content', '')[:200] + '...' if doc.get('content') else '',
                categorie=determine_document_category(doc),
                source=doc.get('source', '')
            ))
        content_to_synthesize = synthesize_selected_pieces(pieces)
    else:
        st.warning("‚ö†Ô∏è Aucun contenu √† synth√©tiser")
        return

def process_template_request(query: str, analysis: dict):
    """Traite une demande de template"""
    st.info("üìÑ Gestion des templates...")
    
    # Afficher les templates disponibles
    st.markdown("### üìÑ Templates disponibles")
    
    for template_id, template in DOCUMENT_TEMPLATES.items():
        with st.expander(f"üìÑ {template['name']}", expanded=False):
            st.markdown("**Structure:**")
            for element in template['structure']:
                st.write(f"- {element}")
            st.markdown(f"**Style:** {REDACTION_STYLES[template['style']]['description']}")
            
            if st.button(f"Utiliser ce template", key=f"use_template_{template_id}"):
                st.session_state.selected_template = template_id
                st.info(f"‚úÖ Template '{template['name']}' s√©lectionn√©")

def process_jurisprudence_request(query: str, analysis: dict):
    """Traite une demande de jurisprudence"""
    st.info("‚öñÔ∏è Recherche de jurisprudence...")
    # TODO: Impl√©menter

def process_timeline_request(query: str, analysis: dict):
    """Traite une demande de chronologie"""
    st.info("‚è±Ô∏è Cr√©ation de la chronologie...")
    # TODO: Impl√©menter

def process_mapping_request(query: str, analysis: dict):
    """Traite une demande de cartographie"""
    st.info("üó∫Ô∏è Cr√©ation de la cartographie...")
    # TODO: Impl√©menter

def process_comparison_request(query: str, analysis: dict):
    """Traite une demande de comparaison"""
    st.info("üîÑ Comparaison en cours...")
    # TODO: Impl√©menter

def process_search_request(query: str, analysis: dict):
    """Traite une demande de recherche simple"""
    
    results = []
    
    # Recherche selon le contexte
    if analysis.get('reference'):
        results = search_by_reference(f"@{analysis['reference']}")
    else:
        results = perform_search(query)
    
    # Stocker les r√©sultats
    st.session_state.search_results = results
    
    if not results:
        st.warning("‚ö†Ô∏è Aucun r√©sultat trouv√©")
    else:
        st.success(f"‚úÖ {len(results)} r√©sultats trouv√©s")

# ========================= FONCTIONS HELPER =========================

def analyze_query(query: str) -> dict:
    """Analyse une requ√™te pour extraire les informations cl√©s"""
    
    analysis = {
        'original_query': query,
        'reference': None,
        'subject_matter': None,
        'document_type': None,
        'action': None
    }
    
    # Extraire la r√©f√©rence @
    ref_match = re.search(r'@(\w+)', query)
    if ref_match:
        analysis['reference'] = ref_match.group(1)
    
    # D√©tecter le type de document
    query_lower = query.lower()
    for doc_type in ['conclusions', 'plainte', 'courrier', 'assignation', 'mise en demeure']:
        if doc_type in query_lower:
            analysis['document_type'] = doc_type
            break
    
    # D√©tecter l'action principale
    actions = {
        'r√©diger': 'redaction',
        'analyser': 'analysis',
        'rechercher': 'search',
        'comparer': 'comparison',
        'cr√©er': 'creation'
    }
    
    for keyword, action in actions.items():
        if keyword in query_lower:
            analysis['action'] = action
            break
    
    # Extraire le sujet
    # Simplification - en production, utiliser NLP
    if 'abus' in query_lower and 'biens' in query_lower:
        analysis['subject_matter'] = 'abus de biens sociaux'
    elif 'corruption' in query_lower:
        analysis['subject_matter'] = 'corruption'
    elif 'fraude' in query_lower:
        analysis['subject_matter'] = 'fraude'
    
    return analysis

def collect_relevant_documents(analysis: dict) -> List[Dict[str, Any]]:
    """Collecte les documents pertinents selon l'analyse"""
    
    documents = []
    
    # Documents locaux
    for doc_id, doc in st.session_state.get('azure_documents', {}).items():
        documents.append({
            'id': doc_id,
            'title': doc.title,
            'content': doc.content,
            'source': doc.source,
            'metadata': doc.metadata
        })
    
    # Filtrer par r√©f√©rence si pr√©sente
    if analysis.get('reference'):
        ref_lower = analysis['reference'].lower()
        documents = [d for d in documents if ref_lower in d['title'].lower() or ref_lower in d.get('source', '').lower()]
    
    return documents

def collect_available_documents(analysis: dict) -> list:
    """Collecte tous les documents disponibles"""
    documents = []
    
    # Documents locaux
    for doc_id, doc in st.session_state.get('azure_documents', {}).items():
        documents.append({
            'id': doc_id,
            'title': doc.title,
            'content': doc.content,
            'source': doc.source,
            'metadata': doc.metadata
        })
    
    return documents

def group_documents_by_category(documents: list) -> dict:
    """Groupe les documents par cat√©gorie"""
    categories = defaultdict(list)
    
    for doc in documents:
        category = determine_document_category(doc)
        categories[category].append(doc)
    
    return dict(categories)

def determine_document_category(doc: dict) -> str:
    """D√©termine la cat√©gorie d'un document"""
    title_lower = doc.get('title', '').lower()
    content_lower = doc.get('content', '')[:500].lower()
    
    category_patterns = {
        'Proc√©dure': ['plainte', 'proc√®s-verbal', 'audition'],
        'Expertise': ['expertise', 'expert', 'rapport technique'],
        'Comptabilit√©': ['bilan', 'compte', 'facture'],
        'Contrats': ['contrat', 'convention', 'accord'],
        'Correspondance': ['courrier', 'email', 'lettre']
    }
    
    for category, keywords in category_patterns.items():
        if any(kw in title_lower or kw in content_lower for kw in keywords):
            return category
    
    return 'Autres'

def calculate_piece_relevance(doc: dict, analysis: dict) -> float:
    """Calcule la pertinence d'une pi√®ce"""
    score = 0.5
    
    if analysis.get('subject_matter'):
        if analysis['subject_matter'] in doc.get('content', '').lower():
            score += 0.3
    
    if analysis.get('reference'):
        if analysis['reference'] in doc.get('title', '').lower():
            score += 0.2
    
    return min(score, 1.0)

def create_bordereau(pieces: list, analysis: dict) -> dict:
    """Cr√©e un bordereau structur√©"""
    
    bordereau = {
        'header': f"""BORDEREAU DE COMMUNICATION DE PI√àCES
AFFAIRE : {analysis.get('reference', 'N/A').upper()}
DATE : {datetime.now().strftime('%d/%m/%Y')}
NOMBRE DE PI√àCES : {len(pieces)}""",
        'pieces': pieces,
        'footer': f"""Je certifie que les pi√®ces communiqu√©es sont conformes aux originaux.
Fait le {datetime.now().strftime('%d/%m/%Y')}""",
        'metadata': {
            'created_at': datetime.now(),
            'piece_count': len(pieces),
            'reference': analysis.get('reference')
        }
    }
    
    return bordereau

def create_bordereau_document(bordereau: dict) -> bytes:
    """Cr√©e le document du bordereau"""
    content = bordereau['header'] + '\n\n'
    
    for piece in bordereau['pieces']:
        content += f"{piece.numero}. {piece.titre}\n"
        if piece.description:
            content += f"   {piece.description}\n"
        content += f"   Cat√©gorie: {piece.categorie}\n"
        if piece.date:
            content += f"   Date: {piece.date.strftime('%d/%m/%Y')}\n"
        content += "\n"
    
    content += bordereau['footer']
    
    return content.encode('utf-8')

def export_piece_list(pieces: list):
    """Exporte la liste des pi√®ces"""
    content = "LISTE DES PI√àCES S√âLECTIONN√âES\n"
    content += f"Date : {datetime.now().strftime('%d/%m/%Y %H:%M')}\n"
    content += f"Nombre de pi√®ces : {len(pieces)}\n\n"
    
    # Grouper par cat√©gorie
    by_category = defaultdict(list)
    for piece in pieces:
        by_category[piece.categorie].append(piece)
    
    for category, cat_pieces in by_category.items():
        content += f"\n{category.upper()} ({len(cat_pieces)} pi√®ces)\n"
        content += "-" * 50 + "\n"
        
        for piece in cat_pieces:
            content += f"{piece.numero}. {piece.titre}\n"
            if piece.description:
                content += f"   {piece.description}\n"
            content += "\n"
    
    # T√©l√©charger
    st.download_button(
        "üíæ T√©l√©charger la liste",
        content.encode('utf-8'),
        f"liste_pieces_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
        "text/plain"
    )

def search_by_reference(reference: str) -> list:
    """Recherche par r√©f√©rence @"""
    results = []
    ref_clean = reference.replace('@', '').strip().lower()
    
    for doc_id, doc in st.session_state.get('azure_documents', {}).items():
        if ref_clean in doc.title.lower() or ref_clean in doc.source.lower():
            results.append({
                'id': doc_id,
                'title': doc.title,
                'content': doc.content,
                'source': doc.source
            })
    
    return results

def perform_search(query: str) -> List[Dict[str, Any]]:
    """Effectue une recherche g√©n√©rale"""
    
    results = []
    query_lower = query.lower()
    query_words = query_lower.split()
    
    # Recherche locale
    for doc_id, doc in st.session_state.get('azure_documents', {}).items():
        score = 0
        content_lower = doc.content.lower()
        title_lower = doc.title.lower()
        
        for word in query_words:
            if word in title_lower:
                score += 2
            if word in content_lower:
                score += 1
        
        if score > 0:
            results.append({
                'id': doc_id,
                'title': doc.title,
                'content': doc.content,
                'source': doc.source,
                'score': score / len(query_words)
            })
    
    # Recherche Azure si disponible
    try:
        search_manager = st.session_state.get('azure_search_manager')
        if search_manager and hasattr(search_manager, 'search'):
            azure_results = search_manager.search(query)
            results.extend(azure_results)
    except:
        pass
    
    return sorted(results, key=lambda x: x.get('score', 0), reverse=True)[:50]

def clear_universal_state():
    """Efface l'√©tat de l'interface universelle"""
    keys_to_clear = [
        'universal_query', 'last_universal_query', 'current_analysis',
        'redaction_result', 'timeline_result', 'mapping_result',
        'comparison_result', 'synthesis_result', 'ai_analysis_results',
        'search_results', 'selected_pieces', 'import_files',
        'plaidoirie_result', 'preparation_client_result'
    ]
    
    for key in keys_to_clear:
        if key in st.session_state:
            del st.session_state[key]
    
    st.success("‚úÖ Interface r√©initialis√©e")
    st.rerun()

def save_current_work():
    """Sauvegarde le travail actuel"""
    work_data = {
        'timestamp': datetime.now().isoformat(),
        'query': st.session_state.get('universal_query', ''),
        'analysis': st.session_state.get('current_analysis', {}),
        'results': {}
    }
    
    # Collecter tous les r√©sultats
    result_keys = [
        'redaction_result', 'timeline_result', 'mapping_result',
        'comparison_result', 'synthesis_result', 'ai_analysis_results',
        'search_results', 'plaidoirie_result', 'preparation_client_result'
    ]
    
    for key in result_keys:
        if key in st.session_state:
            work_data['results'][key] = st.session_state[key]
    
    # Sauvegarder
    import json
    
    json_str = json.dumps(work_data, indent=2, ensure_ascii=False, default=str)
    
    st.download_button(
        "üíæ T√©l√©charger la sauvegarde",
        json_str,
        f"sauvegarde_travail_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
        "application/json",
        key="download_work_save"
    )

def show_work_statistics():
    """Affiche les statistiques du travail en cours"""
    st.info("üìä Statistiques du travail en cours")
    
    # Compter les r√©sultats
    stats = {
        'Documents': len(st.session_state.get('azure_documents', {})),
        'Pi√®ces s√©lectionn√©es': len(st.session_state.get('selected_pieces', [])),
        'Analyses': 1 if st.session_state.get('ai_analysis_results') else 0,
        'R√©dactions': 1 if st.session_state.get('redaction_result') else 0
    }
    
    cols = st.columns(len(stats))
    for i, (label, value) in enumerate(stats.items()):
        with cols[i]:
            st.metric(label, value)

def share_current_work():
    """Partage le travail actuel"""
    st.info("üîó Fonctionnalit√© de partage")
    
    # Pour l'instant, proposer l'export
    save_current_work()

def show_document_statistics(content: str):
    """Affiche les statistiques d'un document"""
    
    # Calculs
    words = content.split()
    sentences = content.split('.')
    paragraphs = content.split('\n\n')
    
    # R√©f√©rences
    law_refs = len(re.findall(r'article\s+[LR]?\s*\d+', content, re.IGNORECASE))
    
    # Affichage
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Mots", f"{len(words):,}")
        st.metric("Phrases", f"{len(sentences):,}")
    
    with col2:
        st.metric("Paragraphes", len(paragraphs))
        st.metric("Mots/phrase", f"{len(words) / max(len(sentences), 1):.1f}")
    
    with col3:
        st.metric("Articles cit√©s", law_refs)
        avg_word_length = sum(len(w) for w in words) / max(len(words), 1)
        st.metric("Longueur moy.", f"{avg_word_length:.1f} car/mot")

# ========================= FIN DU MODULE =========================

# ========================= PAGE PRINCIPALE =========================

def show_page():
    """Fonction principale de la page recherche universelle"""
    
    st.markdown("## üîç Recherche Universelle")
    
    # Barre de recherche principale
    col1, col2 = st.columns([5, 1])
    
    with col1:
        query = st.text_input(
            "Entrez votre commande ou recherche",
            placeholder="Ex: r√©diger conclusions @affaire_martin, analyser risques, importer documents...",
            key="universal_query",
            help="Utilisez @ pour r√©f√©rencer une affaire sp√©cifique"
        )
    
    with col2:
        search_button = st.button("üîç Rechercher", key="search_button", use_container_width=True)
    
    # Suggestions de commandes
    with st.expander("üí° Exemples de commandes", expanded=False):
        st.markdown("""
        **Recherche :**
        - `contrats soci√©t√© XYZ`
        - `@affaire_martin documents comptables`
        
        **Analyse :**
        - `analyser les risques @dossier_p√©nal`
        - `identifier les infractions @affaire_corruption`
        
        **R√©daction :**
        - `r√©diger conclusions d√©fense @affaire_martin abus biens sociaux`
        - `cr√©er plainte avec constitution partie civile escroquerie`
        - `r√©diger plainte contre Vinci, SOGEPROM @projet_26_05_2025`
        
        **Plaidoirie & Pr√©paration :**
        - `pr√©parer plaidoirie @affaire_martin audience correctionnelle`
        - `pr√©parer client interrogatoire @dossier_fraude`
        
        **Visualisations :**
        - `chronologie des faits @affaire_martin`
        - `cartographie des soci√©t√©s @groupe_abc`
        - `comparer les auditions @t√©moins`
        
        **Gestion :**
        - `s√©lectionner pi√®ces @dossier cat√©gorie proc√©dure`
        - `cr√©er bordereau @pi√®ces_s√©lectionn√©es`
        - `importer documents PDF`
        - `exporter analyse format word`
        - `envoyer par email @destinataire`
        """)
    
    # Menu d'actions rapides
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üìÑ Nouvelle r√©daction", key="quick_redaction"):
            st.session_state.universal_query = "r√©diger "
            st.session_state.process_query = True
    
    with col2:
        if st.button("ü§ñ Analyser dossier", key="quick_analysis"):
            st.session_state.universal_query = "analyser "
            st.session_state.process_query = True
    
    with col3:
        if st.button("üì• Importer", key="quick_import"):
            st.session_state.universal_query = "importer documents"
            st.session_state.process_query = True
    
    with col4:
        if st.button("üîÑ R√©initialiser", key="quick_reset"):
            clear_universal_state()
    
    # Traiter la requ√™te
    if query and (search_button or st.session_state.get('process_query', False)):
        with st.spinner("üîÑ Traitement en cours..."):
            process_universal_query(query)
    
    # Afficher les r√©sultats
    show_unified_results_tab()
    
    # R√©initialiser le flag de traitement
    if 'process_query' in st.session_state:
        st.session_state.process_query = False
    
    # Footer avec actions
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üíæ Sauvegarder le travail", key="save_work"):
            save_current_work()
    
    with col2:
        if st.button("üìä Afficher les statistiques", key="show_stats"):
            show_work_statistics()
    
    with col3:
        if st.button("üîó Partager", key="share_work"):
            share_current_work()

# ========================= ROUTING ET TRAITEMENT =========================

def process_universal_query(query: str):
    """Traite une requ√™te universelle et route vers la bonne fonction"""
    
    # Sauvegarder la requ√™te
    st.session_state.last_universal_query = query
    
    # Analyser la requ√™te pour d√©tecter le type
    query_lower = query.lower()
    
    # D√âTECTION POUR R√âDACTION (incluant votre cas de plainte)
    if any(word in query_lower for word in ['r√©dige', 'r√©diger', '√©crire', 'cr√©er', 'plainte', 'conclusions', 'courrier', 'assignation']):
        st.info("üìù D√©tection d'une demande de r√©daction...")
        
        # Cas sp√©cifique : plainte avec parties multiples
        if 'plainte' in query_lower:
            # Extraire les parties de la requ√™te
            parties = []
            parties_keywords = [
                'interconstruction', 'vinci', 'sogeprom', 'demathieu bard',
                'bouygues', 'eiffage', 'spie', 'leon grosse'
            ]
            
            for partie in parties_keywords:
                if partie in query_lower:
                    # Formatage correct du nom
                    if partie == 'sogeprom':
                        parties.append('SOGEPROM R√©alisations')
                    elif partie == 'demathieu bard':
                        parties.append('Demathieu Bard')
                    else:
                        parties.append(partie.title())
            
            # Extraire la r√©f√©rence
            reference = None
            if '@' in query:
                ref_match = re.search(r'@(\w+)', query)
                if ref_match:
                    reference = ref_match.group(1)
            
            # Cr√©er la demande de r√©daction
            st.session_state.redaction_request = {
                'type': 'plainte',
                'parties': parties,
                'reference': reference,
                'query': query
            }
            
            # G√©n√©rer la plainte
            generate_plainte(query, parties)
        else:
            # Autres types de r√©daction
            process_redaction_request(query, analyze_query(query))
    
    # PLAIDOIRIE
    elif any(word in query_lower for word in ['plaidoirie', 'plaider', 'audience']):
        st.info("üé§ D√©tection d'une demande de plaidoirie...")
        process_plaidoirie_request(query, analyze_query(query))
    
    # PR√âPARATION CLIENT
    elif any(word in query_lower for word in ['pr√©parer client', 'pr√©paration', 'coaching']):
        st.info("üë• D√©tection d'une demande de pr√©paration client...")
        process_preparation_client_request(query, analyze_query(query))
    
    # IMPORT
    elif any(word in query_lower for word in ['import', 'importer', 'charger', 'upload']):
        st.info("üì• D√©tection d'une demande d'import...")
        process_import_request(query, analyze_query(query))
    
    # EXPORT
    elif any(word in query_lower for word in ['export', 'exporter', 't√©l√©charger', 'download']):
        st.info("üíæ D√©tection d'une demande d'export...")
        process_export_request(query, analyze_query(query))
    
    # EMAIL
    elif any(word in query_lower for word in ['email', 'envoyer', 'mail', 'courrier √©lectronique']):
        st.info("üìß D√©tection d'une demande d'email...")
        process_email_request(query, analyze_query(query))
    
    # ANALYSE
    elif any(word in query_lower for word in ['analyser', 'analyse', '√©tudier', 'examiner']):
        st.info("ü§ñ D√©tection d'une demande d'analyse...")
        process_analysis_request(query, analyze_query(query))
    
    # PI√àCES
    elif any(word in query_lower for word in ['s√©lectionner pi√®ces', 'pi√®ces', 's√©lection']):
        st.info("üìã D√©tection d'une demande de s√©lection de pi√®ces...")
        process_piece_selection_request(query, analyze_query(query))
    
    # BORDEREAU
    elif 'bordereau' in query_lower:
        st.info("üìä D√©tection d'une demande de bordereau...")
        process_bordereau_request(query, analyze_query(query))
    
    # SYNTH√àSE
    elif any(word in query_lower for word in ['synth√®se', 'synth√©tiser', 'r√©sumer']):
        st.info("üìù D√©tection d'une demande de synth√®se...")
        process_synthesis_request(query, analyze_query(query))
    
    # TEMPLATES
    elif any(word in query_lower for word in ['template', 'mod√®le', 'gabarit']):
        st.info("üìÑ D√©tection d'une demande de template...")
        process_template_request(query, analyze_query(query))
    
    # JURISPRUDENCE
    elif any(word in query_lower for word in ['jurisprudence', 'juris', 'd√©cision', 'arr√™t']):
        st.info("‚öñÔ∏è D√©tection d'une demande de jurisprudence...")
        process_jurisprudence_request(query, analyze_query(query))
    
    # CHRONOLOGIE
    elif any(word in query_lower for word in ['chronologie', 'timeline', 'frise']):
        st.info("‚è±Ô∏è D√©tection d'une demande de chronologie...")
        process_timeline_request(query, analyze_query(query))
    
    # CARTOGRAPHIE
    elif any(word in query_lower for word in ['cartographie', 'mapping', 'carte', 'r√©seau']):
        st.info("üó∫Ô∏è D√©tection d'une demande de cartographie...")
        process_mapping_request(query, analyze_query(query))
    
    # COMPARAISON
    elif any(word in query_lower for word in ['comparer', 'comparaison', 'diff√©rences']):
        st.info("üîÑ D√©tection d'une demande de comparaison...")
        process_comparison_request(query, analyze_query(query))
    
    else:
        # Recherche simple par d√©faut
        st.info("üîç Recherche simple...")
        process_search_request(query, analyze_query(query))

# ========================= AFFICHAGE DES R√âSULTATS =========================

def show_unified_results_tab():
    """Affiche tous les types de r√©sultats dans un onglet unifi√©"""
    
    has_results = False
    
    # R√âSULTATS DE R√âDACTION (Priorit√© 1)
    if st.session_state.get('redaction_result'):
        show_redaction_results()
        has_results = True
    
    # R√âSULTATS D'ANALYSE IA (Priorit√© 2)
    elif st.session_state.get('ai_analysis_results'):
        show_ai_analysis_results()
        has_results = True
    
    # R√âSULTATS DE RECHERCHE (Priorit√© 3)
    elif st.session_state.get('search_results'):
        show_search_results()
        has_results = True
    
    # R√âSULTATS DE SYNTH√àSE (Priorit√© 4)
    elif st.session_state.get('synthesis_result'):
        show_synthesis_results()
        has_results = True
    
    # R√âSULTATS DE TIMELINE (Priorit√© 5)
    elif st.session_state.get('timeline_result'):
        show_timeline_results()
        has_results = True
    
    # Message si aucun r√©sultat
    if not has_results:
        st.info("üí° Utilisez la barre de recherche universelle pour commencer")
        
        # Suggestions d'utilisation
        st.markdown("""
        ### üöÄ Exemples de commandes
        
        **Recherche :**
        - `contrats soci√©t√© XYZ`
        - `@affaire_martin documents comptables`
        
        **Analyse :**
        - `analyser les risques @dossier_p√©nal`
        - `identifier les infractions @affaire_corruption`
        
        **R√©daction :**
        - `r√©diger conclusions d√©fense @affaire_martin`
        - `cr√©er plainte contre Vinci, SOGEPROM`
        
        **Gestion :**
        - `importer documents PDF`
        - `exporter analyse format word`
        """)

def show_redaction_results():
    """Affiche les r√©sultats de r√©daction"""
    result = st.session_state.redaction_result
    
    st.markdown("### üìù Document juridique g√©n√©r√©")
    
    # M√©tadonn√©es
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        doc_icons = {
            'conclusions': '‚öñÔ∏è Conclusions',
            'plainte': 'üìã Plainte',
            'courrier': '‚úâÔ∏è Courrier',
            'assignation': 'üìú Assignation'
        }
        st.metric("Type", doc_icons.get(result['type'], 'üìÑ Document'))
    
    with col2:
        st.metric("G√©n√©r√© par", result.get('provider', 'IA'))
    
    with col3:
        word_count = len(result['document'].split())
        st.metric("Mots", f"{word_count:,}")
    
    with col4:
        char_count = len(result['document'])
        st.metric("Caract√®res", f"{char_count:,}")
    
    # Zone d'√©dition principale
    st.markdown("#### üìÑ Contenu du document")
    
    edited_content = st.text_area(
        "Vous pouvez √©diter le document",
        value=result['document'],
        height=600,
        key="edit_redaction_main"
    )
    
    # Barre d'outils
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        if st.button("üîÑ R√©g√©n√©rer", key="regenerate_main"):
            st.session_state.process_query = True
            st.rerun()
    
    with col2:
        if st.button("üìä Statistiques", key="document_stats"):
            show_document_statistics(edited_content)
    
    with col3:
        # Export Word
        st.download_button(
            "üìÑ Word",
            edited_content.encode('utf-8'),
            f"{result['type']}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx",
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )
    
    with col4:
        # Export texte
        st.download_button(
            "üìù Texte",
            edited_content.encode('utf-8'),
            f"{result['type']}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
            "text/plain"
        )
    
    with col5:
        if st.button("üìß Envoyer", key="prepare_email_main"):
            st.session_state.pending_email = {
                'content': edited_content,
                'type': result['type']
            }

def show_ai_analysis_results():
    """Affiche les r√©sultats d'analyse IA avec v√©rification des jurisprudences"""
    results = st.session_state.ai_analysis_results
    
    if 'error' in results:
        st.error(f"‚ùå {results['error']}")
        return
    
    analysis_titles = {
        'risk_analysis': '‚ö†Ô∏è Analyse des risques',
        'compliance': '‚úÖ Analyse de conformit√©',
        'strategy': 'üéØ Analyse strat√©gique',
        'general_analysis': 'ü§ñ Analyse g√©n√©rale',
        'infractions': 'üéØ Analyse infractions √©conomiques'
    }
    
    st.markdown(f"### {analysis_titles.get(results.get('type'), 'ü§ñ Analyse IA')}")
    
    # M√©tadonn√©es
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Documents analys√©s", results.get('document_count', 0))
    with col2:
        st.metric("Type", results.get('type', 'general').replace('_', ' ').title())
    with col3:
        st.metric("G√©n√©r√© le", results.get('timestamp', datetime.now()).strftime('%H:%M'))
    
    # Contenu de l'analyse
    st.markdown("#### üìä R√©sultats de l'analyse")
    
    analysis_content = st.text_area(
        "Analyse d√©taill√©e",
        value=results.get('content', ''),
        height=600,
        key="ai_analysis_content"
    )
    
    # V√©rification des jurisprudences
    if st.checkbox("üîç V√©rifier les jurisprudences cit√©es", key="verify_juris_check"):
        verify_jurisprudences_in_analysis(analysis_content)
    
    # Actions
    col1, col2 = st.columns(2)
    
    with col1:
        st.download_button(
            "üíæ T√©l√©charger",
            analysis_content.encode('utf-8'),
            f"analyse_{results.get('type', 'general')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
            "text/plain"
        )
    
    with col2:
        if st.button("üîÑ Approfondir", key="deepen_analysis"):
            st.session_state.pending_deepen_analysis = True

def show_search_results():
    """Affiche les r√©sultats de recherche"""
    results = st.session_state.search_results
    
    st.markdown(f"### üîç R√©sultats de recherche ({len(results)} documents)")
    
    if not results:
        st.info("Aucun r√©sultat trouv√©")
        return
    
    # Options d'affichage
    col1, col2 = st.columns(2)
    
    with col1:
        sort_by = st.selectbox(
            "Trier par",
            ["Pertinence", "Titre", "Date", "Source"],
            key="sort_search_results"
        )
    
    with col2:
        view_mode = st.radio(
            "Affichage",
            ["Compact", "D√©taill√©"],
            key="view_mode_search",
            horizontal=True
        )
    
    # Afficher les r√©sultats
    for i, result in enumerate(results[:20], 1):  # Limiter √† 20
        with st.container():
            if view_mode == "Compact":
                st.markdown(f"**{i}. {result.get('title', 'Sans titre')}**")
                st.caption(f"Source: {result.get('source', 'N/A')} | Score: {result.get('score', 0):.0%}")
            else:
                st.markdown(f"**{i}. {result.get('title', 'Sans titre')}**")
                st.caption(f"Source: {result.get('source', 'N/A')} | Score: {result.get('score', 0):.0%}")
                
                # Extrait
                content = result.get('content', '')
                if content:
                    st.text_area(
                        "Extrait",
                        value=content[:500] + '...' if len(content) > 500 else content,
                        height=150,
                        key=f"extract_{i}",
                        disabled=True
                    )
            
            st.divider()

def show_synthesis_results():
    """Affiche les r√©sultats de synth√®se"""
    result = st.session_state.synthesis_result
    
    if 'error' in result:
        st.error(f"‚ùå {result['error']}")
        return
    
    st.markdown("### üìù Synth√®se des documents")
    
    # M√©tadonn√©es
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Pi√®ces analys√©es", result.get('piece_count', 0))
    with col2:
        st.metric("Cat√©gories", len(result.get('categories', [])))
    with col3:
        st.metric("G√©n√©r√© le", result.get('timestamp', datetime.now()).strftime('%H:%M'))
    
    # Contenu
    synthesis_content = st.text_area(
        "Contenu de la synth√®se",
        value=result.get('content', ''),
        height=600,
        key="synthesis_content_display"
    )
    
    # Actions
    if st.download_button(
        "üíæ T√©l√©charger",
        synthesis_content.encode('utf-8'),
        f"synthese_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
        "text/plain"
    ):
        st.success("‚úÖ Synth√®se t√©l√©charg√©e")

def show_timeline_results():
    """Affiche les r√©sultats de chronologie"""
    result = st.session_state.timeline_result
    
    st.markdown(f"### ‚è±Ô∏è Chronologie")
    
    # Affichage simple
    for event in result.get('events', []):
        col1, col2 = st.columns([1, 4])
        with col1:
            st.write(f"**{event.get('date', 'N/A')}**")
        with col2:
            st.write(event.get('description', ''))
            if event.get('actors'):
                st.caption(f"üë• {', '.join(event['actors'])}")

# ========================= GESTION DES PI√àCES =========================

def process_piece_selection_request(query: str, analysis: dict):
    """Traite une demande de s√©lection de pi√®ces"""
    
    st.markdown("### üìã S√©lection de pi√®ces")
    
    # Collecter les documents disponibles
    available_docs = collect_available_documents(analysis)
    
    if not available_docs:
        st.warning("‚ö†Ô∏è Aucun document disponible")
        return
    
    # Grouper par cat√©gorie
    categories = group_documents_by_category(available_docs)
    
    # Interface de s√©lection
    selected_pieces = []
    
    for category, docs in categories.items():
        with st.expander(f"üìÅ {category} ({len(docs)} documents)", expanded=True):
            select_all = st.checkbox(f"Tout s√©lectionner - {category}", key=f"select_all_{category}")
            
            for doc in docs:
                is_selected = st.checkbox(
                    f"üìÑ {doc['title']}",
                    value=select_all,
                    key=f"select_doc_{doc['id']}",
                    help=f"Source: {doc.get('source', 'N/A')}"
                )
                
                if is_selected:
                    selected_pieces.append(PieceSelectionnee(
                        numero=len(selected_pieces) + 1,
                        titre=doc['title'],
                        description=doc.get('description', ''),
                        categorie=category,
                        date=doc.get('date'),
                        source=doc.get('source', ''),
                        pertinence=calculate_piece_relevance(doc, analysis)
                    ))
    
    # Sauvegarder la s√©lection
    st.session_state.selected_pieces = selected_pieces
    
    # Actions
    if selected_pieces:
        st.success(f"‚úÖ {len(selected_pieces)} pi√®ces s√©lectionn√©es")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üìä Cr√©er bordereau", key="create_bordereau_from_selection"):
                process_bordereau_request(query, analysis)
        
        with col2:
            if st.button("üìÑ Synth√©tiser", key="synthesize_selection"):
                synthesize_selected_pieces(selected_pieces)
        
        with col3:
            if st.button("üì§ Exporter liste", key="export_piece_list"):
                export_piece_list(selected_pieces)

def process_bordereau_request(query: str, analysis: dict):
    """Traite une demande de cr√©ation de bordereau"""
    
    pieces = st.session_state.get('selected_pieces', [])
    
    if not pieces:
        st.warning("‚ö†Ô∏è Aucune pi√®ce s√©lectionn√©e pour le bordereau")
        return
    
    # Cr√©er le bordereau
    bordereau = create_bordereau(pieces, analysis)
    
    # Afficher
    st.markdown("### üìä Bordereau de communication de pi√®ces")
    
    # En-t√™te
    st.text_area(
        "En-t√™te du bordereau",
        value=bordereau['header'],
        height=150,
        key="bordereau_header"
    )
    
    # Table des pi√®ces
    try:
        df = pd.DataFrame([
            {
                'N¬∞': p.numero,
                'Titre': p.titre,
                'Description': p.description,
                'Cat√©gorie': p.categorie,
                'Date': p.date.strftime('%d/%m/%Y') if p.date else 'N/A'
            }
            for p in pieces
        ])
        
        st.dataframe(df, use_container_width=True)
    except:
        # Affichage sans pandas
        for piece in pieces:
            st.write(f"**{piece.numero}.** {piece.titre}")
            if piece.description:
                st.caption(piece.description)
    
    # Actions
    col1, col2 = st.columns(2)
    
    with col1:
        st.download_button(
            "üíæ T√©l√©charger bordereau",
            create_bordereau_document(bordereau),
            f"bordereau_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx",
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )
    
    with col2:
        if st.button("üìß Envoyer bordereau", key="send_bordereau"):
            st.session_state.pending_email = {
                'content': create_bordereau_document(bordereau),
                'type': 'bordereau'
            }

def synthesize_selected_pieces(pieces: list):
    """Synth√©tise les pi√®ces s√©lectionn√©es"""
    
    try:
        llm_manager = MultiLLMManager()
        
        if not llm_manager.clients:
            return {'error': 'Aucune IA disponible'}
        
        # Construire le contexte
        context = "PI√àCES √Ä SYNTH√âTISER:\n\n"
        
        for piece in pieces[:20]:  # Limiter
            context += f"Pi√®ce {piece.numero}: {piece.titre}\n"
            context += f"Cat√©gorie: {piece.categorie}\n"
            if piece.description:
                context += f"Description: {piece.description}\n"
            context += "\n"
        
        # Prompt
        synthesis_prompt = f"""{context}
Cr√©e une synth√®se structur√©e de ces pi√®ces.
La synth√®se doit inclure:
1. Vue d'ensemble des pi√®ces
2. Points cl√©s par cat√©gorie
3. Chronologie si applicable
4. Points d'attention juridiques
5. Recommandations"""
        
        provider = list(llm_manager.clients.keys())[0]
        response = llm_manager.query_single_llm(
            provider,
            synthesis_prompt,
            "Tu es un expert en analyse de documents juridiques."
        )
        
        if response['success']:
            synthesis_result = {
                'content': response['response'],
                'piece_count': len(pieces),
                'categories': list(set(p.categorie for p in pieces)),
                'timestamp': datetime.now()
            }
            st.session_state.synthesis_result = synthesis_result
            return synthesis_result
        else:
            return {'error': '√âchec de la synth√®se'}
            
    except Exception as e:
        return {'error': f'Erreur synth√®se: {str(e)}'}

# ========================= ANALYSE IA =========================

def process_analysis_request(query: str, analysis: dict):
    """Traite une demande d'analyse IA avec support des infractions"""
    
    # Collecter les documents pertinents
    documents = collect_relevant_documents(analysis)
    
    if not documents:
        st.warning("‚ö†Ô∏è Aucun document trouv√© pour l'analyse")
        return
    
    # Configuration de l'analyse
    st.markdown("### ‚öôÔ∏è Configuration de l'analyse")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Type d'infraction si pertinent
        if any(word in query.lower() for word in ['infraction', 'd√©lit', 'crime']):
            infractions_list = [inf.value for inf in InfractionAffaires]
            
            st.session_state.infraction = st.text_input(
                "Type d'infraction",
                placeholder="Ex: Abus de biens sociaux, corruption, fraude fiscale...",
                key="infraction_input",
                help="Saisissez librement l'infraction"
            )
            
            if not st.session_state.infraction:
                st.info("üí° Suggestions : " + ", ".join(infractions_list[:5]) + "...")
        
        # Client
        st.session_state.client_nom = st.text_input(
            "Nom du client",
            placeholder="Personne physique ou morale",
            key="client_nom_analyse"
        )
    
    with col2:
        # Type d'analyse
        analysis_type = st.selectbox(
            "Type d'analyse",
            ["Analyse g√©n√©rale", "Risques juridiques", "Conformit√©", "Strat√©gie", "Infractions"],
            key="analysis_type_select"
        )
    
    # Lancer l'analyse
    if st.button("üöÄ Lancer l'analyse", type="primary", key="launch_analysis"):
        with st.spinner("ü§ñ Analyse en cours..."):
            if analysis_type == "Risques juridiques":
                results = analyze_legal_risks(documents, query)
            elif analysis_type == "Conformit√©":
                results = analyze_compliance(documents, query)
            elif analysis_type == "Strat√©gie":
                results = analyze_strategy(documents, query)
            elif analysis_type == "Infractions":
                results = analyze_infractions(documents, query)
            else:
                results = perform_general_analysis(documents, query)
        
        # Stocker les r√©sultats
        st.session_state.ai_analysis_results = results
        st.rerun()

def analyze_infractions(documents: List[Dict[str, Any]], query: str) -> dict:
    """Analyse sp√©cifique des infractions √©conomiques"""
    
    llm_manager = MultiLLMManager()
    if not llm_manager.clients:
        return {'error': 'Aucune IA disponible'}
    
    # Construire le prompt sp√©cialis√©
    infraction_prompt = f"""Analyse ces documents pour identifier des infractions √©conomiques.
Client: {st.session_state.get('client_nom', 'Non sp√©cifi√©')}
Infraction suspect√©e: {st.session_state.get('infraction', '√Ä d√©terminer')}

DOCUMENTS:
{chr(10).join([f"- {doc.get('title', 'Sans titre')}: {doc.get('content', '')[:500]}..." for doc in documents[:10]])}

Identifie:
1. INFRACTIONS CARACT√âRIS√âES
   - Qualification juridique pr√©cise
   - Articles du Code p√©nal applicables
   - √âl√©ments constitutifs pr√©sents/absents
   
2. RESPONSABILIT√âS
   - Personnes physiques impliqu√©es
   - Responsabilit√© des personnes morales
   
3. SANCTIONS ENCOURUES
   - Peines principales
   - Peines compl√©mentaires
   - Prescription

4. √âL√âMENTS DE PREUVE
   - Preuves mat√©rielles identifi√©es
   - T√©moignages pertinents
   - Documents cl√©s

5. STRAT√âGIE DE D√âFENSE
   - Points faibles de l'accusation
   - Arguments de d√©fense possibles
   - Jurisprudences favorables"""
    
    try:
        provider = list(llm_manager.clients.keys())[0]
        response = llm_manager.query_single_llm(
            provider,
            infraction_prompt,
            "Tu es un avocat expert en droit p√©nal des affaires."
        )
        
        if response['success']:
            return {
                'type': 'infractions',
                'content': response['response'],
                'document_count': len(documents),
                'timestamp': datetime.now(),
                'query': query,
                'infraction': st.session_state.get('infraction', 'Non sp√©cifi√©e')
            }
    except Exception as e:
        return {'error': f'Erreur analyse infractions: {str(e)}'}

def analyze_legal_risks(documents: List[Dict[str, Any]], query: str) -> dict:
    """Analyse les risques juridiques"""
    
    llm_manager = MultiLLMManager()
    if not llm_manager.clients:
        return {'error': 'Aucune IA disponible'}
    
    # Construire le prompt
    risk_prompt = f"""Analyse les risques juridiques dans ces documents.
DOCUMENTS:
{chr(10).join([f"- {doc.get('title', 'Sans titre')}: {doc.get('content', '')[:500]}..." for doc in documents[:10]])}
QUESTION: {query}
Identifie et √©value:
1. RISQUES P√âNAUX
2. RISQUES CIVILS
3. RISQUES R√âPUTATIONNELS
4. RECOMMANDATIONS
Format structur√© avec √©valuation pr√©cise."""
    
    try:
        provider = list(llm_manager.clients.keys())[0]
        response = llm_manager.query_single_llm(
            provider,
            risk_prompt,
            "Tu es un expert en analyse de risques juridiques."
        )
        
        if response['success']:
            return {
                'type': 'risk_analysis',
                'content': response['response'],
                'document_count': len(documents),
                'timestamp': datetime.now(),
                'query': query
            }
    except Exception as e:
        return {'error': f'Erreur analyse: {str(e)}'}

def analyze_compliance(documents: List[Dict[str, Any]], query: str) -> dict:
    """Analyse de conformit√©"""
    
    llm_manager = MultiLLMManager()
    if not llm_manager.clients:
        return {'error': 'Aucune IA disponible'}
    
    compliance_prompt = f"""Analyse la conformit√© l√©gale et r√©glementaire.
DOCUMENTS:
{chr(10).join([f"- {doc.get('title', 'Sans titre')}: {doc.get('content', '')[:500]}..." for doc in documents[:10]])}
QUESTION: {query}
V√©rifie:
1. CONFORMIT√â L√âGALE
2. CONFORMIT√â R√âGLEMENTAIRE
3. MANQUEMENTS IDENTIFI√âS
4. ACTIONS CORRECTIVES
5. RECOMMANDATIONS"""
    
    try:
        provider = list(llm_manager.clients.keys())[0]
        response = llm_manager.query_single_llm(
            provider,
            compliance_prompt,
            "Tu es un expert en conformit√© juridique."
        )
        
        if response['success']:
            return {
                'type': 'compliance',
                'content': response['response'],
                'document_count': len(documents),
                'timestamp': datetime.now(),
                'query': query
            }
    except Exception as e:
        return {'error': f'Erreur analyse conformit√©: {str(e)}'}

def analyze_strategy(documents: List[Dict[str, Any]], query: str) -> dict:
    """Analyse strat√©gique"""
    
    llm_manager = MultiLLMManager()
    if not llm_manager.clients:
        return {'error': 'Aucune IA disponible'}
    
    strategy_prompt = f"""D√©veloppe une strat√©gie juridique bas√©e sur ces documents.
DOCUMENTS:
{chr(10).join([f"- {doc.get('title', 'Sans titre')}: {doc.get('content', '')[:500]}..." for doc in documents[:10]])}
QUESTION: {query}
√âlabore:
1. ANALYSE DE LA SITUATION
2. OPTIONS STRAT√âGIQUES
3. AVANTAGES/INCONV√âNIENTS
4. STRAT√âGIE RECOMMAND√âE
5. PLAN D'ACTION"""
    
    try:
        provider = list(llm_manager.clients.keys())[0]
        response = llm_manager.query_single_llm(
            provider,
            strategy_prompt,
            "Tu es un strat√®ge juridique exp√©riment√©."
        )
        
        if response['success']:
            return {
                'type': 'strategy',
                'content': response['response'],
                'document_count': len(documents),
                'timestamp': datetime.now(),
                'query': query
            }
    except Exception as e:
        return {'error': f'Erreur analyse strat√©gique: {str(e)}'}

def perform_general_analysis(documents: List[Dict[str, Any]], query: str) -> dict:
    """Analyse g√©n√©rale des documents"""
    
    llm_manager = MultiLLMManager()
    if not llm_manager.clients:
        return {'error': 'Aucune IA disponible'}
    
    general_prompt = f"""Analyse ces documents pour r√©pondre √† la question.
DOCUMENTS:
{chr(10).join([f"- {doc.get('title', 'Sans titre')}: {doc.get('content', '')[:500]}..." for doc in documents[:10]])}
QUESTION: {query}
Fournis une analyse compl√®te et structur√©e."""
    
    try:
        provider = list(llm_manager.clients.keys())[0]
        response = llm_manager.query_single_llm(
            provider,
            general_prompt,
            "Tu es un expert en analyse juridique."
        )
        
        if response['success']:
            return {
                'type': 'general_analysis',
                'content': response['response'],
                'document_count': len(documents),
                'timestamp': datetime.now(),
                'query': query
            }
    except Exception as e:
        return {'error': f'Erreur analyse: {str(e)}'}

def verify_jurisprudences_in_analysis(content: str):
    """V√©rifie les jurisprudences cit√©es dans l'analyse"""
    st.markdown("### üîç V√©rification des jurisprudences cit√©es")
    
    try:
        # Cr√©er le v√©rificateur
        verifier = JurisprudenceVerifier()
        
        # Afficher l'interface de v√©rification
        verification_results = display_jurisprudence_verification(content, verifier)
        
        # Stocker les r√©sultats de v√©rification
        if verification_results:
            st.session_state.jurisprudence_verification = verification_results
            
            # R√©sum√©
            verified_count = sum(1 for r in verification_results if r.status == 'verified')
            total_count = len(verification_results)
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("Jurisprudences v√©rifi√©es", f"{verified_count}/{total_count}")
            
            with col2:
                confidence = (verified_count / total_count * 100) if total_count > 0 else 0
                st.metric("Fiabilit√© des sources", f"{confidence:.0f}%")
        
        return verification_results
    except:
        st.warning("‚ö†Ô∏è V√©rificateur de jurisprudences non disponible")
        return []

# ========================= FONCTIONS DE TRAITEMENT =========================

def process_redaction_request(query: str, analysis: dict):
    """Traite une demande de r√©daction"""
    # Import depuis le module de r√©daction
    st.info("üìù Traitement de la demande de r√©daction...")
    # TODO: Impl√©menter ou importer depuis recherche_redaction

def generate_plainte(query: str, parties: list):
    """G√©n√®re une plainte avec les parties sp√©cifi√©es"""
    
    llm_manager = MultiLLMManager()
    if not llm_manager.clients:
        st.error("‚ùå Aucune IA disponible")
        return
    
    # Construire le prompt
    plainte_prompt = f"""R√©dige une plainte p√©nale professionnelle.

DEMANDEUR: {st.session_state.get('client_nom', 'Le plaignant')}
PARTIES MISES EN CAUSE: {', '.join(parties)}
CONTEXTE: {query}

Structure la plainte avec:
1. En-t√™te (Tribunal comp√©tent, identit√© du plaignant)
2. EXPOS√â DES FAITS (chronologique et d√©taill√©)
3. QUALIFICATION JURIDIQUE (infractions caract√©ris√©es)
4. PR√âJUDICES SUBIS (moral, mat√©riel, financier)
5. DEMANDES (poursuites p√©nales, dommages-int√©r√™ts)
6. PI√àCES JOINTES

Style: Formel, juridique, factuel."""
    
    try:
        provider = list(llm_manager.clients.keys())[0]
        response = llm_manager.query_single_llm(
            provider,
            plainte_prompt,
            "Tu es un avocat expert en r√©daction de plaintes p√©nales."
        )
        
        if response['success']:
            st.session_state.redaction_result = {
                'type': 'plainte',
                'document': response['response'],
                'provider': provider.value,
                'timestamp': datetime.now(),
                'parties': parties
            }
            st.rerun()
    except Exception as e:
        st.error(f"‚ùå Erreur g√©n√©ration: {str(e)}")

def process_plaidoirie_request(query: str, analysis: dict):
    """Traite une demande de plaidoirie"""
    st.info("üé§ Pr√©paration de plaidoirie...")
    # TODO: Impl√©menter

def process_preparation_client_request(query: str, analysis: dict):
    """Traite une demande de pr√©paration client"""
    st.info("üë• Pr√©paration du client...")
    # TODO: Impl√©menter

def process_import_request(query: str, analysis: dict):
    """Traite une demande d'import"""
    st.info("üì• Import de documents...")
    # TODO: Impl√©menter

def process_export_request(query: str, analysis: dict):
    """Traite une demande d'export"""
    st.info("üíæ Export en cours...")
    # TODO: Impl√©menter

def process_email_request(query: str, analysis: dict):
    """Traite une demande d'email"""
    st.info("üìß Pr√©paration de l'email...")
    # TODO: Impl√©menter

def process_synthesis_request(query: str, analysis: dict):
    """Traite une demande de synth√®se"""
    
    # D√©terminer la source
    if st.session_state.get('selected_pieces'):
        content_to_synthesize = synthesize_selected_pieces(st.session_state.selected_pieces)
    elif analysis.get('reference'):
        docs = search_by_reference(f"@{analysis['reference']}")
        pieces = []
        for i, doc in enumerate(docs):
            pieces.append(PieceSelectionnee(
                numero=i + 1,
                titre=doc.get('title', 'Sans titre'),
                description=doc.get('content', '')[:200] + '...' if doc.get('content') else '',
                categorie=determine_document_category(doc),
                source=doc.get('source', '')
            ))
        content_to_synthesize = synthesize_selected_pieces(pieces)
    else:
        st.warning("‚ö†Ô∏è Aucun contenu √† synth√©tiser")
        return

def process_template_request(query: str, analysis: dict):
    """Traite une demande de template"""
    st.info("üìÑ Gestion des templates...")
    
    # Afficher les templates disponibles
    st.markdown("### üìÑ Templates disponibles")
    
    for template_id, template in DOCUMENT_TEMPLATES.items():
        with st.expander(f"üìÑ {template['name']}", expanded=False):
            st.markdown("**Structure:**")
            for element in template['structure']:
                st.write(f"- {element}")
            st.markdown(f"**Style:** {REDACTION_STYLES[template['style']]['description']}")
            
            if st.button(f"Utiliser ce template", key=f"use_template_{template_id}"):
                st.session_state.selected_template = template_id
                st.info(f"‚úÖ Template '{template['name']}' s√©lectionn√©")

def process_jurisprudence_request(query: str, analysis: dict):
    """Traite une demande de jurisprudence"""
    st.info("‚öñÔ∏è Recherche de jurisprudence...")
    # TODO: Impl√©menter

def process_timeline_request(query: str, analysis: dict):
    """Traite une demande de chronologie"""
    st.info("‚è±Ô∏è Cr√©ation de la chronologie...")
    # TODO: Impl√©menter

def process_mapping_request(query: str, analysis: dict):
    """Traite une demande de cartographie"""
    st.info("üó∫Ô∏è Cr√©ation de la cartographie...")
    # TODO: Impl√©menter

def process_comparison_request(query: str, analysis: dict):
    """Traite une demande de comparaison"""
    st.info("üîÑ Comparaison en cours...")
    # TODO: Impl√©menter

def process_search_request(query: str, analysis: dict):
    """Traite une demande de recherche simple"""
    
    results = []
    
    # Recherche selon le contexte
    if analysis.get('reference'):
        results = search_by_reference(f"@{analysis['reference']}")
    else:
        results = perform_search(query)
    
    # Stocker les r√©sultats
    st.session_state.search_results = results
    
    if not results:
        st.warning("‚ö†Ô∏è Aucun r√©sultat trouv√©")
    else:
        st.success(f"‚úÖ {len(results)} r√©sultats trouv√©s")

# ========================= FONCTIONS HELPER =========================

def analyze_query(query: str) -> dict:
    """Analyse une requ√™te pour extraire les informations cl√©s"""
    
    analysis = {
        'original_query': query,
        'reference': None,
        'subject_matter': None,
        'document_type': None,
        'action': None
    }
    
    # Extraire la r√©f√©rence @
    ref_match = re.search(r'@(\w+)', query)
    if ref_match:
        analysis['reference'] = ref_match.group(1)
    
    # D√©tecter le type de document
    query_lower = query.lower()
    for doc_type in ['conclusions', 'plainte', 'courrier', 'assignation', 'mise en demeure']:
        if doc_type in query_lower:
            analysis['document_type'] = doc_type
            break
    
    # D√©tecter l'action principale
    actions = {
        'r√©diger': 'redaction',
        'analyser': 'analysis',
        'rechercher': 'search',
        'comparer': 'comparison',
        'cr√©er': 'creation'
    }
    
    for keyword, action in actions.items():
        if keyword in query_lower:
            analysis['action'] = action
            break
    
    # Extraire le sujet
    # Simplification - en production, utiliser NLP
    if 'abus' in query_lower and 'biens' in query_lower:
        analysis['subject_matter'] = 'abus de biens sociaux'
    elif 'corruption' in query_lower:
        analysis['subject_matter'] = 'corruption'
    elif 'fraude' in query_lower:
        analysis['subject_matter'] = 'fraude'
    
    return analysis

def collect_relevant_documents(analysis: dict) -> List[Dict[str, Any]]:
    """Collecte les documents pertinents selon l'analyse"""
    
    documents = []
    
    # Documents locaux
    for doc_id, doc in st.session_state.get('azure_documents', {}).items():
        documents.append({
            'id': doc_id,
            'title': doc.title,
            'content': doc.content,
            'source': doc.source,
            'metadata': doc.metadata
        })
    
    # Filtrer par r√©f√©rence si pr√©sente
    if analysis.get('reference'):
        ref_lower = analysis['reference'].lower()
        documents = [d for d in documents if ref_lower in d['title'].lower() or ref_lower in d.get('source', '').lower()]
    
    return documents

def collect_available_documents(analysis: dict) -> list:
    """Collecte tous les documents disponibles"""
    documents = []
    
    # Documents locaux
    for doc_id, doc in st.session_state.get('azure_documents', {}).items():
        documents.append({
            'id': doc_id,
            'title': doc.title,
            'content': doc.content,
            'source': doc.source,
            'metadata': doc.metadata
        })
    
    return documents

def group_documents_by_category(documents: list) -> dict:
    """Groupe les documents par cat√©gorie"""
    categories = defaultdict(list)
    
    for doc in documents:
        category = determine_document_category(doc)
        categories[category].append(doc)
    
    return dict(categories)

def determine_document_category(doc: dict) -> str:
    """D√©termine la cat√©gorie d'un document"""
    title_lower = doc.get('title', '').lower()
    content_lower = doc.get('content', '')[:500].lower()
    
    category_patterns = {
        'Proc√©dure': ['plainte', 'proc√®s-verbal', 'audition'],
        'Expertise': ['expertise', 'expert', 'rapport technique'],
        'Comptabilit√©': ['bilan', 'compte', 'facture'],
        'Contrats': ['contrat', 'convention', 'accord'],
        'Correspondance': ['courrier', 'email', 'lettre']
    }
    
    for category, keywords in category_patterns.items():
        if any(kw in title_lower or kw in content_lower for kw in keywords):
            return category
    
    return 'Autres'

def calculate_piece_relevance(doc: dict, analysis: dict) -> float:
    """Calcule la pertinence d'une pi√®ce"""
    score = 0.5
    
    if analysis.get('subject_matter'):
        if analysis['subject_matter'] in doc.get('content', '').lower():
            score += 0.3
    
    if analysis.get('reference'):
        if analysis['reference'] in doc.get('title', '').lower():
            score += 0.2
    
    return min(score, 1.0)

def create_bordereau(pieces: list, analysis: dict) -> dict:
    """Cr√©e un bordereau structur√©"""
    
    bordereau = {
        'header': f"""BORDEREAU DE COMMUNICATION DE PI√àCES
AFFAIRE : {analysis.get('reference', 'N/A').upper()}
DATE : {datetime.now().strftime('%d/%m/%Y')}
NOMBRE DE PI√àCES : {len(pieces)}""",
        'pieces': pieces,
        'footer': f"""Je certifie que les pi√®ces communiqu√©es sont conformes aux originaux.
Fait le {datetime.now().strftime('%d/%m/%Y')}""",
        'metadata': {
            'created_at': datetime.now(),
            'piece_count': len(pieces),
            'reference': analysis.get('reference')
        }
    }
    
    return bordereau

def create_bordereau_document(bordereau: dict) -> bytes:
    """Cr√©e le document du bordereau"""
    content = bordereau['header'] + '\n\n'
    
    for piece in bordereau['pieces']:
        content += f"{piece.numero}. {piece.titre}\n"
        if piece.description:
            content += f"   {piece.description}\n"
        content += f"   Cat√©gorie: {piece.categorie}\n"
        if piece.date:
            content += f"   Date: {piece.date.strftime('%d/%m/%Y')}\n"
        content += "\n"
    
    content += bordereau['footer']
    
    return content.encode('utf-8')

def export_piece_list(pieces: list):
    """Exporte la liste des pi√®ces"""
    content = "LISTE DES PI√àCES S√âLECTIONN√âES\n"
    content += f"Date : {datetime.now().strftime('%d/%m/%Y %H:%M')}\n"
    content += f"Nombre de pi√®ces : {len(pieces)}\n\n"
    
    # Grouper par cat√©gorie
    by_category = defaultdict(list)
    for piece in pieces:
        by_category[piece.categorie].append(piece)
    
    for category, cat_pieces in by_category.items():
        content += f"\n{category.upper()} ({len(cat_pieces)} pi√®ces)\n"
        content += "-" * 50 + "\n"
        
        for piece in cat_pieces:
            content += f"{piece.numero}. {piece.titre}\n"
            if piece.description:
                content += f"   {piece.description}\n"
            content += "\n"
    
    # T√©l√©charger
    st.download_button(
        "üíæ T√©l√©charger la liste",
        content.encode('utf-8'),
        f"liste_pieces_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
        "text/plain"
    )

def search_by_reference(reference: str) -> list:
    """Recherche par r√©f√©rence @"""
    results = []
    ref_clean = reference.replace('@', '').strip().lower()
    
    for doc_id, doc in st.session_state.get('azure_documents', {}).items():
        if ref_clean in doc.title.lower() or ref_clean in doc.source.lower():
            results.append({
                'id': doc_id,
                'title': doc.title,
                'content': doc.content,
                'source': doc.source
            })
    
    return results

def perform_search(query: str) -> List[Dict[str, Any]]:
    """Effectue une recherche g√©n√©rale"""
    
    results = []
    query_lower = query.lower()
    query_words = query_lower.split()
    
    # Recherche locale
    for doc_id, doc in st.session_state.get('azure_documents', {}).items():
        score = 0
        content_lower = doc.content.lower()
        title_lower = doc.title.lower()
        
        for word in query_words:
            if word in title_lower:
                score += 2
            if word in content_lower:
                score += 1
        
        if score > 0:
            results.append({
                'id': doc_id,
                'title': doc.title,
                'content': doc.content,
                'source': doc.source,
                'score': score / len(query_words)
            })
    
    # Recherche Azure si disponible
    try:
        search_manager = st.session_state.get('azure_search_manager')
        if search_manager and search_manager.is_connected():
            azure_results = search_manager.search(query)
            results.extend(azure_results)
    except:
        pass
    
    return sorted(results, key=lambda x: x.get('score', 0), reverse=True)[:50]

def clear_universal_state():
    """Efface l'√©tat de l'interface universelle"""
    keys_to_clear = [
        'universal_query', 'last_universal_query', 'current_analysis',
        'redaction_result', 'timeline_result', 'mapping_result',
        'comparison_result', 'synthesis_result', 'ai_analysis_results',
        'search_results', 'selected_pieces', 'import_files',
        'plaidoirie_result', 'preparation_client_result'
    ]
    
    for key in keys_to_clear:
        if key in st.session_state:
            del st.session_state[key]
    
    st.success("‚úÖ Interface r√©initialis√©e")
    st.rerun()

def save_current_work():
    """Sauvegarde le travail actuel"""
    work_data = {
        'timestamp': datetime.now().isoformat(),
        'query': st.session_state.get('universal_query', ''),
        'analysis': st.session_state.get('current_analysis', {}),
        'results': {}
    }
    
    # Collecter tous les r√©sultats
    result_keys = [
        'redaction_result', 'timeline_result', 'mapping_result',
        'comparison_result', 'synthesis_result', 'ai_analysis_results',
        'search_results', 'plaidoirie_result', 'preparation_client_result'
    ]
    
    for key in result_keys:
        if key in st.session_state:
            work_data['results'][key] = st.session_state[key]
    
    # Sauvegarder
    import json
    
    json_str = json.dumps(work_data, indent=2, ensure_ascii=False, default=str)
    
    st.download_button(
        "üíæ T√©l√©charger la sauvegarde",
        json_str,
        f"sauvegarde_travail_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
        "application/json",
        key="download_work_save"
    )

def show_work_statistics():
    """Affiche les statistiques du travail en cours"""
    st.info("üìä Statistiques du travail en cours")
    
    # Compter les r√©sultats
    stats = {
        'Documents': len(st.session_state.get('azure_documents', {})),
        'Pi√®ces s√©lectionn√©es': len(st.session_state.get('selected_pieces', [])),
        'Analyses': 1 if st.session_state.get('ai_analysis_results') else 0,
        'R√©dactions': 1 if st.session_state.get('redaction_result') else 0
    }
    
    cols = st.columns(len(stats))
    for i, (label, value) in enumerate(stats.items()):
        with cols[i]:
            st.metric(label, value)

def share_current_work():
    """Partage le travail actuel"""
    st.info("üîó Fonctionnalit√© de partage")
    
    # Pour l'instant, proposer l'export
    save_current_work()

def show_document_statistics(content: str):
    """Affiche les statistiques d'un document"""
    
    # Calculs
    words = content.split()
    sentences = content.split('.')
    paragraphs = content.split('\n\n')
    
    # R√©f√©rences
    law_refs = len(re.findall(r'article\s+[LR]?\s*\d+', content, re.IGNORECASE))
    
    # Affichage
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Mots", f"{len(words):,}")
        st.metric("Phrases", f"{len(sentences):,}")
    
    with col2:
        st.metric("Paragraphes", len(paragraphs))
        st.metric("Mots/phrase", f"{len(words) / max(len(sentences), 1):.1f}")
    
    with col3:
        st.metric("Articles cit√©s", law_refs)
        avg_word_length = sum(len(w) for w in words) / max(len(words), 1)
        st.metric("Longueur moy.", f"{avg_word_length:.1f} car/mot")

# ========================= FIN DU MODULE =========================